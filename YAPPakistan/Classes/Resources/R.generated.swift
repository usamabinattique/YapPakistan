//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `general_category_icon`.
    static let general_category_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "general_category_icon")
    /// Image `icon_app_logo`.
    static let icon_app_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_app_logo")
    /// Image `icon_back_purple`.
    static let icon_back_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back_purple")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_cancle_notification`.
    static let icon_cancle_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cancle_notification")
    /// Image `icon_checkmark_green`.
    static let icon_checkmark_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_checkmark_green")
    /// Image `icon_face_id`.
    static let icon_face_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_face_id")
    /// Image `icon_filter_purple`.
    static let icon_filter_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_filter_purple")
    /// Image `icon_notification_purple`.
    static let icon_notification_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notification_purple")
    /// Image `icon_notification`.
    static let icon_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notification")
    /// Image `icon_notifications`.
    static let icon_notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notifications")
    /// Image `icon_sportify_green`.
    static let icon_sportify_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sportify_green")
    /// Image `icon_switch_purple`.
    static let icon_switch_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_purple")
    /// Image `icon_touch_id`.
    static let icon_touch_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_touch_id")
    /// Image `image_account_selection_bg`.
    static let image_account_selection_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_account_selection_bg")
    /// Image `image_backgound`.
    static let image_backgound = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_backgound")
    /// Image `logo New-1`.
    static let logoNew1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo New-1")
    /// Image `logo New`.
    static let logoNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo New")
    /// Image `yap_logo_animate`.
    static let yap_logo_animate = Rswift.ImageResource(bundle: R.hostingBundle, name: "yap_logo_animate")
    /// Image `yap_logo`.
    static let yap_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "yap_logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "general_category_icon", bundle: ..., traitCollection: ...)`
    static func general_category_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.general_category_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_app_logo", bundle: ..., traitCollection: ...)`
    static func icon_app_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_app_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_purple", bundle: ..., traitCollection: ...)`
    static func icon_back_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cancle_notification", bundle: ..., traitCollection: ...)`
    static func icon_cancle_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cancle_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_checkmark_green", bundle: ..., traitCollection: ...)`
    static func icon_checkmark_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_checkmark_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_face_id", bundle: ..., traitCollection: ...)`
    static func icon_face_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_face_id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_filter_purple", bundle: ..., traitCollection: ...)`
    static func icon_filter_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_filter_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notification", bundle: ..., traitCollection: ...)`
    static func icon_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notification_purple", bundle: ..., traitCollection: ...)`
    static func icon_notification_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notification_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notifications", bundle: ..., traitCollection: ...)`
    static func icon_notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sportify_green", bundle: ..., traitCollection: ...)`
    static func icon_sportify_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sportify_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_purple", bundle: ..., traitCollection: ...)`
    static func icon_switch_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_touch_id", bundle: ..., traitCollection: ...)`
    static func icon_touch_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_touch_id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_account_selection_bg", bundle: ..., traitCollection: ...)`
    static func image_account_selection_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_account_selection_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_backgound", bundle: ..., traitCollection: ...)`
    static func image_backgound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_backgound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo New", bundle: ..., traitCollection: ...)`
    static func logoNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo New-1", bundle: ..., traitCollection: ...)`
    static func logoNew1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoNew1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yap_logo", bundle: ..., traitCollection: ...)`
    static func yap_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yap_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yap_logo_animate", bundle: ..., traitCollection: ...)`
    static func yap_logo_animate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yap_logo_animate, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 995 localization keys.
    struct localizable {
      /// Value:  Make sure you have your Emirates ID at hand before we proceed
      static let screen_onboarding_congratulations_display_text_meeting_note = Rswift.StringResource(key: "screen_onboarding_congratulations_display_text_meeting_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  to 
      static let screen_send_money_otp_display_text_subheading_preposition = Rswift.StringResource(key: "screen_send_money_otp_display_text_subheading_preposition", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ did not accpet your request for a household card
      static let screen_household_card_screen_decline_card_alert_title = Rswift.StringResource(key: "screen_household_card_screen_decline_card_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ has been added to your account
      static let screen_yap_house_hold_success_display_text_title = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ will be deducted from your account for the delivery of your new card.
      static let screen_card_blocked_display_text_note = Rswift.StringResource(key: "screen_card_blocked_display_text_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ will receive an SMS with instructions to download the app and complete sign up
      static let screen_yap_house_hold_success_display_text_direct_message = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_direct_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ will recieve %@
      static let scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts = Rswift.StringResource(key: "scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@'s card is on it's way
      static let screen_yap_house_hold_success_display_text_heading = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %d YAP contact
      static let screen_y2y_display_text_yap_contact = Rswift.StringResource(key: "screen_y2y_display_text_yap_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %d YAP contacts
      static let screen_y2y_display_text_yap_contacts = Rswift.StringResource(key: "screen_y2y_display_text_yap_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0.00
      static let custom_view_display_text_amount_view_initial_value = Rswift.StringResource(key: "custom_view_display_text_amount_view_initial_value", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 12 months
      static let screen_yap_house_hold_subscription_selection_display_text_months = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_months", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 365 days of any YAP membership calls for a celebration! We’re glad you’re enjoying YAP so far.
      static let screen_yfy_you_are_a_pro_goal_three_description = Rswift.StringResource(key: "screen_yfy_you_are_a_pro_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A YAP Personal Account has been created for you in less than %@ seconds!
      static let screen_onboarding_congratulations_display_text_sub_title = Rswift.StringResource(key: "screen_onboarding_congratulations_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A YAP Personal Account has been created for you!
      static let screen_onboarding_congratulations_display_text_sub_title_no_interval = Rswift.StringResource(key: "screen_onboarding_congratulations_display_text_sub_title_no_interval", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A card for every need
      static let screen_add_card_display_text_feature_spare_card_every_need_title = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_every_need_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A free Mastercard delivered to your doorstep
      static let screen_welcome_b2c_display_text_page2_details = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page2_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A fun way to track your progress on YAP, complete missions and explore all the different aspects of the YAP app and account.
      static let screen_more_tour_guide_yap_for_you_description = Rswift.StringResource(key: "screen_more_tour_guide_yap_for_you_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A shiny new card available in 4 metallic shades and a world of perks!  Choose from audacious amber, sparkly sterling, romantic rose or glorious granite.
      static let screen_yfy_take_the_leap_goal_two_description = Rswift.StringResource(key: "screen_yfy_take_the_leap_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A verification email will now be sent to this address
      static let screen_change_email_display_text_description = Rswift.StringResource(key: "screen_change_email_display_text_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AED
      static let common_display_text_currency = Rswift.StringResource(key: "common_display_text_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AED
      static let custom_view_display_text_amount_view = Rswift.StringResource(key: "custom_view_display_text_amount_view", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AED
      static let screen_household_currency_title = Rswift.StringResource(key: "screen_household_currency_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AED Balance
      static let screen_transaction_filter_display_text_balance = Rswift.StringResource(key: "screen_transaction_filter_display_text_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ATM and cash deposit
      static let screen_menu_display_text_locate_atm_cd = Rswift.StringResource(key: "screen_menu_display_text_locate_atm_cd", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ATM withdrawal
      static let screen_card_limits_display_text_atm_title = Rswift.StringResource(key: "screen_card_limits_display_text_atm_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ATM withdrawals
      static let screen_notification_settings_display_text_setting_atm_withdrawl = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_atm_withdrawl", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About us
      static let screen_user_profile_display_text_about_us = Rswift.StringResource(key: "screen_user_profile_display_text_about_us", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Accept
      static let screen_household_welcome_accept_button_title = Rswift.StringResource(key: "screen_household_welcome_accept_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account
      static let common_display_text_account = Rswift.StringResource(key: "common_display_text_account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account
      static let screen_menu_display_text_account = Rswift.StringResource(key: "screen_menu_display_text_account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account
      static let screen_more_bank_details_display_text_account = Rswift.StringResource(key: "screen_more_bank_details_display_text_account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account activation pending
      static let common_display_text_account_activation = Rswift.StringResource(key: "common_display_text_account_activation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account details
      static let screen_more_home_display_text_your_bank_details = Rswift.StringResource(key: "screen_more_home_display_text_your_bank_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account number
      static let screen_add_beneficiary_detail_display_text_iban = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account number
      static let screen_beneficiary_overview_display_text_account_number_iban = Rswift.StringResource(key: "screen_beneficiary_overview_display_text_account_number_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add
      static let common_button_add = Rswift.StringResource(key: "common_button_add", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add
      static let screen_add_funds_button_add = Rswift.StringResource(key: "screen_add_funds_button_add", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a new card
      static let screen_household_card_screen_add_new_card_title = Rswift.StringResource(key: "screen_household_card_screen_add_new_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a new card
      static let screen_topup_card_selection_display_text_add_new_card = Rswift.StringResource(key: "screen_topup_card_selection_display_text_add_new_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a note
      static let screen_transaction_details_display_text_add_note = Rswift.StringResource(key: "screen_transaction_details_display_text_add_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a receipt
      static let screen_transaction_details_display_text_add_receipt = Rswift.StringResource(key: "screen_transaction_details_display_text_add_receipt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a remark (optional)
      static let screen_international_funds_transfer_input_text_note_hint = Rswift.StringResource(key: "screen_international_funds_transfer_input_text_note_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a remark (optional)
      static let screen_y2y_funds_transfer_display_text_note_placeholder = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_note_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a spare card
      static let screen_add_spare_card_display_text_title = Rswift.StringResource(key: "screen_add_spare_card_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a virtual card instantly
      static let screen_add_card_display_text_feature_spare_card_add_instantly = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_add_instantly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a virtual spare card
      static let screen_add_card_display_text_title_spare_card = Rswift.StringResource(key: "screen_add_card_display_text_title_spare_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add another receipt
      static let screen_add_receipt_success_add_another_text = Rswift.StringResource(key: "screen_add_receipt_success_add_another_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add beneficiary
      static let screen_add_beneficiary_display_text_title = Rswift.StringResource(key: "screen_add_beneficiary_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add card
      static let screen_cards_display_text_add_card = Rswift.StringResource(key: "screen_cards_display_text_add_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add card
      static let screen_cards_home_tour_guide_add_card_title = Rswift.StringResource(key: "screen_cards_home_tour_guide_add_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add card
      static let screen_topup_card_selection_display_text_add_card = Rswift.StringResource(key: "screen_topup_card_selection_display_text_add_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add card name
      static let screen_change_card_name_display_text_title = Rswift.StringResource(key: "screen_change_card_name_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add first name
      static let screen_add_beneficiary_detail_input_text_first_name_hint = Rswift.StringResource(key: "screen_add_beneficiary_detail_input_text_first_name_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add funds
      static let screen_add_funds_display_text_add_funds = Rswift.StringResource(key: "screen_add_funds_display_text_add_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add funds
      static let screen_card_detail_button_add_funds = Rswift.StringResource(key: "screen_card_detail_button_add_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add last name
      static let screen_add_beneficiary_detail_input_text_last_name_hint = Rswift.StringResource(key: "screen_add_beneficiary_detail_input_text_last_name_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add money
      static let screen_yap_it_button_add_money = Rswift.StringResource(key: "screen_yap_it_button_add_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add money to your YAP card to start spending
      static let view_payment_card_onboarding_stage_four_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_four_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add money to your account
      static let screen_yfy_get_started_text_add_money = Rswift.StringResource(key: "screen_yfy_get_started_text_add_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add money using a card
      static let screen_topup_card_selection_display_text_title = Rswift.StringResource(key: "screen_topup_card_selection_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add money using a card
      static let screen_topup_transfer_display_text_screen_title = Rswift.StringResource(key: "screen_topup_transfer_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add new delivery address
      static let screen_add_spare_card_update_location_display_text_heading = Rswift.StringResource(key: "screen_add_spare_card_update_location_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add nickname
      static let screen_add_beneficiary_detail_input_text_nick_name_hint = Rswift.StringResource(key: "screen_add_beneficiary_detail_input_text_nick_name_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add now
      static let screen_send_money_no_contacts_button_title_add_now = Rswift.StringResource(key: "screen_send_money_no_contacts_button_title_add_now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add or remove funds as you need
      static let screen_add_card_display_text_feature_spare_card_funds = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add or upgrade
      static let screen_cards_display_text_add_upgrade_card = Rswift.StringResource(key: "screen_cards_display_text_add_upgrade_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Additional requirements
      static let view_payment_card_onboarding_stage_additional_requirement_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_additional_requirement_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address
      static let screen_meeting_location_input_text_address_title = Rswift.StringResource(key: "screen_meeting_location_input_text_address_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address
      static let screen_more_bank_details_display_text_address = Rswift.StringResource(key: "screen_more_bank_details_display_text_address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address
      static let screen_personal_details_display_text_address = Rswift.StringResource(key: "screen_personal_details_display_text_address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Alerts and notifications
      static let screen_menu_display_text_alert_and_notifications = Rswift.StringResource(key: "screen_menu_display_text_alert_and_notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All
      static let screen_notification_settings_display_text_setting_all = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_all", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All beneficiaries
      static let screen_send_money_display_text_all_beneficiaries = Rswift.StringResource(key: "screen_send_money_display_text_all_beneficiaries", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All contacts
      static let screen_y2y_display_button_all_contacts = Rswift.StringResource(key: "screen_y2y_display_button_all_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allocate household budgets
      static let screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow your card to be used at retail outlets. This includes restaurants, petrol stations and hospitality venues
      static let screen_card_limits_display_text_retail_payment_desc = Rswift.StringResource(key: "screen_card_limits_display_text_retail_payment_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow your card to be used for payments outside your current country
      static let screen_card_limits_display_text_payment_abroad_desc = Rswift.StringResource(key: "screen_card_limits_display_text_payment_abroad_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow your card to be used for purchases made over the internet
      static let screen_card_limits_display_text_online_transaction_desc = Rswift.StringResource(key: "screen_card_limits_display_text_online_transaction_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow your card to withdraw from cash machines
      static let screen_card_limits_display_text_atm_desc = Rswift.StringResource(key: "screen_card_limits_display_text_atm_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Almost there!
      static let screen_b2c_eid_info_review_display_text_title = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Already have an account? Sign in
      static let screen_home_display_text_sign_in = Rswift.StringResource(key: "screen_home_display_text_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Always remember this code and don't share it with anyone
      static let screen_household_pin_setup_success_sub_heading = Rswift.StringResource(key: "screen_household_pin_setup_success_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount to transfer
      static let screen_household_amount_to_transfer_title = Rswift.StringResource(key: "screen_household_amount_to_transfer_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: An %@ fee will be charged to your YAP account for this transfer
      static let screen_cash_pickup_funds_display_text_fee = Rswift.StringResource(key: "screen_cash_pickup_funds_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Analytics
      static let screen_card_analytics_display_text_title = Rswift.StringResource(key: "screen_card_analytics_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Analytics
      static let screen_household_card_analytics_screen_Analytics_button_title = Rswift.StringResource(key: "screen_household_card_analytics_screen_Analytics_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Analytics
      static let screen_menu_display_text_analytics = Rswift.StringResource(key: "screen_menu_display_text_analytics", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: And while that's great, this YAP account is only for adults. Don't worry though, you can speak to your parents about getting you started with YAP Young or wait till you're %d :)
      static let screen_kyc_information_error_display_text_explanation_under_age = Rswift.StringResource(key: "screen_kyc_information_error_display_text_explanation_under_age", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: App notifications
      static let screen_user_profile_display_text_app_notifications = Rswift.StringResource(key: "screen_user_profile_display_text_app_notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Apply filters
      static let screen_transaction_filter_button_apply_filter = Rswift.StringResource(key: "screen_transaction_filter_button_apply_filter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to cancel this subscription?
      static let screen_household_cancel_subscription_cancel_title = Rswift.StringResource(key: "screen_household_cancel_subscription_cancel_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to exit?
      static let screen_add_beneficiary_detail_display_text_cancel_popup_title = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_cancel_popup_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to log out
      static let screen_profile_action_display_text_logout_popups_message = Rswift.StringResource(key: "screen_profile_action_display_text_logout_popups_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Automatic renewal
      static let screen_household_renewable_title = Rswift.StringResource(key: "screen_household_renewable_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Awesome!
      static let screen_email_address_success_display_text_heading = Rswift.StringResource(key: "screen_email_address_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Awesome! We’re as excited as you are. We’ll send you an SMS as soon as we’ve launched!
      static let screen_waiting_list_dispaly_text_awsome_alert = Rswift.StringResource(key: "screen_waiting_list_dispaly_text_awsome_alert", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back to card
      static let screen_success_funds_transaction_display_text_button = Rswift.StringResource(key: "screen_success_funds_transaction_display_text_button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back to dashboard
      static let screen_cash_pickup_funds_transfer_back_to_dashboard = Rswift.StringResource(key: "screen_cash_pickup_funds_transfer_back_to_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back to dashboard
      static let screen_international_funds_transfer_back_to_dashboard = Rswift.StringResource(key: "screen_international_funds_transfer_back_to_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back to dashboard
      static let screen_unverified_display_button_back_to_dashboard = Rswift.StringResource(key: "screen_unverified_display_button_back_to_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank
      static let screen_more_bank_details_display_text_bank = Rswift.StringResource(key: "screen_more_bank_details_display_text_bank", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank branch
      static let screen_bank_details_display_text_branch_name = Rswift.StringResource(key: "screen_bank_details_display_text_branch_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank city
      static let screen_bank_details_display_text_bank_city = Rswift.StringResource(key: "screen_bank_details_display_text_bank_city", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank name
      static let screen_bank_details_display_text_bank_name = Rswift.StringResource(key: "screen_bank_details_display_text_bank_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank transfer
      static let screen_add_beneficiary_display_text_transfer_type_bank = Rswift.StringResource(key: "screen_add_beneficiary_display_text_transfer_type_bank", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank transfer
      static let screen_topup_type_selection_button_bank_transfer = Rswift.StringResource(key: "screen_topup_type_selection_button_bank_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank transfer successful!
      static let screen_domestic_funds_transfer_display_text_title = Rswift.StringResource(key: "screen_domestic_funds_transfer_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank transfer successful!
      static let screen_international_funds_transfer_display_text_title_success = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_title_success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank your way and become a YAP pro
      static let screen_more_home_display_text_bank_your_way = Rswift.StringResource(key: "screen_more_home_display_text_bank_your_way", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bank your way and become a YAP pro
      static let screen_more_home_display_text_yap_for_you_description = Rswift.StringResource(key: "screen_more_home_display_text_yap_for_you_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Begin using your YAP card by topping up your card with AED 50 or more
      static let screen_set_card_pin_success_display_text_description = Rswift.StringResource(key: "screen_set_card_pin_success_display_text_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Beneficiary account details
      static let screen_beneficiary_account_details_display_text_title = Rswift.StringResource(key: "screen_beneficiary_account_details_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Beneficiary has been added successfully
      static let screen_add_beneficiary_detail_display_text_alert_title = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Beneficiary overview
      static let screen_beneficiary_overview_display_text_title = Rswift.StringResource(key: "screen_beneficiary_overview_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Better together
      static let screen_yfy_home_screen_better_togather_title = Rswift.StringResource(key: "screen_yfy_home_screen_better_togather_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Black Metal Card
      static let commone_disply_text_card_name_metal_black = Rswift.StringResource(key: "commone_disply_text_card_name_metal_black", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Black Premium Card
      static let commone_disply_text_card_name_premium_black = Rswift.StringResource(key: "commone_disply_text_card_name_premium_black", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Block and report
      static let screen_report_card_button_block_report = Rswift.StringResource(key: "screen_report_card_button_block_report", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Block card permanently
      static let screen_report_card_display_text_block_alert_title = Rswift.StringResource(key: "screen_report_card_display_text_block_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Boost yourself up the queue by %@ for every friend you refer that signs up.🚀
      static let screen_waiting_list_rank_bump_me_up_info_text_bottom = Rswift.StringResource(key: "screen_waiting_list_rank_bump_me_up_info_text_bottom", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Branch name
      static let screen_bank_details_input_text_branch_hint = Rswift.StringResource(key: "screen_bank_details_input_text_branch_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Building
      static let common_delivery_status_building = Rswift.StringResource(key: "common_delivery_status_building", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Built
      static let common_delivery_status_built = Rswift.StringResource(key: "common_delivery_status_built", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Built-in analytics at your fingertips
      static let screen_welcome_b2c_display_text_page3_details = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page3_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bump me up the queue
      static let screen_waiting_list_rank_bump_me_up_text = Rswift.StringResource(key: "screen_waiting_list_rank_bump_me_up_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Business
      static let screen_home_button_business = Rswift.StringResource(key: "screen_home_button_business", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Business
      static let screen_menu_display_text_business = Rswift.StringResource(key: "screen_menu_display_text_business", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By clicking “Use %@” you agree to our
      static let screen_system_permission_text_title_terms_and_conditions = Rswift.StringResource(key: "screen_system_permission_text_title_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By creating a PIN you agree to our Terms & Conditions
      static let screen_confirm_card_pin_display_text_terms_and_conditions = Rswift.StringResource(key: "screen_confirm_card_pin_display_text_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By creating a passcode you agree to our Terms & Conditions
      static let screen_create_passcode_display_text_terms_and_conditions = Rswift.StringResource(key: "screen_create_passcode_display_text_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CRS and FATCA Terms and Conditions
      static let screen_meeting_location_text_terms_and_conditions = Rswift.StringResource(key: "screen_meeting_location_text_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let common_button_cancel = Rswift.StringResource(key: "common_button_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let screen_profile_action_display_text_logout_popups_cencel = Rswift.StringResource(key: "screen_profile_action_display_text_logout_popups_cencel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel subscription
      static let screen_household_cancel_subscription_title = Rswift.StringResource(key: "screen_household_cancel_subscription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancellation will come into effect following the 12-month contract period
      static let screen_household_cancel_subscription_cancel_message = Rswift.StringResource(key: "screen_household_cancel_subscription_cancel_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card
      static let screen_topup_card_details_display_text_placeholder_card_number = Rswift.StringResource(key: "screen_topup_card_details_display_text_placeholder_card_number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card
      static let screen_topup_type_selection_button_card = Rswift.StringResource(key: "screen_topup_type_selection_button_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card balance
      static let screen_card_detail_display_text_card_balance = Rswift.StringResource(key: "screen_card_detail_display_text_card_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card details
      static let screen_payment_card_detail_button_card_details = Rswift.StringResource(key: "screen_payment_card_detail_button_card_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card details
      static let screen_topup_card_details_display_text_title = Rswift.StringResource(key: "screen_topup_card_details_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card fee
      static let screen_add_spare_card_display_text_card_fee = Rswift.StringResource(key: "screen_add_spare_card_display_text_card_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card holder's profile
      static let screen_household_cardholder_profile_title = Rswift.StringResource(key: "screen_household_cardholder_profile_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card nickname
      static let screen_topup_card_details_display_text_placeholder_card_nickname = Rswift.StringResource(key: "screen_topup_card_details_display_text_placeholder_card_nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card removed successfully.
      static let screen_topup_card_details_button_remove_card_message = Rswift.StringResource(key: "screen_topup_card_details_button_remove_card_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card statements
      static let screen_card_statements_display_text_title = Rswift.StringResource(key: "screen_card_statements_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Card successfully removed!
      static let screen_cards_display_text_card_removed_success = Rswift.StringResource(key: "screen_cards_display_text_card_removed_success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cards
      static let screen_household_card_analytics_screen_card_button_title = Rswift.StringResource(key: "screen_household_card_analytics_screen_card_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cash pickup
      static let screen_add_beneficiary_display_text_transfer_type_cash_pickup = Rswift.StringResource(key: "screen_add_beneficiary_display_text_transfer_type_cash_pickup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cash transfer successful
      static let screen_cash_funds_transfer_display_text_title = Rswift.StringResource(key: "screen_cash_funds_transfer_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cash transfer successful!
      static let screen_cash_pickup_funds_transfer_display_text_title = Rswift.StringResource(key: "screen_cash_pickup_funds_transfer_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Category
      static let screen_card_analytics_display_text_category = Rswift.StringResource(key: "screen_card_analytics_display_text_category", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change
      static let common_button_change = Rswift.StringResource(key: "common_button_change", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change PIN
      static let screen_card_detail_button_change_pin = Rswift.StringResource(key: "screen_card_detail_button_change_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change PIN
      static let screen_change_pin_display_text_heading = Rswift.StringResource(key: "screen_change_pin_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change card's name
      static let screen_card_detail_button_change_card_name = Rswift.StringResource(key: "screen_card_detail_button_change_card_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change currency
      static let screen_add_beneficiary_detail_display_text_change_currency = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_change_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change email
      static let screen_change_email_display_text_heading = Rswift.StringResource(key: "screen_change_email_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change location
      static let screen_add_spare_card_button_change_location = Rswift.StringResource(key: "screen_add_spare_card_button_change_location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change mobile number
      static let screen_change_phone_number_display_text_heading = Rswift.StringResource(key: "screen_change_phone_number_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change paln
      static let screen_yap_house_hold_confirm_payment_display_text_change_plan = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_change_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Check back later to see the category updated
      static let screen_transaction_details_display_text_wait_for_category_to_update = Rswift.StringResource(key: "screen_transaction_details_display_text_wait_for_category_to_update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose a unique colour and give it a nickname
      static let screen_add_card_display_text_feature_spare_card_nick_name_title = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_nick_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose a virtual or physical card
      static let screen_add_card_display_text_feature_spare_card_virtual_or_physical_title = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_virtual_or_physical_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose email app
      static let screen_mail_action_sheet_display_text_title = Rswift.StringResource(key: "screen_mail_action_sheet_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose photo
      static let screen_user_profile_display_text_choose_photo = Rswift.StringResource(key: "screen_user_profile_display_text_choose_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose which card you want to top up with
      static let screen_topup_card_selection_display_text_sub_heading_cards = Rswift.StringResource(key: "screen_topup_card_selection_display_text_sub_heading_cards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose your location below. We will also call you to verify this address.
      static let screen_meeting_location_display_text_subtitle = Rswift.StringResource(key: "screen_meeting_location_display_text_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: City
      static let screen_bank_details_input_text_city_hint = Rswift.StringResource(key: "screen_bank_details_input_text_city_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Clear filters
      static let screen_transaction_filter_button_clear_filter = Rswift.StringResource(key: "screen_transaction_filter_button_clear_filter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click 'block and report' to confirm that your card has been lost, damaged or stolen. We will immediately block your card and report it to our security team.
      static let screen_report_card_display_text_block_note = Rswift.StringResource(key: "screen_report_card_display_text_block_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click here
      static let screen_email_verified_popup_button_title_click_here = Rswift.StringResource(key: "screen_email_verified_popup_button_title_click_here", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click here if you’d like to change your email address 
      static let screen_email_verified_popup_display_text_click_here = Rswift.StringResource(key: "screen_email_verified_popup_display_text_click_here", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click here to add a name to your card, view statements or remove it from your account. 
      static let screen_primary_card_detail_tour_guide_more_icon_description = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_more_icon_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click here to add a new card to your account. You can create a spare virtual card or upgrade to Prime or Metal! 
      static let screen_cards_home_tour_guide_add_card_description = Rswift.StringResource(key: "screen_cards_home_tour_guide_add_card_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Click here to search for specific transactions in your account history.
      static let screen_home_display_tour_guide_text_desc_search = Rswift.StringResource(key: "screen_home_display_tour_guide_text_desc_search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let screen_waiting_list_dispaly_text_close = Rswift.StringResource(key: "screen_waiting_list_dispaly_text_close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Coming soon
      static let commn_display_text_comming_soon = Rswift.StringResource(key: "commn_display_text_comming_soon", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Company name
      static let screen_company_name_display_text_company_name = Rswift.StringResource(key: "screen_company_name_display_text_company_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Complete a renewal
      static let screen_yfy_you_are_pro_text_complete_a_renewal = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_complete_a_renewal", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Complete verification
      static let screen_b2c_kyc_home_display_text_screen_title = Rswift.StringResource(key: "screen_b2c_kyc_home_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Complete verification
      static let screen_household_welcome_complete_verification_button_title = Rswift.StringResource(key: "screen_household_welcome_complete_verification_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Complete verification
      static let screen_lite_dashboard_button_complete_verification = Rswift.StringResource(key: "screen_lite_dashboard_button_complete_verification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Complete verification
      static let screen_onboarding_congratulations_button_complete_verification = Rswift.StringResource(key: "screen_onboarding_congratulations_button_complete_verification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Completed
      static let view_payment_card_onboarding_stage_completed_label_text = Rswift.StringResource(key: "view_payment_card_onboarding_stage_completed_label_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let common_button_confirm = Rswift.StringResource(key: "common_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let screen_b2c_eid_info_review_button_title_confirm = Rswift.StringResource(key: "screen_b2c_eid_info_review_button_title_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm IBAN
      static let screen_sdd_beneficiary_display_confirm_iban = Rswift.StringResource(key: "screen_sdd_beneficiary_display_confirm_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm PIN
      static let screen_confirm_card_pin_display_button_confirm_pin = Rswift.StringResource(key: "screen_confirm_card_pin_display_button_confirm_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm email address
      static let screen_change_email_placeholder_confirm_email_address = Rswift.StringResource(key: "screen_change_email_placeholder_confirm_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm location
      static let screen_add_spare_card_button_confirm_location = Rswift.StringResource(key: "screen_add_spare_card_button_confirm_location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm location
      static let screen_meeting_location_button_confirm_selected_location = Rswift.StringResource(key: "screen_meeting_location_button_confirm_selected_location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm mobile number
      static let screen_yap_house_hold_user_info_contact_display_text_confirm_mobile = Rswift.StringResource(key: "screen_yap_house_hold_user_info_contact_display_text_confirm_mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm payment
      static let screen_yap_house_hold_confirm_payment_display_text_toolbar_title = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_toolbar_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm purchase
      static let screen_add_spare_card_button_confirm_purchase = Rswift.StringResource(key: "screen_add_spare_card_button_confirm_purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm transfer
      static let screen_send_money_otp_display_text_title = Rswift.StringResource(key: "screen_send_money_otp_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congrats! You were bumped up by %@ spots! Keep on referring to get to the top faster! 
      static let screen_waiting_list_rank_bumped_notification_text = Rswift.StringResource(key: "screen_waiting_list_rank_bumped_notification_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congrats, %@!
      static let screen_onboarding_congratulations_display_text_title = Rswift.StringResource(key: "screen_onboarding_congratulations_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contact us
      static let screen_menu_display_text_contact_us = Rswift.StringResource(key: "screen_menu_display_text_contact_us", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue
      static let screen_household_pin_setup_continue_button_title = Rswift.StringResource(key: "screen_household_pin_setup_continue_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy
      static let common_display_text_copy = Rswift.StringResource(key: "common_display_text_copy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy
      static let screen_menu_display_text_copy = Rswift.StringResource(key: "screen_menu_display_text_copy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Country
      static let screen_add_beneficiary_detail_display_text_country = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_country", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Country of residence
      static let screen_add_beneficiary_display_text_select_country_residence_review = Rswift.StringResource(key: "screen_add_beneficiary_display_text_select_country_residence_review", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create PIN
      static let screen_create_card_pin_display_button_create_pin = Rswift.StringResource(key: "screen_create_card_pin_display_button_create_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create PIN
      static let screen_set_card_pin_welcome_button_create_pin = Rswift.StringResource(key: "screen_set_card_pin_welcome_button_create_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create PIN code
      static let screen_household_pin_setup_set_pin_button_title = Rswift.StringResource(key: "screen_household_pin_setup_set_pin_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create a 4-digit PIN code to access your new card
      static let screen_household_pin_setup_heading = Rswift.StringResource(key: "screen_household_pin_setup_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create a PIN to start using your card
      static let screen_cards_button_set_pin_to_activate = Rswift.StringResource(key: "screen_cards_button_set_pin_to_activate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create a new 4- to 6-digit passcode​
      static let screen_create_passcode_display_text_title = Rswift.StringResource(key: "screen_create_passcode_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create new PIN
      static let screen_change_pin_action_button_title = Rswift.StringResource(key: "screen_change_pin_action_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create passcode
      static let screen_create_passcode_button_create_passcode = Rswift.StringResource(key: "screen_create_passcode_button_create_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create your 4-digit PIN
      static let screen_set_card_pin_display_text_title = Rswift.StringResource(key: "screen_set_card_pin_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency
      static let screen_add_beneficiary_detail_display_text_currency = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current account with no hidden fees
      static let screen_welcome_b2c_display_text_page1_details = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page1_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current achievement
      static let screen_yap_4_you_home_display_text_current_achievement = Rswift.StringResource(key: "screen_yap_4_you_home_display_text_current_achievement", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current future payment set
      static let screen_household_future_payment_edit_cell_title = Rswift.StringResource(key: "screen_household_future_payment_edit_cell_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current recurring salary
      static let screen_household_current_recurring_salary_title = Rswift.StringResource(key: "screen_household_current_recurring_salary_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Customize your card’s usage by setting limits on where and how it can be used.
      static let screen_primary_card_detail_tour_guide_set_limit_description = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_set_limit_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Daily
      static let screen_household_daily_title = Rswift.StringResource(key: "screen_household_daily_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Daily transaction graph
      static let screen_home_display_tour_guide_text_title_graph = Rswift.StringResource(key: "screen_home_display_tour_guide_text_title_graph", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Damaged card
      static let screen_report_card_button_damage_card = Rswift.StringResource(key: "screen_report_card_button_damage_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date of birth
      static let screen_b2c_eid_info_review_display_text_dob_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_dob_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date of transfer 
      static let screen_household_future_payment_edit_date = Rswift.StringResource(key: "screen_household_future_payment_edit_date", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Debit card
      static let screen_add_card_display_text_debit_card = Rswift.StringResource(key: "screen_add_card_display_text_debit_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Decline request
      static let screen_household_welcome_decline_button_title = Rswift.StringResource(key: "screen_household_welcome_decline_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let screen_notifications_display_text_delete = Rswift.StringResource(key: "screen_notifications_display_text_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let screen_send_money_display_text_delete = Rswift.StringResource(key: "screen_send_money_display_text_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete notification
      static let screen_notification_details_button_delete = Rswift.StringResource(key: "screen_notification_details_button_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do it later
      static let screen_set_card_pin_success_button_create_pin_later = Rswift.StringResource(key: "screen_set_card_pin_success_button_create_pin_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do you want to order a new card?
      static let screen_card_blocked_display_text_subheading = Rswift.StringResource(key: "screen_card_blocked_display_text_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let common_button_done = Rswift.StringResource(key: "common_button_done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let screen_add_receipt_success_done_text = Rswift.StringResource(key: "screen_add_receipt_success_done_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let screen_household_card_pin_success_button_title = Rswift.StringResource(key: "screen_household_card_pin_success_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Due to all the excitement of our official launch, we are gradually activating as many accounts as possible to keep the app running smoothly. In the meantime, until your account is ready to be fully activated you’ll be placed in a queue.
      static let screen_onboarding_congratulations_waiting_user_display_text_meeting_note = Rswift.StringResource(key: "screen_onboarding_congratulations_waiting_user_display_text_meeting_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EID scan will be carried out by the agent
      static let view_payment_card_onboarding_stage_two_initial_subtitle = Rswift.StringResource(key: "view_payment_card_onboarding_stage_two_initial_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let common_button_edit = Rswift.StringResource(key: "common_button_edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let screen_household_edit_title = Rswift.StringResource(key: "screen_household_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let screen_send_money_display_text_edit = Rswift.StringResource(key: "screen_send_money_display_text_edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit beneficiary
      static let screen_edit_beneficiary_display_text_title = Rswift.StringResource(key: "screen_edit_beneficiary_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let screen_personal_details_display_text_email = Rswift.StringResource(key: "screen_personal_details_display_text_email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email address
      static let screen_change_email_placeholder_email_address = Rswift.StringResource(key: "screen_change_email_placeholder_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email address
      static let screen_enter_email_display_text_email_address = Rswift.StringResource(key: "screen_enter_email_display_text_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email address or phone number
      static let screen_sign_in_input_text_email_hint = Rswift.StringResource(key: "screen_sign_in_input_text_email_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email notifications
      static let screen_notification_settings_display_text_header_email = Rswift.StringResource(key: "screen_notification_settings_display_text_header_email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emirate
      static let screen_meeting_location_input_text_emirate_title = Rswift.StringResource(key: "screen_meeting_location_input_text_emirate_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emirates ID
      static let common_display_text_emirates_id = Rswift.StringResource(key: "common_display_text_emirates_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emirates ID
      static let screen_b2c_eid_info_review_display_text_emirates_id_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_emirates_id_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emirates ID
      static let screen_meeting_confirmation_display_text_emirates_id = Rswift.StringResource(key: "screen_meeting_confirmation_display_text_emirates_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emirates ID
      static let screen_personal_details_display_text_emirates_id = Rswift.StringResource(key: "screen_personal_details_display_text_emirates_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Employment Information
      static let screen_onboarding_employment_type_screen_heading_title = Rswift.StringResource(key: "screen_onboarding_employment_type_screen_heading_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter IBAN
      static let screen_beneficiary_account_details_display_text_iban = Rswift.StringResource(key: "screen_beneficiary_account_details_display_text_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter PIN code again
      static let screen_household_pin_setup_confirm_heading = Rswift.StringResource(key: "screen_household_pin_setup_confirm_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Passcode
      static let screen_verify_passcode_text_enter_passcode = Rswift.StringResource(key: "screen_verify_passcode_text_enter_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter a new PIN
      static let screen_create_card_pin_display_text_heading = Rswift.StringResource(key: "screen_create_card_pin_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter amount
      static let screen_iban_send_money_subheading = Rswift.StringResource(key: "screen_iban_send_money_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter amount to send
      static let screen_y2y_funds_transfer_display_text_title_qr_contact = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_title_qr_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter it one more time
      static let screen_change_email_display_text_confirm_email_title = Rswift.StringResource(key: "screen_change_email_display_text_confirm_email_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter it one more time
      static let screen_confirm_card_pin_display_text_heading = Rswift.StringResource(key: "screen_confirm_card_pin_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter it one more time​
      static let screen_change_pin_repeat_new_pin_text = Rswift.StringResource(key: "screen_change_pin_repeat_new_pin_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter landmark
      static let screen_meeting_location_input_text_landmark_hint = Rswift.StringResource(key: "screen_meeting_location_input_text_landmark_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter that one more time to confirm
      static let screen_confirm_card_pin_display_text_title = Rswift.StringResource(key: "screen_confirm_card_pin_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the CVV to top up your acccount with
      static let screen_topup_card_cvv_display_text_cvv = Rswift.StringResource(key: "screen_topup_card_cvv_display_text_cvv", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the OTP sent to your registered mobile number %@
      static let screen_add_beneificiary_otp_display_text_sub_heading = Rswift.StringResource(key: "screen_add_beneificiary_otp_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the OTP sent to your registered mobile number %@
      static let screen_add_funds_otp_display_text_sub_heading = Rswift.StringResource(key: "screen_add_funds_otp_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the OTP sent to your registered mobile number %@
      static let screen_forgot_passcode_otp_display_text_sub_heading = Rswift.StringResource(key: "screen_forgot_passcode_otp_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the OTP sent to your registered mobile number to complete login
      static let screen_device_registration_otp_display_text_message = Rswift.StringResource(key: "screen_device_registration_otp_display_text_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the amount to Add
      static let screen_add_funds_display_text_enter_amount = Rswift.StringResource(key: "screen_add_funds_display_text_enter_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the amount to remove
      static let screen_remove_funds_display_text_enter_amount = Rswift.StringResource(key: "screen_remove_funds_display_text_enter_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter the code sent to your mobile number to transfer 
      static let screen_send_money_otp_display_text_subheading = Rswift.StringResource(key: "screen_send_money_otp_display_text_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter transfer amount
      static let screen_household_pay_salary_screen_enter_transfer_amount_title = Rswift.StringResource(key: "screen_household_pay_salary_screen_enter_transfer_amount_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your address
      static let screen_meeting_location_input_text_address_hint = Rswift.StringResource(key: "screen_meeting_location_input_text_address_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your business email to begin
      static let screen_enter_email_b2b_display_text_sub_heading = Rswift.StringResource(key: "screen_enter_email_b2b_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your card details
      static let screen_add_topup_card_display_text_title = Rswift.StringResource(key: "screen_add_topup_card_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your current  PIN
      static let screen_current_card_pin_display_text_heading = Rswift.StringResource(key: "screen_current_card_pin_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your current PIN
      static let screen_household_card_pin_change_heading = Rswift.StringResource(key: "screen_household_card_pin_change_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your current PIN code
      static let screen_change_pin_enter_current_pin_text = Rswift.StringResource(key: "screen_change_pin_enter_current_pin_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your current passcode
      static let screen_current_passcode_display_text_heading = Rswift.StringResource(key: "screen_current_passcode_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your new PIN code
      static let screen_change_pin_enter_new_pin_text = Rswift.StringResource(key: "screen_change_pin_enter_new_pin_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your new email address
      static let screen_change_email_display_text_email_title = Rswift.StringResource(key: "screen_change_email_display_text_email_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your new number
      static let screen_change_phone_number_display_text_text_field_title = Rswift.StringResource(key: "screen_change_phone_number_display_text_text_field_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your new passcode
      static let screen_set_passcode_display_text_heading = Rswift.StringResource(key: "screen_set_passcode_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your passcode to access this account
      static let screen_verify_passcode_display_text_title = Rswift.StringResource(key: "screen_verify_passcode_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Equip your household help with a card of their own. Now you can send them salaries and household expenses directly into their card so you don’t always have to depend on cash.
      static let screen_yfy_yap_store_goal_two_description = Rswift.StringResource(key: "screen_yfy_yap_store_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Exclusive partner offers
      static let screen_add_card_display_text_feature_exclusive_partner_offers = Rswift.StringResource(key: "screen_add_card_display_text_feature_exclusive_partner_offers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Expenses
      static let screen_house_hold_salary_profile_expenses_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_expenses_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Expiry date
      static let screen_b2c_eid_info_review_display_text_expiry_date_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_expiry_date_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Expiry date
      static let screen_topup_card_details_display_text_placeholder_expiry = Rswift.StringResource(key: "screen_topup_card_details_display_text_placeholder_expiry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Expiry date: 
      static let screen_household_pin_setup_expiry = Rswift.StringResource(key: "screen_household_pin_setup_expiry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Explore card controls
      static let screen_yfy_up_and_running_text_explore_card_controls = Rswift.StringResource(key: "screen_yfy_up_and_running_text_explore_card_controls", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Face ID
      static let screen_light_dashboard_button_face_id = Rswift.StringResource(key: "screen_light_dashboard_button_face_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Face ID is the quickest way to access YAP. Make sure your Face ID is always on in your device settings
      static let screen_system_permission_text_details_face_id = Rswift.StringResource(key: "screen_system_permission_text_details_face_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Facebook
      static let screen_user_profile_display_text_facebook = Rswift.StringResource(key: "screen_user_profile_display_text_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Failed card transactions
      static let screen_notification_settings_display_text_setting_failed_transaction = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_failed_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee
      static let screen_transaction_details_display_text_fee = Rswift.StringResource(key: "screen_transaction_details_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee: %@
      static let screen_add_funds_display_text_fee = Rswift.StringResource(key: "screen_add_funds_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee: %@
      static let screen_remove_funds_display_text_fee = Rswift.StringResource(key: "screen_remove_funds_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee: %@
      static let screen_topup_transfer_display_text_transaction_fee = Rswift.StringResource(key: "screen_topup_transfer_display_text_transaction_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee: %@
      static let screen_y2y_funds_transfer_display_text_fee = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee: %@ Note that the recipient's bank may have its own charges.
      static let scren_send_money_funds_transfer_confirmation_display_text_fee = Rswift.StringResource(key: "scren_send_money_funds_transfer_confirmation_display_text_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Feeling generous? Send money to someone who isn't on your YAP contacts by adding them as a beneficiary in a few simple steps.  Use the YAP It button and choose either bank transfer or cash pickup, so you can send money to even those who don’t have a bank account!
      static let screen_yfy_better_together_goal_four_description = Rswift.StringResource(key: "screen_yfy_better_together_goal_four_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fees & pricing plans
      static let screen_user_profile_display_text_pricing_plans = Rswift.StringResource(key: "screen_user_profile_display_text_pricing_plans", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Female
      static let common_display_text_gender_female = Rswift.StringResource(key: "common_display_text_gender_female", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Filter
      static let screen_home_button_filter = Rswift.StringResource(key: "screen_home_button_filter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Filters
      static let screen_transaction_filter_display_text_title = Rswift.StringResource(key: "screen_transaction_filter_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Find bank
      static let screen_bank_details_button_find_bank = Rswift.StringResource(key: "screen_bank_details_button_find_bank", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let screen_add_beneficiary_detail_display_text_transfer_first_name = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_first_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let screen_b2c_eid_info_review_display_text_first_name_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_first_name_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let screen_name_display_text_first_name = Rswift.StringResource(key: "screen_name_display_text_first_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let screen_yap_house_hold_user_info_display_text_first_name = Rswift.StringResource(key: "screen_yap_house_hold_user_info_display_text_first_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Flat number/ Building name/ Landmark
      static let screen_meeting_location_input_text_landmark_title = Rswift.StringResource(key: "screen_meeting_location_input_text_landmark_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Follow us
      static let screen_user_profile_button_follow_us = Rswift.StringResource(key: "screen_user_profile_button_follow_us", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: For those people who still use cash, how much cash will you add to YAP per month?
      static let employment_info_questions_additional_info_for_cash_title = Rswift.StringResource(key: "employment_info_questions_additional_info_for_cash_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot PIN?
      static let screen_household_card_pin_change_text_forgot_password = Rswift.StringResource(key: "screen_household_card_pin_change_text_forgot_password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot passcode?
      static let screen_verify_passcode_text_forgot_password = Rswift.StringResource(key: "screen_verify_passcode_text_forgot_password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Free package subscription
      static let screen_add_card_display_text_feature_free_package_subscription = Rswift.StringResource(key: "screen_add_card_display_text_feature_free_package_subscription", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Freeze and unfreeze your card
      static let screen_yfy_up_and_running_text_freeze_unfreeze = Rswift.StringResource(key: "screen_yfy_up_and_running_text_freeze_unfreeze", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Freeze card
      static let screen_card_detail_button_freeze = Rswift.StringResource(key: "screen_card_detail_button_freeze", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Freeze card
      static let screen_primary_card_detail_tour_guide_free_card_title = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_free_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Freeze or unfreeze anytime
      static let screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Full name
      static let screen_personal_details_display_text_full_name = Rswift.StringResource(key: "screen_personal_details_display_text_full_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Future payment
      static let screen_household_future_payment_edit_title = Rswift.StringResource(key: "screen_household_future_payment_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GOLD
      static let account_subscription_gold = Rswift.StringResource(key: "account_subscription_gold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gender
      static let screen_b2c_eid_info_review_display_text_gender_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_gender_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get Started
      static let screen_household_welcome_getstarted_button_title = Rswift.StringResource(key: "screen_household_welcome_getstarted_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get YAP Young
      static let screen_yfy_you_are_pro_text_get_yap_young = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_get_yap_young", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get a Household card
      static let screen_yap_house_hold_onboarding_landing_button_text = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_button_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get a card for your household help and start managing your finances easily! 
      static let screen_yap_house_hold_subscription_selection_display_text_house_hold_heading = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_house_hold_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get direction
      static let screen_more_home_display_text_get_direction = Rswift.StringResource(key: "screen_more_home_display_text_get_direction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get quick access to useful links related to your profile, account details, analytics, support and contacting YAP.
      static let screen_home_display_tour_guide_text_desc_top_menue = Rswift.StringResource(key: "screen_home_display_tour_guide_text_desc_top_menue", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get started
      static let screen_welcome_button_get_started = Rswift.StringResource(key: "screen_welcome_button_get_started", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get started
      static let screen_yfy_home_screen_get_started_title = Rswift.StringResource(key: "screen_yfy_home_screen_get_started_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Give them the power to manage their salary and expenses
      static let screen_yap_house_hold_onboarding_landing_display_text_manage_expense = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_manage_expense", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Give us up to 48 hours for it to reach you
      static let view_payment_card_onboarding_stage_card_on_the_way_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_card_on_the_way_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Give your kids tasks that will help them earn money. Chores can be fun too!
      static let screen_yfy_yap_store_goal_three_description = Rswift.StringResource(key: "screen_yfy_yap_store_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gmail
      static let screen_mail_action_sheet_display_text_ms_outlook = Rswift.StringResource(key: "screen_mail_action_sheet_display_text_ms_outlook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go Metal
      static let screen_yfy_take_a_leap_text_go_metal = Rswift.StringResource(key: "screen_yfy_take_a_leap_text_go_metal", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go on and add some money to your account so you can start spending! You can do this by using your existing bank card, make a wire transfer to this account or deposit cash at the nearest machine.
      static let screen_yfy_get_started_goal_three_description = Rswift.StringResource(key: "screen_yfy_get_started_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to Household
      static let screen_yap_house_hold_success_button_text_goto_house_hold = Rswift.StringResource(key: "screen_yap_house_hold_success_button_text_goto_house_hold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let common_button_go_to_dashbaord = Rswift.StringResource(key: "common_button_go_to_dashbaord", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let common_button_go_to_dashboard = Rswift.StringResource(key: "common_button_go_to_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let screen_household_location_selection_success_button_dashboard = Rswift.StringResource(key: "screen_household_location_selection_success_button_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let screen_household_normal_payment_go_to_dashboard_text = Rswift.StringResource(key: "screen_household_normal_payment_go_to_dashboard_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let screen_meeting_confirmation_button_go_to_dashboard = Rswift.StringResource(key: "screen_meeting_confirmation_button_go_to_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let screen_topup_success_display_text_dashboard_action_button_title = Rswift.StringResource(key: "screen_topup_success_display_text_dashboard_action_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to dashboard
      static let screen_y2y_funds_transfer_success_button_back = Rswift.StringResource(key: "screen_y2y_funds_transfer_success_button_back", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gold Premium Card
      static let commone_disply_text_card_name_premium_gold = Rswift.StringResource(key: "commone_disply_text_card_name_premium_gold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Great!
      static let screen_email_verification_display_text_title = Rswift.StringResource(key: "screen_email_verification_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Great, you’ve successfully updated your PIN!
      static let screen_change_pin_success_display_text_heading = Rswift.StringResource(key: "screen_change_pin_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Grey Premium Card
      static let commone_disply_text_card_name_premium_grey = Rswift.StringResource(key: "commone_disply_text_card_name_premium_grey", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Having trouble finding your email? Don’t worry, you can request for a new one! Verifying your email helps us stay in touch and send you important updates.
      static let screen_email_verified_popup_display_text_sub_title = Rswift.StringResource(key: "screen_email_verified_popup_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Help and support
      static let screen_menu_display_text_help_and_support = Rswift.StringResource(key: "screen_menu_display_text_help_and_support", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Help and support
      static let screen_more_home_display_text_tile_help = Rswift.StringResource(key: "screen_more_home_display_text_tile_help", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Here's your IBAN
      static let screen_onboarding_congratulations_display_text_iban = Rswift.StringResource(key: "screen_onboarding_congratulations_display_text_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hey there, looks like you're under %d
      static let screen_b2c_eid_info_review_display_text_error_under_age = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_error_under_age", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hey! I just joined the UAE’s newest banking app – YAP. Transform the way you bank and reserve your place in the queue to be one of the first to join me in the banking revolution.  %@
      static let screen_waiting_list_rank_share_invite_text = Rswift.StringResource(key: "screen_waiting_list_rank_share_invite_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hey! I’ve started using the UAE’s newest banking app – YAP. Transform how you manage your money and join me in the banking revolution.  %@
      static let screen_invite_friend_cards__plan_display_text_share_url = Rswift.StringResource(key: "screen_invite_friend_cards_&_plan_display_text_share_url", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hi %@ would like to send you some money via YAP. Download the app now and join YAP’s fast growing community!  Download YAP here:  %@
      static let common_display_text_y2y_share = Rswift.StringResource(key: "common_display_text_y2y_share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hi %@, %@ has added you as their Household on YAP. Download YAP from the link below and login with these credentials:  Username: %@ Passcode:%@  Download on App Store: %@  Download on Play Store: %@
      static let screen_yap_house_hold_confirm_payment_share_text = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_share_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hi %@, it looks like you haven’t verified this email yet:
      static let screen_email_verified_popup_display_text_title = Rswift.StringResource(key: "screen_email_verified_popup_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hope you like your new card!
      static let screen_household_pin_setup_title = Rswift.StringResource(key: "screen_household_pin_setup_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household
      static let screen_household_card_analytics_screen_display_text_title = Rswift.StringResource(key: "screen_household_card_analytics_screen_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household
      static let screen_menu_display_text_household = Rswift.StringResource(key: "screen_menu_display_text_household", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household
      static let screen_yap_house_hold_onboarding_landing_display_text_title = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household card
      static let screen_household_card_selection_display_text_subheading = Rswift.StringResource(key: "screen_household_card_selection_display_text_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household card
      static let screen_yap_house_hold_success_display_text_house_hold_card = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_house_hold_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household salary
      static let screen_menu_display_text_household_salary = Rswift.StringResource(key: "screen_menu_display_text_household_salary", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Household transfers
      static let screen_transaction_filter_display_text_household_transactions = Rswift.StringResource(key: "screen_transaction_filter_display_text_household_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How about a recurring payment for %1s's salary so you don't have to manually transfer money every month? You can stop anytime.
      static let screen_household_normal_payment_recurring_text = Rswift.StringResource(key: "screen_household_normal_payment_recurring_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How do you want to top up?
      static let screen_topup_type_selection_display_text_heading = Rswift.StringResource(key: "screen_topup_type_selection_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How much would you like to add?
      static let screen_topup_transfer_display_text_amount_title = Rswift.StringResource(key: "screen_topup_transfer_display_text_amount_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I accept the
      static let screen_meeting_location_text_accept_terms = Rswift.StringResource(key: "screen_meeting_location_text_accept_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I want an account for
      static let screen_home_display_text_account_selection = Rswift.StringResource(key: "screen_home_display_text_account_selection", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I'll do it later
      static let screen_add_beneficiary_detail_display_button_block_alert_no = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_button_block_alert_no", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I'll do it later
      static let screen_iban_send_money_success_do_it_later_button = Rswift.StringResource(key: "screen_iban_send_money_success_do_it_later_button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I've started using YAP The Money App to manage my spending and I think you'll find it really useful.  %@
      static let screen_invite_friend_display_text_share_url = Rswift.StringResource(key: "screen_invite_friend_display_text_share_url", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: IBAN
      static let screen_more_bank_details_display_text_iban = Rswift.StringResource(key: "screen_more_bank_details_display_text_iban", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: If you feel this is a mistake please call us at %@
      static let screen_household_warning_display_text_support_number = Rswift.StringResource(key: "screen_household_warning_display_text_support_number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: If you suspect any malicious activity or need to provide us with any other essential information regarding your card's disappearance, please give our customer care center a call at %@
      static let screen_report_card_display_text_block_footnote = Rswift.StringResource(key: "screen_report_card_display_text_block_footnote", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Improve logo or location?
      static let screen_transaction_details_display_text_improve_attribute = Rswift.StringResource(key: "screen_transaction_details_display_text_improve_attribute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: In process
      static let view_payment_card_onboarding_stage_in_process_label_text = Rswift.StringResource(key: "view_payment_card_onboarding_stage_in_process_label_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: In-app notifications
      static let screen_notification_settings_display_text_header_in_app = Rswift.StringResource(key: "screen_notification_settings_display_text_header_in_app", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incoming transactions
      static let screen_transaction_filter_display_text_incoming_transactions = Rswift.StringResource(key: "screen_transaction_filter_display_text_incoming_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incoming transfers
      static let screen_notification_settings_display_text_setting_incoming_transfer = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_incoming_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Instagram
      static let screen_user_profile_display_text_instagram = Rswift.StringResource(key: "screen_user_profile_display_text_instagram", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Install
      static let common_button_install = Rswift.StringResource(key: "common_button_install", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: International transfer fee: %@ Note that the recipient's bank may have its own charges.
      static let screen_international_funds_transfer_display_text_fee_amount = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_fee_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite
      static let screen_y2y_display_button_invite = Rswift.StringResource(key: "screen_y2y_display_button_invite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite 10 friends to YAP
      static let screen_yfy_you_are_pro_text_invite_friends = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_invite_friends", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite a friend
      static let screen_more_home_display_text_tile_invite_friend = Rswift.StringResource(key: "screen_more_home_display_text_tile_invite_friend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite a friend
      static let screen_yfy_better_together_text_invite_friend = Rswift.StringResource(key: "screen_yfy_better_together_text_invite_friend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite contacts from your address book
      static let screen_y2y_display_text_invite_phone_contacts = Rswift.StringResource(key: "screen_y2y_display_text_invite_phone_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite now
      static let screen_y2y_display_button_invite_now = Rswift.StringResource(key: "screen_y2y_display_button_invite_now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Is this your address?
      static let screen_add_spare_card_display_text_address_confirmation = Rswift.StringResource(key: "screen_add_spare_card_display_text_address_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I’ll do it later
      static let screen_set_card_pin_welcome_button_create_pin_later = Rswift.StringResource(key: "screen_set_card_pin_welcome_button_create_pin_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Keep me posted!
      static let screen_waiting_list_dispaly_button_keep_me_posted = Rswift.StringResource(key: "screen_waiting_list_dispaly_button_keep_me_posted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Keep track of your spendings
      static let screen_transaction_details_display_text_add_receipt_description = Rswift.StringResource(key: "screen_transaction_details_display_text_add_receipt_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let screen_add_beneficiary_detail_display_text_transfer_last_name = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_last_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let screen_b2c_eid_info_review_display_text_last_name_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_last_name_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let screen_name_display_text_last_name = Rswift.StringResource(key: "screen_name_display_text_last_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let screen_yap_house_hold_user_info_display_text_last_name = Rswift.StringResource(key: "screen_yap_house_hold_user_info_display_text_last_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Launch the YAP it button to carry out important functions like sending money, adding funds to your account and paying bills.
      static let screen_home_display_tour_guide_text_desc_yap_it = Rswift.StringResource(key: "screen_home_display_tour_guide_text_desc_yap_it", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let %@ know by sharing the details below:
      static let screen_yap_house_hold_success_display_text_share_credentials = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_share_credentials", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let your help choose from any one of these breathtaking colors
      static let screen_yap_house_hold_onboarding_landing_display_text_choose_colour = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_choose_colour", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let's do it
      static let screen_cards_button_set_pin = Rswift.StringResource(key: "screen_cards_button_set_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let's get started
      static let screen_enter_email_b2b_display_text_title = Rswift.StringResource(key: "screen_enter_email_b2b_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let’s begin by confirming this is you and setting up your account!
      static let screen_household_welcome_title = Rswift.StringResource(key: "screen_household_welcome_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Light Dashboard
      static let screen_light_dashboard_display_text_heading_text = Rswift.StringResource(key: "screen_light_dashboard_display_text_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Like us
      static let screen_user_profile_button_facebook = Rswift.StringResource(key: "screen_user_profile_button_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Live chat
      static let screen_menu_display_text_live_chat = Rswift.StringResource(key: "screen_menu_display_text_live_chat", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Locate ATM and CDM
      static let screen_more_home_display_text_tile_locate_atm = Rswift.StringResource(key: "screen_more_home_display_text_tile_locate_atm", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log back in to see your rank in the queue
      static let screen_waiting_list_rank_log_back_in_text = Rswift.StringResource(key: "screen_waiting_list_rank_log_back_in_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log out
      static let screen_profile_action_display_text_logout_popups_logout = Rswift.StringResource(key: "screen_profile_action_display_text_logout_popups_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log out
      static let screen_profile_action_display_text_logout_popups_title = Rswift.StringResource(key: "screen_profile_action_display_text_logout_popups_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log out
      static let screen_user_profile_button_logout = Rswift.StringResource(key: "screen_user_profile_button_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let screen_light_dashboard_button_logout = Rswift.StringResource(key: "screen_light_dashboard_button_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout!
      static let screen_household_warning_button_title_logout = Rswift.StringResource(key: "screen_household_warning_button_title_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Look up friends
      static let screen_y2y_display_text_search = Rswift.StringResource(key: "screen_y2y_display_text_search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you don't have enough funds in your account. Top up now to continue with this purchase
      static let screen_add_spare_card_display_text_insufficient_balance = Rswift.StringResource(key: "screen_add_spare_card_display_text_insufficient_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you're from United States
      static let screen_b2c_eid_info_review_display_text_error_from_usa = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_error_from_usa", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you're from the United States
      static let screen_kyc_information_error_display_text_title_from_usa = Rswift.StringResource(key: "screen_kyc_information_error_display_text_title_from_usa", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you're offline. Please reconnect and refresh to continue using YAP.
      static let common_display_text_error_no_internet = Rswift.StringResource(key: "common_display_text_error_no_internet", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you're under %d!
      static let screen_kyc_information_error_display_text_title_under_age = Rswift.StringResource(key: "screen_kyc_information_error_display_text_title_under_age", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like your Emirates ID is expired
      static let screen_b2c_eid_info_review_display_text_error_expired_eid = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_error_expired_eid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like your ID has expired. Please re-scan a valid ID
      static let screen_b2c_eid_info_review_display_text_expired_eid_error = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_expired_eid_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Lost/Stolen card
      static let screen_report_card_button_lost_stolen_card = Rswift.StringResource(key: "screen_report_card_button_lost_stolen_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: METAL
      static let account_subscription_metal = Rswift.StringResource(key: "account_subscription_metal", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mail
      static let screen_mail_action_sheet_display_text_apple_mail = Rswift.StringResource(key: "screen_mail_action_sheet_display_text_apple_mail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make a Y2Y transfer
      static let screen_yfy_better_together_text_y2y_transfer = Rswift.StringResource(key: "screen_yfy_better_together_text_y2y_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make heads turn the next time you’re out using your YAP card.
      static let screen_yfy_up_and_running_goal_one_description = Rswift.StringResource(key: "screen_yfy_up_and_running_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make life easier by sending household salaries through YAP Household
      static let screen_yfy_yap_store_goal_four_description = Rswift.StringResource(key: "screen_yfy_yap_store_goal_four_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make online payments securely
      static let screen_add_card_display_text_feature_spare_card_online_payments = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_online_payments", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make recurring
      static let screen_household_employee_salary_recurring_heading_text = Rswift.StringResource(key: "screen_household_employee_salary_recurring_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make sure you have your Emirates ID at hand before we proceed
      static let screen_complete_verification_fss_info_text = Rswift.StringResource(key: "screen_complete_verification_fss_info_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make sure you have your original Emirates ID on you at the time of delivery as we’ll need to scan it
      static let screen_meeting_confirmation_display_text_guide = Rswift.StringResource(key: "screen_meeting_confirmation_display_text_guide", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make your next AED 100 purchase a YAP one. Don’t forget to buy yourself something nice!
      static let screen_yfy_up_and_running_goal_three_description = Rswift.StringResource(key: "screen_yfy_up_and_running_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make your next AED 1000 purchase a YAP one. Don’t forget to buy yourself something nice!
      static let screen_yfy_you_are_a_pro_goal_two_description = Rswift.StringResource(key: "screen_yfy_you_are_a_pro_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Male
      static let common_display_text_gender_male = Rswift.StringResource(key: "common_display_text_gender_male", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Manage your household salaries digitally
      static let screen_yap_house_hold_onboarding_landing_display_text_description = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Maybe later
      static let common_button_may_be_later = Rswift.StringResource(key: "common_button_may_be_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Merchant
      static let screen_card_analytics_display_text_merchant = Rswift.StringResource(key: "screen_card_analytics_display_text_merchant", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Microsoft Outlook
      static let screen_mail_action_sheet_display_text_gmail = Rswift.StringResource(key: "screen_mail_action_sheet_display_text_gmail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Middle name (If applicable)
      static let screen_b2c_eid_info_review_display_text_middle_name_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_middle_name_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mobile number
      static let screen_personal_details_display_text_phone_number = Rswift.StringResource(key: "screen_personal_details_display_text_phone_number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mobile number
      static let screen_yap_house_hold_success_display_text_share_email = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_share_email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Monthly
      static let screen_household_monthly_title = Rswift.StringResource(key: "screen_household_monthly_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Monthly
      static let screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Monthly average is %@
      static let screen_card_analytics_display_text_monthly_average = Rswift.StringResource(key: "screen_card_analytics_display_text_monthly_average", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: More icon
      static let screen_primary_card_detail_tour_guide_more_icon_title = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_more_icon_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Multi currency
      static let screen_menu_display_text_multi_currency = Rswift.StringResource(key: "screen_menu_display_text_multi_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My QR code
      static let screen_menu_display_text_qr_code = Rswift.StringResource(key: "screen_menu_display_text_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My YAP account details
      static let screen_more_bank_details_display_text_for_top_up_title = Rswift.StringResource(key: "screen_more_bank_details_display_text_for_top_up_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My profile
      static let screen_menu_display_text_my_profile = Rswift.StringResource(key: "screen_menu_display_text_my_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let screen_more_bank_details_display_text_name = Rswift.StringResource(key: "screen_more_bank_details_display_text_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nationality
      static let screen_b2c_eid_info_review_display_text_nationality_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_nationality_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New OTP has been generated successfully
      static let screen_verify_phone_number_display_text_resend_otp_success = Rswift.StringResource(key: "screen_verify_phone_number_display_text_resend_otp_success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New to YAP? Sign up now
      static let screen_sign_in_display_text_sign_up = Rswift.StringResource(key: "screen_sign_in_display_text_sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let common_button_next = Rswift.StringResource(key: "common_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_confirm_passcode_display_button_next = Rswift.StringResource(key: "screen_confirm_passcode_display_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_current_card_pin_display_button_next = Rswift.StringResource(key: "screen_current_card_pin_display_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_current_passcode_display_button_next = Rswift.StringResource(key: "screen_current_passcode_display_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_household_card_pin_change_button_title = Rswift.StringResource(key: "screen_household_card_pin_change_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_household_card_selectio_button_dashboard = Rswift.StringResource(key: "screen_household_card_selectio_button_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_set_card_pin_button_create_pin = Rswift.StringResource(key: "screen_set_card_pin_button_create_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let screen_set_passcode_display_button_next = Rswift.StringResource(key: "screen_set_passcode_display_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nickname
      static let screen_add_beneficiary_detail_display_text_transfer_nick_name = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_nick_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No access to Camera or Microphone. You can grant access to YAP from the Settings.
      static let screen_user_profile_display_text_audio_video_permission_error = Rswift.StringResource(key: "screen_user_profile_display_text_audio_video_permission_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No access to Camera. You can grant access to YAP from the Settings.
      static let screen_user_profile_display_text_video_permission_error = Rswift.StringResource(key: "screen_user_profile_display_text_video_permission_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No access to Microphone. You can grant access to YAP from the Settings.
      static let screen_user_profile_display_text_audio_permission_error = Rswift.StringResource(key: "screen_user_profile_display_text_audio_permission_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No access to Photos. You can grant access to YAP from the Settings.
      static let screen_user_profile_display_text_photo_permission_error = Rswift.StringResource(key: "screen_user_profile_display_text_photo_permission_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No cards are connected to this account yet
      static let screen_topup_card_selection_display_text_sub_heading_no_cards = Rswift.StringResource(key: "screen_topup_card_selection_display_text_sub_heading_no_cards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No results found.
      static let screen_home_display_text_nothing_to_report_search = Rswift.StringResource(key: "screen_home_display_text_nothing_to_report_search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I have a valid Emirates ID
      static let screen_b2c_eid_info_review_button_valid_emirates_id = Rswift.StringResource(key: "screen_b2c_eid_info_review_button_valid_emirates_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I'm fine
      static let screen_system_permission_text_denied = Rswift.StringResource(key: "screen_system_permission_text_denied", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I'm not from USA
      static let screen_b2c_eid_info_review_button_not_from_usa = Rswift.StringResource(key: "screen_b2c_eid_info_review_button_not_from_usa", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I'm over %d
      static let screen_b2c_eid_info_review_button_not_under_age = Rswift.StringResource(key: "screen_b2c_eid_info_review_button_not_under_age", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, do it later
      static let screen_add_topup_card_succes_button_later = Rswift.StringResource(key: "screen_add_topup_card_succes_button_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Note
      static let screen_transaction_details_display_text_note = Rswift.StringResource(key: "screen_transaction_details_display_text_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Note added 
      static let screen_transaction_details_display_text_edit_note = Rswift.StringResource(key: "screen_transaction_details_display_text_edit_note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let screen_menu_display_text_household_notification = Rswift.StringResource(key: "screen_menu_display_text_household_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let screen_more_home_display_text_tile_notification = Rswift.StringResource(key: "screen_more_home_display_text_tile_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let screen_notifications_display_text_title = Rswift.StringResource(key: "screen_notifications_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notificitons settings
      static let screen_notification_settings_display_text_title = Rswift.StringResource(key: "screen_notification_settings_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Now create a unique PIN to start using this card
      static let screen_set_card_pin_welcome_display_text_title = Rswift.StringResource(key: "screen_set_card_pin_welcome_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Now enter your new 4-digit PIN
      static let screen_household_card_new_pin_heading = Rswift.StringResource(key: "screen_household_card_new_pin_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Now, your primary card balance is  %@
      static let screen_success_funds_transaction_display_text_success_sub_heading = Rswift.StringResource(key: "screen_success_funds_transaction_display_text_success_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Now, your primary card balance is  %@
      static let screen_success_remove_funds_transaction_display_text_success_sub_heading = Rswift.StringResource(key: "screen_success_remove_funds_transaction_display_text_success_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let common_button_ok = Rswift.StringResource(key: "common_button_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK, got it!
      static let screen_store_display_tour_guide_button_title_purchase_package = Rswift.StringResource(key: "screen_store_display_tour_guide_button_title_purchase_package", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Once you've renewed or received your Emirates ID, re-scan it via our dashboard to continue opening your account with YAP.
      static let screen_kyc_information_error_display_text_explanation_expired_card = Rswift.StringResource(key: "screen_kyc_information_error_display_text_explanation_expired_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Once your referred friends sign up, you will see their names listed below and your place in the queue bumped up by %@ spots for each friend!
      static let screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text = Rswift.StringResource(key: "screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Once you’re set, head over to the top right menu on your dashboard (or via More on the bottom navigation menu) to start inviting your friends to join YAP.  The more the merrier!
      static let screen_yfy_better_together_goal_one_description = Rswift.StringResource(key: "screen_yfy_better_together_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: One time fee of %@
      static let screen_add_card_display_text_one_time_fee = Rswift.StringResource(key: "screen_add_card_display_text_one_time_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Online transactions
      static let screen_card_limits_display_text_online_transaction_title = Rswift.StringResource(key: "screen_card_limits_display_text_online_transaction_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oops!
      static let screen_household_warning_display_text_oops = Rswift.StringResource(key: "screen_household_warning_display_text_oops", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oops! That’s too big. Please try again with a file that’s under 25 MB
      static let error_document_validation_size_exceed = Rswift.StringResource(key: "error_document_validation_size_exceed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Mail App
      static let screen_email_verified_popup_button_button_title_take_me_to_email = Rswift.StringResource(key: "screen_email_verified_popup_button_button_title_take_me_to_email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open camera
      static let screen_user_profile_display_text_open_camera = Rswift.StringResource(key: "screen_user_profile_display_text_open_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open in Google Maps
      static let screen_more_home_display_text_open_google_maps = Rswift.StringResource(key: "screen_more_home_display_text_open_google_maps", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open in Maps
      static let screen_more_home_display_text_open_maps = Rswift.StringResource(key: "screen_more_home_display_text_open_maps", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open mail app
      static let common_button_open_mail_app = Rswift.StringResource(key: "common_button_open_mail_app", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open mail app
      static let screen_unverified_display_button_mail = Rswift.StringResource(key: "screen_unverified_display_button_mail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open your YAP account
      static let screen_yfy_get_started_text_open_account = Rswift.StringResource(key: "screen_yfy_get_started_text_open_account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Order a virtual card
      static let screen_yfy_take_a_leap_text_send_money = Rswift.StringResource(key: "screen_yfy_take_a_leap_text_send_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Order later
      static let screen_card_blocked_button_order_later = Rswift.StringResource(key: "screen_card_blocked_button_order_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ordered
      static let common_delivery_status_ordered = Rswift.StringResource(key: "common_delivery_status_ordered", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Our delivery agent will be in touch to confirm the delivery date and time. Please keep your Emirates ID at hand.
      static let screen_add_spare_card_completion_display_text_delivery_info = Rswift.StringResource(key: "screen_add_spare_card_completion_display_text_delivery_info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Outgoing transactions
      static let screen_transaction_filter_display_text_outgoing_transactions = Rswift.StringResource(key: "screen_transaction_filter_display_text_outgoing_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Outgoing transfers
      static let screen_notification_settings_display_text_setting_outgoing_transfer = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_outgoing_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN cannot be a straight sequence
      static let screen_set_card_pin_display_text_error_sequence = Rswift.StringResource(key: "screen_set_card_pin_display_text_error_sequence", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN cannot be of same digits
      static let screen_set_card_pin_display_text_error_same_digits = Rswift.StringResource(key: "screen_set_card_pin_display_text_error_same_digits", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN code saved!
      static let screen_household_pin_setup_success_heading = Rswift.StringResource(key: "screen_household_pin_setup_success_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PRIME
      static let account_subscription_prime = Rswift.StringResource(key: "account_subscription_prime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passcode
      static let screen_user_profile_display_text_passcode = Rswift.StringResource(key: "screen_user_profile_display_text_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passcode cannot be a straight sequence
      static let screen_create_passcode_display_text_error_sequence = Rswift.StringResource(key: "screen_create_passcode_display_text_error_sequence", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passcode cannot be of same digits
      static let screen_create_passcode_display_text_error_same_digits = Rswift.StringResource(key: "screen_create_passcode_display_text_error_same_digits", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pay bills
      static let screen_yap_it_button_pay_bills = Rswift.StringResource(key: "screen_yap_it_button_pay_bills", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pay salary now
      static let screen_household_employee_salary_pay_now_button_text = Rswift.StringResource(key: "screen_household_employee_salary_pay_now_button_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pay salary to %@
      static let screen_household_pay_salary_screen_display_text_title = Rswift.StringResource(key: "screen_household_pay_salary_screen_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pay your help using Household
      static let screen_yfy_you_are_pro_text_pay_your_help = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_pay_your_help", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Paying your household help is now easier than ever
      static let screen_yap_house_hold_onboarding_landing_display_text_heading = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Payment confirmation
      static let screen_household_payment_confirmation_tool_bar_text = Rswift.StringResource(key: "screen_household_payment_confirmation_tool_bar_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Payments abroad
      static let screen_card_limits_display_text_payment_abroad_title = Rswift.StringResource(key: "screen_card_limits_display_text_payment_abroad_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pending confirmation
      static let screen_b2c_eid_info_review_display_text_emirates_id_sub_heading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_emirates_id_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pending transactions
      static let screen_transaction_filter_display_text_pending_transactions = Rswift.StringResource(key: "screen_transaction_filter_display_text_pending_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Permission denied!
      static let common_display_text_permission_denied = Rswift.StringResource(key: "common_display_text_permission_denied", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal
      static let screen_home_button_personal = Rswift.StringResource(key: "screen_home_button_personal", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal details
      static let screen_personal_details_display_text_title = Rswift.StringResource(key: "screen_personal_details_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal details
      static let screen_user_profile_display_text_personal_details = Rswift.StringResource(key: "screen_user_profile_display_text_personal_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personalize your profile with a picture of you (or your pet)
      static let screen_yfy_get_started_goal_four_description = Rswift.StringResource(key: "screen_yfy_get_started_goal_four_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number
      static let screen_add_beneficiary_detail_display_text_transfer_phone = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number (optional)
      static let screen_add_beneficiary_detail_display_text_transfer_phone_optional = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_phone_optional", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Physical card
      static let common_display_text_physical_card = Rswift.StringResource(key: "common_display_text_physical_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pick an expense pot
      static let screen_iban_send_money_success_pick_expense_pot_button = Rswift.StringResource(key: "screen_iban_send_money_success_pick_expense_pot_button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pickup agent location
      static let custom_view_funds_transfer_display_text_location_heading = Rswift.StringResource(key: "custom_view_funds_transfer_display_text_location_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Plan
      static let screen_yap_house_hold_confirm_payment_display_text_title = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter alphabets only
      static let screen_name_special_character_error = Rswift.StringResource(key: "screen_name_special_character_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please log in to your email address to validate your email and continue with access to YAP!
      static let screen_unverified_success_display_text_description = Rswift.StringResource(key: "screen_unverified_success_display_text_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please remove %@, we will refund you the subscription fee
      static let screen_household_card_screen_ineligible_card_alert_description = Rswift.StringResource(key: "screen_household_card_screen_ineligible_card_alert_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please select a location from within United Arab Emirates
      static let screen_meeting_location_display_text_uae_location_error = Rswift.StringResource(key: "screen_meeting_location_display_text_uae_location_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please update your Emirates ID to continue using YAP
      static let common_display_text_account_eid_expired = Rswift.StringResource(key: "common_display_text_account_eid_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please update your app in order to continue.
      static let screen_splash_display_text_force_update = Rswift.StringResource(key: "screen_splash_display_text_force_update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait we are syncing your account
      static let common_display_text_account_syncing = Rswift.StringResource(key: "common_display_text_account_syncing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Premier airport lounge access
      static let screen_add_card_display_text_feature_premier_airport_lounge_access = Rswift.StringResource(key: "screen_add_card_display_text_feature_premier_airport_lounge_access", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Primary card
      static let commone_disply_text_card_name_primary_silver = Rswift.StringResource(key: "commone_disply_text_card_name_primary_silver", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Priority customer support
      static let screen_add_card_display_text_feature_priority_customer_support = Rswift.StringResource(key: "screen_add_card_display_text_feature_priority_customer_support", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Privacy
      static let screen_user_profile_display_text_privacy = Rswift.StringResource(key: "screen_user_profile_display_text_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let screen_user_profile_display_text_profile = Rswift.StringResource(key: "screen_user_profile_display_text_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Purchased packages
      static let screen_store_display_tour_guide_text_title_purchase_package = Rswift.StringResource(key: "screen_store_display_tour_guide_text_title_purchase_package", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Queue up!
      static let screen_onboarding_congratulations_waiting_user_button_complete_verification = Rswift.StringResource(key: "screen_onboarding_congratulations_waiting_user_button_complete_verification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Re-enter your new passcode
      static let screen_confirm_passcode_display_text_heading = Rswift.StringResource(key: "screen_confirm_passcode_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Re-scan Emirates ID
      static let common_button_re_scan = Rswift.StringResource(key: "common_button_re_scan", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Re-scan Emirates ID
      static let screen_b2c_eid_info_review_button_title_rescan_eid = Rswift.StringResource(key: "screen_b2c_eid_info_review_button_title_rescan_eid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Re-send
      static let screen_household_card_screen_decline_card_alert_button_title_resend = Rswift.StringResource(key: "screen_household_card_screen_decline_card_alert_button_title_resend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reactivate subscription
      static let screen_household_reactivate_subscription_title = Rswift.StringResource(key: "screen_household_reactivate_subscription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Real-time banking
      static let screen_welcome_b2c_display_text_page1_title = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page1_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Real-time benefits
      static let screen_welcome_b2c_display_text_page3_title = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page3_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Real-time exchange rates
      static let screen_add_card_display_text_feature_realtime_exchange_rate = Rswift.StringResource(key: "screen_add_card_display_text_feature_realtime_exchange_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Real-time perks
      static let screen_welcome_b2c_display_text_page2_title = Rswift.StringResource(key: "screen_welcome_b2c_display_text_page2_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reason for transfer
      static let screen_international_funds_transfer_display_text_reson = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_reson", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Received
      static let screen_transaction_details_display_text_received = Rswift.StringResource(key: "screen_transaction_details_display_text_received", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Receiver
      static let screen_transaction_details_display_text_receiver_name = Rswift.StringResource(key: "screen_transaction_details_display_text_receiver_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Recent transfers
      static let screen_send_money_display_text_recent_transfer = Rswift.StringResource(key: "screen_send_money_display_text_recent_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Recent transfers
      static let screen_y2y_display_text_recent_transfers = Rswift.StringResource(key: "screen_y2y_display_text_recent_transfers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Redeemed by %d friends
      static let screen_invite_friend_display_text_redeemed_by_friends = Rswift.StringResource(key: "screen_invite_friend_display_text_redeemed_by_friends", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Redeemed by 1 friend
      static let screen_invite_friend_display_text_redeemed_by_1_friend = Rswift.StringResource(key: "screen_invite_friend_display_text_redeemed_by_1_friend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Refer a friend
      static let screen_invite_friend_display_text_title = Rswift.StringResource(key: "screen_invite_friend_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Refer a friend
      static let screen_menu_display_text_refer_friend = Rswift.StringResource(key: "screen_menu_display_text_refer_friend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reference number
      static let custom_view_funds_transfer_display_text_reference_number_heading = Rswift.StringResource(key: "custom_view_funds_transfer_display_text_reference_number_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reference number
      static let screen_transaction_details_display_text_refrence_number = Rswift.StringResource(key: "screen_transaction_details_display_text_refrence_number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remember ID
      static let screen_sign_in_display_text_remember_id_text = Rswift.StringResource(key: "screen_sign_in_display_text_remember_id_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remember this PIN as you’ll need it for all your transactions, and make sure you don’t share it with anyone
      static let screen_change_pin_success_display_text_sub_heading = Rswift.StringResource(key: "screen_change_pin_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove
      static let screen_card_detail_button_remove_card_alert_remove = Rswift.StringResource(key: "screen_card_detail_button_remove_card_alert_remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove
      static let screen_remove_funds_button_remove = Rswift.StringResource(key: "screen_remove_funds_button_remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove
      static let screen_topup_card_details_display_text_remove_card_confirmation_remove = Rswift.StringResource(key: "screen_topup_card_details_display_text_remove_card_confirmation_remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove & Refund
      static let screen_household_card_screen_decline_card_alert_button_title_remove = Rswift.StringResource(key: "screen_household_card_screen_decline_card_alert_button_title_remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove & Refund
      static let screen_household_card_screen_ineligible_card_alert_button_title = Rswift.StringResource(key: "screen_household_card_screen_ineligible_card_alert_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove card
      static let screen_card_detail_button_remove = Rswift.StringResource(key: "screen_card_detail_button_remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove card
      static let screen_topup_card_details_button_remove_card = Rswift.StringResource(key: "screen_topup_card_details_button_remove_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove card from YAP account
      static let screen_card_detail_display_text_remove_card_alert_title = Rswift.StringResource(key: "screen_card_detail_display_text_remove_card_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove funds
      static let screen_card_detail_button_remove_funds = Rswift.StringResource(key: "screen_card_detail_button_remove_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove funds
      static let screen_remove_funds_display_text_remove_funds = Rswift.StringResource(key: "screen_remove_funds_display_text_remove_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove photo
      static let screen_user_profile_display_text_remove_photo = Rswift.StringResource(key: "screen_user_profile_display_text_remove_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reorder card
      static let screen_cards_button_reorder_card = Rswift.StringResource(key: "screen_cards_button_reorder_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reorder new card
      static let screen_card_blocked_button_reorder_new_card = Rswift.StringResource(key: "screen_card_blocked_button_reorder_new_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reorder this card
      static let screen_reorder_spare_card_display_text_title = Rswift.StringResource(key: "screen_reorder_spare_card_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Report lost or stolen card
      static let screen_card_detail_button_report = Rswift.StringResource(key: "screen_card_detail_button_report", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Report lost or stolen card
      static let screen_report_card_display_text_title = Rswift.StringResource(key: "screen_report_card_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request Money
      static let screen_yap_it_button_request_money = Rswift.StringResource(key: "screen_yap_it_button_request_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resend OTP
      static let screen_device_registration_otp_button_resend_otp = Rswift.StringResource(key: "screen_device_registration_otp_button_resend_otp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resend OTP
      static let screen_verify_phone_number_button_resend_otp = Rswift.StringResource(key: "screen_verify_phone_number_button_resend_otp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Retail payments
      static let screen_card_limits_display_text_retail_payment_title = Rswift.StringResource(key: "screen_card_limits_display_text_retail_payment_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Retry
      static let common_display_text_retry = Rswift.StringResource(key: "common_display_text_retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rose Gold Premium Card
      static let commone_disply_text_card_name_premium_rose_gold = Rswift.StringResource(key: "commone_disply_text_card_name_premium_rose_gold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SMS notifications
      static let screen_notification_settings_display_text_header_sms = Rswift.StringResource(key: "screen_notification_settings_display_text_header_sms", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SWIFT/BIC
      static let screen_more_bank_details_display_text_swift = Rswift.StringResource(key: "screen_more_bank_details_display_text_swift", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Salary
      static let screen_house_hold_salary_profile_salary_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_salary_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Salary has been transferred successfully
      static let screen_household_normal_payment_success_text = Rswift.StringResource(key: "screen_household_normal_payment_success_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Salary has been transferred successfully and a monthly recurring payment has been set for:
      static let screen_household_recurring_payment_success_text = Rswift.StringResource(key: "screen_household_recurring_payment_success_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let screen_add_note_display_text_save = Rswift.StringResource(key: "screen_add_note_display_text_save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Schedule once
      static let screen_household_employee_salary_schedule_once_heading_text = Rswift.StringResource(key: "screen_household_employee_salary_schedule_once_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let screen_home_display_tour_guide_text_title_search = Rswift.StringResource(key: "screen_home_display_tour_guide_text_title_search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let screen_send_money_input_text_search_hint = Rswift.StringResource(key: "screen_send_money_input_text_search_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Secured by YAP
      static let screen_payment_card_detail_text_secure = Rswift.StringResource(key: "screen_payment_card_detail_text_secure", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Security
      static let screen_user_profile_display_text_security = Rswift.StringResource(key: "screen_user_profile_display_text_security", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See details
      static let screen_cards_display_text_see_details = Rswift.StringResource(key: "screen_cards_display_text_see_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See terms and conditions
      static let screen_invite_friend_display_text_terms_and_conditions = Rswift.StringResource(key: "screen_invite_friend_display_text_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select
      static let common_button_select = Rswift.StringResource(key: "common_button_select", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select a card color
      static let screen_household_card_selection_display_text_title = Rswift.StringResource(key: "screen_household_card_selection_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select a plan. You will be charged only when your Household staff confirms their card.
      static let screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select a reason for transfer
      static let screen_international_funds_transfer_display_text_reason_placeholder = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_reason_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select a type of card
      static let screen_add_card_display_text_select_card_type = Rswift.StringResource(key: "screen_add_card_display_text_select_card_type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select category
      static let screen_change_transaction_category_title = Rswift.StringResource(key: "screen_change_transaction_category_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select country
      static let screen_add_beneficiary_display_text_select_country = Rswift.StringResource(key: "screen_add_beneficiary_display_text_select_country", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select country of residence
      static let screen_add_beneficiary_display_text_select_country_residence = Rswift.StringResource(key: "screen_add_beneficiary_display_text_select_country_residence", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select the emirate you live in
      static let screen_meeting_location_display_text_select_cities = Rswift.StringResource(key: "screen_meeting_location_display_text_select_cities", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send cash to
      static let screen_cash_pickup_funds_display_text_header = Rswift.StringResource(key: "screen_cash_pickup_funds_display_text_header", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send me a new email
      static let screen_email_verified_popup_button_button_title_do_it_later = Rswift.StringResource(key: "screen_email_verified_popup_button_button_title_do_it_later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money
      static let screen_send_money_display_text_title = Rswift.StringResource(key: "screen_send_money_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money
      static let screen_yap_it_button_send_money = Rswift.StringResource(key: "screen_yap_it_button_send_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money outside YAP
      static let screen_yfy_better_together_text_send_money = Rswift.StringResource(key: "screen_yfy_better_together_text_send_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to
      static let screen_international_funds_transfer_display_text_title = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to %@
      static let screen_iban_send_money_title = Rswift.StringResource(key: "screen_iban_send_money_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to an account
      static let screen_add_beneficiary_display_text_transfer_type_bank_description = Rswift.StringResource(key: "screen_add_beneficiary_display_text_transfer_type_bank_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to an agent location
      static let screen_add_beneficiary_display_text_transfer_type_cash_pickup_description = Rswift.StringResource(key: "screen_add_beneficiary_display_text_transfer_type_cash_pickup_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to someone instantly within your YAP network. Tap on the YAP it button on your dashboard, select a friend from the list and enter the desired amount.  Yes, It's that simple!
      static let screen_yfy_better_together_goal_two_description = Rswift.StringResource(key: "screen_yfy_better_together_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send money to this beneficiary now?
      static let screen_add_beneficiary_detail_display_button_block_alert_description = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_button_block_alert_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send salaries directly to account
      static let screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send to a YAP contact
      static let screen_y2y_funds_transfer_display_text_title_yap_contact = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_title_yap_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sender
      static let screen_transaction_details_display_text_sendare_name = Rswift.StringResource(key: "screen_transaction_details_display_text_sendare_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let screen_card_delivery_status_button_set_pin = Rswift.StringResource(key: "screen_card_delivery_status_button_set_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let screen_confirm_card_pin_button_create_pin = Rswift.StringResource(key: "screen_confirm_card_pin_button_create_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let screen_lite_dashboard_button_set_pin = Rswift.StringResource(key: "screen_lite_dashboard_button_set_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let view_payment_card_onboarding_stage_three_action_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_three_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set a PIN code to start using it
      static let screen_household_pin_setup_description = Rswift.StringResource(key: "screen_household_pin_setup_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set a profile photo
      static let screen_yfy_get_started_text_set_profile = Rswift.StringResource(key: "screen_yfy_get_started_text_set_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set limits
      static let screen_card_detail_button_set_limits = Rswift.StringResource(key: "screen_card_detail_button_set_limits", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set limits
      static let screen_card_limits_display_text_title = Rswift.StringResource(key: "screen_card_limits_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set limits
      static let screen_primary_card_detail_tour_guide_set_limit_title = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_set_limit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set missions on YAP Young
      static let screen_yfy_you_are_pro_text_set_mission = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_set_mission", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set passcode
      static let screen_create_passcode_button_create_new_passcode = Rswift.StringResource(key: "screen_create_passcode_button_create_new_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set this salary transfer up as a recurring payment
      static let screen_iban_send_money_success_recurring_payment_display_text = Rswift.StringResource(key: "screen_iban_send_money_success_recurring_payment_display_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set this salary transfer up as a recurring payment 
      static let screen_household_pay_salary_screen_recurring_text_title = Rswift.StringResource(key: "screen_household_pay_salary_screen_recurring_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up a multi-currency account
      static let screen_yfy_take_a_leap_text_set_mc_account = Rswift.StringResource(key: "screen_yfy_take_a_leap_text_set_mc_account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up a recurring payment
      static let screen_household_recurring_payment_title = Rswift.StringResource(key: "screen_household_recurring_payment_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up a salary
      static let screen_house_hold_salary_profile_set_up_salary_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_set_up_salary_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up a single payment for a future date
      static let screen_household_employee_salary_future_payment_text = Rswift.StringResource(key: "screen_household_employee_salary_future_payment_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up a standing order for future payments
      static let screen_household_employee_salary_recurring_text = Rswift.StringResource(key: "screen_household_employee_salary_recurring_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up an expense pot
      static let screen_house_hold_salary_profile_set_up_expense_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_set_up_expense_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up automatic payments
      static let screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up automatic payouts for salary payments and make life easier with cashless domestic expenses
      static let screen_yap_house_hold_onboarding_landing_display_text_salary = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_salary", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set up now
      static let screen_household_normal_payment_set_up_recurring_text = Rswift.StringResource(key: "screen_household_normal_payment_set_up_recurring_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set your PIN
      static let screen_yfy_get_started_text_set_pin = Rswift.StringResource(key: "screen_yfy_get_started_text_set_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set your card PIN
      static let view_payment_card_onboarding_stage_three_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_three_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let common_button_settings = Rswift.StringResource(key: "common_button_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let screen_invite_friend_button_share = Rswift.StringResource(key: "screen_invite_friend_button_share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let screen_menu_display_text_share = Rswift.StringResource(key: "screen_menu_display_text_share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let screen_more_bank_details_button_share = Rswift.StringResource(key: "screen_more_bank_details_button_share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let screen_yap_house_hold_success_button_text_share = Rswift.StringResource(key: "screen_yap_house_hold_success_button_text_share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share this code
      static let custom_view_funds_transfer_button_title = Rswift.StringResource(key: "custom_view_funds_transfer_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share your referral link
      static let screen_invite_friend_display_text_referal_code = Rswift.StringResource(key: "screen_invite_friend_display_text_referal_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sharing is sweet, and it’s even better when you do it with friends. Send this special link to your special people so they change the way they bank too!
      static let screen_invite_friend_display_text_referal_reward = Rswift.StringResource(key: "screen_invite_friend_display_text_referal_reward", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Shipped
      static let common_delivery_status_shipped = Rswift.StringResource(key: "common_delivery_status_shipped", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Shipping
      static let common_delivery_status_shipping = Rswift.StringResource(key: "common_delivery_status_shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show us your social skills! Invite 10 friends to YAP to complete this level.  You know the drill.
      static let screen_yfy_you_are_a_pro_goal_one_description = Rswift.StringResource(key: "screen_yfy_you_are_a_pro_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in
      static let screen_passcode_success_button_sign_in = Rswift.StringResource(key: "screen_passcode_success_button_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in
      static let screen_sign_in_button_sign_in = Rswift.StringResource(key: "screen_sign_in_button_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in
      static let screen_verify_passcode_button_sign_in = Rswift.StringResource(key: "screen_verify_passcode_button_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in to your YAP account
      static let screen_sign_in_display_text_heading_text = Rswift.StringResource(key: "screen_sign_in_display_text_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in with Face ID
      static let screen_user_profile_display_text_face_id = Rswift.StringResource(key: "screen_user_profile_display_text_face_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in with Touch ID
      static let screen_sign_in_button_sign_in_touch_id = Rswift.StringResource(key: "screen_sign_in_button_sign_in_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in with Touch ID
      static let screen_user_profile_display_text_touch_id = Rswift.StringResource(key: "screen_user_profile_display_text_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign up to Household
      static let screen_yfy_you_are_pro_text_sign_up_house_hold = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_sign_up_house_hold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Signed up friends: %d
      static let screen_waiting_list_rank_invitees_list_button_title_text = Rswift.StringResource(key: "screen_waiting_list_rank_invitees_list_button_title_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip and do it later
      static let screen_household_welcome_skip_verification_button_title = Rswift.StringResource(key: "screen_household_welcome_skip_verification_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip and go to dashboard
      static let screen_b2c_kyc_home_button_skip = Rswift.StringResource(key: "screen_b2c_kyc_home_button_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip and go to dashboard
      static let screen_b2c_kyc_home_button_skip_no_dashboard = Rswift.StringResource(key: "screen_b2c_kyc_home_button_skip_no_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip for now
      static let screen_add_spare_card_display_text_skip_now = Rswift.StringResource(key: "screen_add_spare_card_display_text_skip_now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Some app features have been temporarily blocked for your security. This is because you made too many incorrect OTP attempts.  Get in touch by calling our agents at %@ or message us via the Live Chat so we can unblock your account right away!
      static let screen_otp_blocked_display_text_details_otp_blocked = Rswift.StringResource(key: "screen_otp_blocked_display_text_details_otp_blocked", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Some features may appear blocked for you as you made too many incorrect OTP attempts. Call or chat with us now to get full access.
      static let screen_otp_blocked_display_text_dashboard_notification = Rswift.StringResource(key: "screen_otp_blocked_display_text_dashboard_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Some of your card's features are temporarily disabled. Get in touch with us at %@ for assistance.
      static let common_display_text_notification_feature_block = Rswift.StringResource(key: "common_display_text_notification_feature_block", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Some of your card’s features may not work at this time. This is because your card or account may have been blocked temporarily.  Get in touch by calling our agents at %@ or message us via Live Chat so we can unblock your account right away!
      static let screen_otp_blocked_display_text_details_access_restricted = Rswift.StringResource(key: "screen_otp_blocked_display_text_details_access_restricted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry Joe, looks like you already have a Household plan connected to this Emirates ID. Please log out and inform your employer that we cannot proceed with activating your plan at this time. 
      static let screen_household_warning_display_text_description = Rswift.StringResource(key: "screen_household_warning_display_text_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry, %@ is ineligible for a household card.
      static let screen_household_card_screen_ineligible_card_alert_title = Rswift.StringResource(key: "screen_household_card_screen_ineligible_card_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry, that doesn't look right. We’re working on fixing it now. Please try again in sometime.
      static let common_display_text_fallback_error_message = Rswift.StringResource(key: "common_display_text_fallback_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry, that’s too many incorrect attempts. Click on Forgot passcode to set a new one.
      static let screen_verify_passcode_text_account_locked = Rswift.StringResource(key: "screen_verify_passcode_text_account_locked", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry, this feature isn’t available to you at this time. Please use live chat or call us on %@ to get access.
      static let common_display_text_feature_blocked_error = Rswift.StringResource(key: "common_display_text_feature_blocked_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sorry, you've reached your daily limit. Let's try again tomorrow.
      static let common_display_text_daily_limit_error_limit_reached = Rswift.StringResource(key: "common_display_text_daily_limit_error_limit_reached", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spare card benefits
      static let screen_card_feature_display_text_title_spare_card = Rswift.StringResource(key: "screen_card_feature_display_text_title_spare_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spare physical card
      static let common_display_text_spare_physical_card = Rswift.StringResource(key: "common_display_text_spare_physical_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spare virtual card
      static let screen_add_card_display_text_spare_card = Rswift.StringResource(key: "screen_add_card_display_text_spare_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spend AED 100
      static let screen_yfy_up_and_running_text_spend_money = Rswift.StringResource(key: "screen_yfy_up_and_running_text_spend_money", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spend AED 1000
      static let screen_yfy_you_are_pro_text_spend_amount = Rswift.StringResource(key: "screen_yfy_you_are_pro_text_spend_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spent
      static let screen_transaction_details_display_text_spent = Rswift.StringResource(key: "screen_transaction_details_display_text_spent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Split bills (not friendships) the next time you go out with your friends.  To split a bill, simply swipe left on the transaction you want to split, send out reminders to your friends and settle up effortlessly.  Psst… you can also send reminders!
      static let screen_yfy_better_together_goal_three_description = Rswift.StringResource(key: "screen_yfy_better_together_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Split bills with YAP
      static let screen_yfy_better_together_text_split_bills = Rswift.StringResource(key: "screen_yfy_better_together_text_split_bills", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start by adding a card
      static let screen_topup_card_selection_display_text_heading_no_cards = Rswift.StringResource(key: "screen_topup_card_selection_display_text_heading_no_cards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start using your account to see all your transactions here
      static let screen_home_display_text_nothing_to_report = Rswift.StringResource(key: "screen_home_display_text_nothing_to_report", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Starting date
      static let screen_household_start_date_title = Rswift.StringResource(key: "screen_household_start_date_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Statements
      static let screen_menu_display_text_statements = Rswift.StringResource(key: "screen_menu_display_text_statements", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stay organized by adding transaction notes
      static let screen_transaction_details_display_text_note_description = Rswift.StringResource(key: "screen_transaction_details_display_text_note_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Struggling to keep up with managing your day-to-day house expenses? With Household, set up a quick and safe payment system so you can pay your help and manage expenses easily. Set up monthly salary payments, keep track of grocery spends, and simplify your life without having to rely on cash. Give your household help a card they can use for spending and remittances. 
      static let screen_yap_house_hold_onboarding_landing_display_text_sub_heading = Rswift.StringResource(key: "screen_yap_house_hold_onboarding_landing_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Submit now
      static let view_payment_card_onboarding_stage_additional_requirement_action_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_additional_requirement_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscription
      static let screen_household_subscription_title = Rswift.StringResource(key: "screen_household_subscription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscriptions
      static let screen_more_home_display_text_tile_subscriptions = Rswift.StringResource(key: "screen_more_home_display_text_tile_subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success!
      static let screen_change_address_success_display_text_heading = Rswift.StringResource(key: "screen_change_address_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success!
      static let screen_household_pin_change_success_heading = Rswift.StringResource(key: "screen_household_pin_change_success_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success!
      static let screen_household_welcome_success_heading_title = Rswift.StringResource(key: "screen_household_welcome_success_heading_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success!
      static let screen_phone_number_success_display_text_heading = Rswift.StringResource(key: "screen_phone_number_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success!
      static let screen_unverified_success_display_text_heading = Rswift.StringResource(key: "screen_unverified_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Successful card transactions
      static let screen_notification_settings_display_text_setting_success_transaction = Rswift.StringResource(key: "screen_notification_settings_display_text_setting_success_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Swift code
      static let screen_bank_details_display_text_swift_code = Rswift.StringResource(key: "screen_bank_details_display_text_swift_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Swift code
      static let screen_beneficiary_overview_display_text_swift_code = Rswift.StringResource(key: "screen_beneficiary_overview_display_text_swift_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Take the leap
      static let screen_yfy_home_screen_take_the_leap_title = Rswift.StringResource(key: "screen_yfy_home_screen_take_the_leap_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tap here to view your complete bank account details, useful for topping up and sharing with contacts for transfer purposes.
      static let screen_more_tour_guide_bank_detail_description = Rswift.StringResource(key: "screen_more_tour_guide_bank_detail_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tap map to confirm location
      static let screen_meeting_location_button_confirm_location = Rswift.StringResource(key: "screen_meeting_location_button_confirm_location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tap to change category
      static let screen_transaction_details_display_text_change_category = Rswift.StringResource(key: "screen_transaction_details_display_text_change_category", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tap to scan your Emirates ID
      static let screen_b2c_kyc_home_emirates_id_scan = Rswift.StringResource(key: "screen_b2c_kyc_home_emirates_id_scan", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Teach your kids how to be good with money. Set up a YAP Young account for your child and send them pocket money through the app into their YAP Young card!
      static let screen_yfy_yap_store_goal_one_description = Rswift.StringResource(key: "screen_yfy_yap_store_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell us about the bank
      static let screen_bank_details_display_text_title = Rswift.StringResource(key: "screen_bank_details_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell us about the beneficiary
      static let screen_add_beneficiary_detail_display_text_title = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell us how to contact   %@
      static let screen_yap_house_hold_user_info_contact_display_text_heading = Rswift.StringResource(key: "screen_yap_house_hold_user_info_contact_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell us what happened to your card
      static let screen_report_card_display_text_block_card_title = Rswift.StringResource(key: "screen_report_card_display_text_block_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell your friends about YAP so you can send and receive money instantly!
      static let screen_y2y_display_text_invite_no_phone_contacts = Rswift.StringResource(key: "screen_y2y_display_text_invite_no_phone_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tell your friends about us!
      static let screen_invite_friend_display_text_reward = Rswift.StringResource(key: "screen_invite_friend_display_text_reward", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Temporary passcode
      static let screen_yap_house_hold_success_display_text_share_pass_code = Rswift.StringResource(key: "screen_yap_house_hold_success_display_text_share_pass_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms & Conditions
      static let screen_system_permission_text_terms_and_conditions = Rswift.StringResource(key: "screen_system_permission_text_terms_and_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms & conditions
      static let screen_more_home_display_text_tile_terms = Rswift.StringResource(key: "screen_more_home_display_text_tile_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms and conditions
      static let screen_user_profile_display_text_terms_conditions = Rswift.StringResource(key: "screen_user_profile_display_text_terms_conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thanks %@! Check that your details are correct so we can send you your card
      static let screen_b2c_household_eid_info_review_display_text_sub_title = Rswift.StringResource(key: "screen_b2c_household_eid_info_review_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thanks %@! Verify your details are exactly as per your Emirates ID. You can edit the name fields incase we got it wrong!
      static let screen_b2c_eid_info_review_display_text_subheading = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thanks %@! Verify your details so we can send you your YAP card
      static let screen_b2c_eid_info_review_display_text_sub_title = Rswift.StringResource(key: "screen_b2c_eid_info_review_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: That doesn't look right. Please try again
      static let screen_sign_in_display_text_error_text = Rswift.StringResource(key: "screen_sign_in_display_text_error_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: That doesn’t look right. Please upload .jpg or .png only
      static let error_document_validation_malicious = Rswift.StringResource(key: "error_document_validation_malicious", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: That first step was easy! Welcome to YAP. We're so happy you're here :)
      static let screen_yfy_get_started_goal_one_description = Rswift.StringResource(key: "screen_yfy_get_started_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: That's over your daily limit. Please enter an amount lower than %@
      static let screen_y2y_funds_transfer_display_text_daily_limit_error = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_daily_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The Personalized Banking App
      static let screen_home_display_text_tag_line = Rswift.StringResource(key: "screen_home_display_text_tag_line", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The information you've entered will be lost
      static let screen_add_beneficiary_detail_display_text_cancel_popup_message = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_cancel_popup_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The ultimate YAP card – a 100% metal card with exclusive benefits.  The Metal card – or experience – is available in Black, Rose Gold and Chrome.
      static let screen_yfy_take_the_leap_goal_three_description = Rswift.StringResource(key: "screen_yfy_take_the_leap_goal_three_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There is no minimum salary requirement to sign up to YAP. We only ask this question for compliance purposes to safegaurd your account. 
      static let employment_info_questions_additional_info_for_salary_details = Rswift.StringResource(key: "employment_info_questions_additional_info_for_salary_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This 4-digit code is yours to keep. Please don’t share it with anyone
      static let screen_set_card_pin_welcome_display_text_sub_title = Rswift.StringResource(key: "screen_set_card_pin_welcome_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This amount exceeds your daily transaction limit
      static let common_display_text_daily_limit_error_single_transaction = Rswift.StringResource(key: "common_display_text_daily_limit_error_single_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This card has expired
      static let screen_cards_display_text_expired_card = Rswift.StringResource(key: "screen_cards_display_text_expired_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This card is blocked/stolen
      static let screen_cards_display_text_hotlisted = Rswift.StringResource(key: "screen_cards_display_text_hotlisted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This card is frozen
      static let screen_card_detail_display_text_frozen = Rswift.StringResource(key: "screen_card_detail_display_text_frozen", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This card is frozen
      static let screen_cards_display_text_freeze_card = Rswift.StringResource(key: "screen_cards_display_text_freeze_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This card will be removed from your top-up methods
      static let screen_topup_card_details_display_text_remove_card_confirmation = Rswift.StringResource(key: "screen_topup_card_details_display_text_remove_card_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This email doesn’t match what you first entered.
      static let screen_change_email_display_text_confirm_email_diff_error = Rswift.StringResource(key: "screen_change_email_display_text_confirm_email_diff_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This feature has been blocked due to too many OTP attempts. Use our live chat or call us on %@ to get access.
      static let common_display_text_otp_blocked_error = Rswift.StringResource(key: "common_display_text_otp_blocked_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This is an indicator of your available balance. It is always updated in real time and supported by a daily transaction graph.
      static let screen_home_display_tour_guide_text_desc_amount = Rswift.StringResource(key: "screen_home_display_tour_guide_text_desc_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This will be stored as your primary address
      static let screen_change_address_success_display_text_sub_heading = Rswift.StringResource(key: "screen_change_address_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time to top up
      static let view_payment_card_onboarding_stage_four_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_four_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To confirm this is really you, enter %@’s number below
      static let screen_confirm_parent_mobile_display_text_instructions = Rswift.StringResource(key: "screen_confirm_parent_mobile_display_text_instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Too many attempts. Please wait for
      static let screen_verify_passcode_text_incorrect_attempts = Rswift.StringResource(key: "screen_verify_passcode_text_incorrect_attempts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top menu
      static let screen_home_display_tour_guide_text_title_top_menue = Rswift.StringResource(key: "screen_home_display_tour_guide_text_title_top_menue", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up
      static let screen_add_spare_card_display_text_top_up = Rswift.StringResource(key: "screen_add_spare_card_display_text_top_up", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up
      static let screen_topup_type_selection_display_text_title = Rswift.StringResource(key: "screen_topup_type_selection_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up confirmation
      static let screen_topup_card_cvv_display_text_title = Rswift.StringResource(key: "screen_topup_card_cvv_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up now
      static let screen_set_card_pin_success_button_create_pin = Rswift.StringResource(key: "screen_set_card_pin_success_button_create_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up now
      static let view_payment_card_onboarding_stage_four_action_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_four_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up now with this card?
      static let screen_add_topup_card_display_text_succes_details = Rswift.StringResource(key: "screen_add_topup_card_display_text_succes_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Top up successful
      static let screen_topup_success_display_text_title = Rswift.StringResource(key: "screen_topup_success_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Total amount
      static let screen_transaction_details_display_text_total_amount = Rswift.StringResource(key: "screen_transaction_details_display_text_total_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Touch ID
      static let screen_light_dashboard_button_touch_id = Rswift.StringResource(key: "screen_light_dashboard_button_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Track expenses through analytics
      static let screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Track your delivery
      static let view_payment_card_onboarding_stage_card_on_the_way_action_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_card_on_the_way_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction
      static let screen_payment_card_detail_display_text_transaction = Rswift.StringResource(key: "screen_payment_card_detail_display_text_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction completed! You now have a physical spare card
      static let screen_add_spare_card_completion_display_text_complete_transaction = Rswift.StringResource(key: "screen_add_spare_card_completion_display_text_complete_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction completed! You now have a physical spare card
      static let screen_report_card_display_text_complete_transaction = Rswift.StringResource(key: "screen_report_card_display_text_complete_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transactions
      static let screen_payment_card_detail_display_text_transactions = Rswift.StringResource(key: "screen_payment_card_detail_display_text_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer
      static let screen_house_hold_salary_profile_transfer_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_transfer_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer a bonus or extra cash
      static let screen_house_hold_salary_profile_transfer_bonus_text = Rswift.StringResource(key: "screen_house_hold_salary_profile_transfer_bonus_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer a salary or add to an expense pot to get your Household analytics started!
      static let screen_household_analytics_screen_no_transection_detail = Rswift.StringResource(key: "screen_household_analytics_screen_no_transection_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer completed
      static let screen_iban_send_money_success_title = Rswift.StringResource(key: "screen_iban_send_money_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer money to
      static let screen_domestic_funds_transfer_display_text_heading = Rswift.StringResource(key: "screen_domestic_funds_transfer_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer successful
      static let screen_y2y_funds_transfer_success_display_text_title = Rswift.StringResource(key: "screen_y2y_funds_transfer_success_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer type
      static let screen_add_beneficiary_detail_display_text_transfer_type = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_transfer_type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transferring amount to a friend
      static let screen_international_funds_transfer_dropdown_text_reason_hint = Rswift.StringResource(key: "screen_international_funds_transfer_dropdown_text_reason_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfers
      static let screen_house_hold_salary_profile_display_text_transfers = Rswift.StringResource(key: "screen_house_hold_salary_profile_display_text_transfers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfers made before %@ UAE time will be processed on the same day. All transfers made after this time will be carried out on the next business day
      static let screen_domestic_funds_transfer_display_text_cutoff_time = Rswift.StringResource(key: "screen_domestic_funds_transfer_display_text_cutoff_time", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Travel insurance
      static let screen_add_card_display_text_feature_travel_insurance = Rswift.StringResource(key: "screen_add_card_display_text_feature_travel_insurance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Traveling abroad? Set up multi-currency on YAP (available on Prime and Metal plans), create currency wallets for the countries you’re visiting, and spend locally when you get there! You can forget about exchanging cash or running out mid-holiday :)
      static let screen_yfy_take_the_leap_goal_four_description = Rswift.StringResource(key: "screen_yfy_take_the_leap_goal_four_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Try ty freeze and unfreeze your card. You’ll know what to do when you lost or your card has been stolen
      static let screen_yfy_up_and_running_goal_two_description = Rswift.StringResource(key: "screen_yfy_up_and_running_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Twitter
      static let screen_user_profile_display_text_twitter = Rswift.StringResource(key: "screen_user_profile_display_text_twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type
      static let screen_topup_card_details_display_text_placeholder_card_type = Rswift.StringResource(key: "screen_topup_card_details_display_text_placeholder_card_type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type something...
      static let screen_add_note_display_text_type_something = Rswift.StringResource(key: "screen_add_note_display_text_type_something", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Uh oh! You’ll need to have a minimum balance of %@ plus the fee stated to proceed with this payment.
      static let common_display_text_available_balance_error = Rswift.StringResource(key: "common_display_text_available_balance_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unfortunately, we're unable to proceed with creating your account at this time. However, we appreciate your interest in getting a YAP account.
      static let screen_kyc_information_error_display_text_explanation_sanctioned = Rswift.StringResource(key: "screen_kyc_information_error_display_text_explanation_sanctioned", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unfreeze card
      static let screen_card_detail_button_unfreeze = Rswift.StringResource(key: "screen_card_detail_button_unfreeze", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unfreeze card
      static let screen_cards_button_unfreeze_card = Rswift.StringResource(key: "screen_cards_button_unfreeze_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unfreeze now
      static let screen_card_detail_button_unfreeze_now = Rswift.StringResource(key: "screen_card_detail_button_unfreeze_now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unspecified
      static let common_display_text_gender_unspecified = Rswift.StringResource(key: "common_display_text_gender_unspecified", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Up and running
      static let screen_yfy_home_screen_up_and_running_title = Rswift.StringResource(key: "screen_yfy_home_screen_up_and_running_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update
      static let screen_splash_button_force_update = Rswift.StringResource(key: "screen_splash_button_force_update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update card
      static let screen_cards_button_update_card = Rswift.StringResource(key: "screen_cards_button_update_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update profile photo
      static let screen_user_profile_display_text_update_profile_photo = Rswift.StringResource(key: "screen_user_profile_display_text_update_profile_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upgrade or add a new card
      static let screen_card_plans_title = Rswift.StringResource(key: "screen_card_plans_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upgrade to Prime
      static let screen_yfy_take_a_leap_text_upgrade_to_prime = Rswift.StringResource(key: "screen_yfy_take_a_leap_text_upgrade_to_prime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use %@
      static let screen_system_permission_button_touch_id = Rswift.StringResource(key: "screen_system_permission_button_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use Face ID to log in to your account?
      static let screen_system_permission_text_title_face_id = Rswift.StringResource(key: "screen_system_permission_text_title_face_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use Touch ID to log in to your account?
      static let screen_system_permission_text_title_touch_id = Rswift.StringResource(key: "screen_system_permission_text_title_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use Touch ID to log into YAP quicker. Make sure your Touch ID is always on in your device settings
      static let screen_system_permission_text_details_touch_id = Rswift.StringResource(key: "screen_system_permission_text_details_touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use YAP locally
      static let screen_yfy_up_and_running_text_use_yap_locally = Rswift.StringResource(key: "screen_yfy_up_and_running_text_use_yap_locally", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your fingerprint to sign in
      static let screen_verify_passcode_display_text_biometrics_reason = Rswift.StringResource(key: "screen_verify_passcode_display_text_biometrics_reason", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static let screen_add_card_display_text_feature_spare_card_every_need_details = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_every_need_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static let screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static let screen_add_card_display_text_feature_spare_card_nick_name_details = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_nick_name_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static let screen_add_card_display_text_feature_spare_card_virtual_or_physical_details = Rswift.StringResource(key: "screen_add_card_display_text_feature_spare_card_virtual_or_physical_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: VAT
      static let screen_transaction_details_display_text_vat = Rswift.StringResource(key: "screen_transaction_details_display_text_vat", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify
      static let screen_device_registration_otp_button_send = Rswift.StringResource(key: "screen_device_registration_otp_button_send", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify
      static let screen_sign_in_button_verify = Rswift.StringResource(key: "screen_sign_in_button_verify", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your PIN change
      static let screen_forgot_pin_display_text_heading = Rswift.StringResource(key: "screen_forgot_pin_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your email address
      static let screen_email_verification_display_text_heading = Rswift.StringResource(key: "screen_email_verification_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your mobile number
      static let screen_add_beneificiary_otp_display_text_heading = Rswift.StringResource(key: "screen_add_beneificiary_otp_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your mobile number
      static let screen_add_funds_otp_display_text_heading = Rswift.StringResource(key: "screen_add_funds_otp_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your mobile number
      static let screen_forgot_passcode_otp_display_text_heading = Rswift.StringResource(key: "screen_forgot_passcode_otp_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your mobile number
      static let screen_phone_number_verification_display_text_heading = Rswift.StringResource(key: "screen_phone_number_verification_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify your mobile number
      static let screen_verify_phone_number_display_text_title = Rswift.StringResource(key: "screen_verify_phone_number_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View
      static let common_button_view = Rswift.StringResource(key: "common_button_view", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View
      static let screen_card_statements_display_text_view = Rswift.StringResource(key: "screen_card_statements_display_text_view", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View
      static let screen_yap_4_you_home_button_title_view = Rswift.StringResource(key: "screen_yap_4_you_home_button_title_view", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View and manage all your purchased YAP packages and add-ons in a single place.
      static let screen_store_display_tour_guide_text_desc_purchase_package = Rswift.StringResource(key: "screen_store_display_tour_guide_text_desc_purchase_package", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View statement
      static let screen_card_detail_button_view_statement = Rswift.StringResource(key: "screen_card_detail_button_view_statement", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View your transactions plotted on a graph and drag your fingers along the bars to view a specific date.
      static let screen_home_display_tour_guide_text_desc_graph = Rswift.StringResource(key: "screen_home_display_tour_guide_text_desc_graph", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Virtual card
      static let common_display_text_spare_virtual_card = Rswift.StringResource(key: "common_display_text_spare_virtual_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Virtual card
      static let common_display_text_virtual_card = Rswift.StringResource(key: "common_display_text_virtual_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Virtual cards let you make online payments without sharing your main card details.  You can order a virtual card through the Cards section. It is available immediately, so the next time you need to enter your card details online but aren’t comfortable doing it, just use your virtual card!
      static let screen_yfy_take_the_leap_goal_one_description = Rswift.StringResource(key: "screen_yfy_take_the_leap_goal_one_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Want to jump the queue?
      static let screen_waiting_list_rank_bump_me_up_info_text_top = Rswift.StringResource(key: "screen_waiting_list_rank_bump_me_up_info_text_top", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We are asking about CASH only that would be deposited in a bank machine.  We only ask this question for compliance purposes to safegaurd your account. 
      static let employment_info_questions_additional_info_for_cash_details = Rswift.StringResource(key: "employment_info_questions_additional_info_for_cash_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We are now processing your account. Please wait for activation to be completed shortly.
      static let screen_cards_display_text_inactive_subheading = Rswift.StringResource(key: "screen_cards_display_text_inactive_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We are reviewing your documents submitted on %@
      static let view_payment_card_onboarding_stage_additional_requirement_provided_subtitle = Rswift.StringResource(key: "view_payment_card_onboarding_stage_additional_requirement_provided_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We need to verify your ID to issue your card
      static let screen_household_kyc_home_display_text_screen_title = Rswift.StringResource(key: "screen_household_kyc_home_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We only ask you this questions for administrative purpose. It does not impact your ability to sign up to a YAP account.
      static let screen_onboarding_employment_type_screen_info_title = Rswift.StringResource(key: "screen_onboarding_employment_type_screen_info_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We thought you should know, %@!
      static let screen_otp_blocked_display_text_heading = Rswift.StringResource(key: "screen_otp_blocked_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We use push notifications to give you updates about all transactions and to send important reminders about your account
      static let screen_system_permission_text_details_notification = Rswift.StringResource(key: "screen_system_permission_text_details_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We will call you to confirm the time. Make sure to keep your Emirates ID with you
      static let screen_household_location_selection_success_display_text_subheading = Rswift.StringResource(key: "screen_household_location_selection_success_display_text_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We will notify you before each payment in case you require a fund top up on your account
      static let screen_household_recurring_payment_guide_text = Rswift.StringResource(key: "screen_household_recurring_payment_guide_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We will notify you when you’ve reached the top. Log back in to see your updated place in the queue.
      static let screen_waiting_list_rank_info_text = Rswift.StringResource(key: "screen_waiting_list_rank_info_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We will now block your card permanently, following which you will be able to order a new card. Please confirm if you want to move forward with this action.
      static let screen_report_card_display_text_block_alert_message = Rswift.StringResource(key: "screen_report_card_display_text_block_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We're sorry :(
      static let screen_kyc_information_error_display_text_title_sanctioned = Rswift.StringResource(key: "screen_kyc_information_error_display_text_title_sanctioned", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We're sorry, we aren't able to create bank accounts for US citizens at this point. Stay tuned though, we'll announce it everywhere if this changes!
      static let screen_kyc_information_error_display_text_explanation_from_usa = Rswift.StringResource(key: "screen_kyc_information_error_display_text_explanation_from_usa", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We've sent a code to  %@
      static let screen_phone_number_verification_display_text_sub_heading = Rswift.StringResource(key: "screen_phone_number_verification_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We've sent a verification code to
      static let screen_verify_phone_number_display_text_sub_title = Rswift.StringResource(key: "screen_verify_phone_number_display_text_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We've sent a verification code to  %@
      static let screen_email_verification_display_text_sub_heading = Rswift.StringResource(key: "screen_email_verification_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We've sent a verification code to  %@
      static let screen_forgot_pin_display_text_sub_heading = Rswift.StringResource(key: "screen_forgot_pin_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weekly
      static let screen_household_weekly_title = Rswift.StringResource(key: "screen_household_weekly_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome %@!
      static let screen_confirm_parent_mobile_display_text_welcome = Rswift.StringResource(key: "screen_confirm_parent_mobile_display_text_welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome %@, you’ve been added to a Household plan by %@
      static let screen_household_welcome_subtitle = Rswift.StringResource(key: "screen_household_welcome_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We’ll need some more additional information to proceed
      static let view_payment_card_onboarding_stage_additional_requirement_subtitle = Rswift.StringResource(key: "view_payment_card_onboarding_stage_additional_requirement_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We’re currently in beta and only open to a limited number of users. Don’t worry, you’ll be the first to know when we’re ready. Should you wish to find out more in the meantime, our website has more information for you.
      static let screen_waiting_list_dispaly_text_sub_heading = Rswift.StringResource(key: "screen_waiting_list_dispaly_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We’ve sent you this so we can remain connected and give you important updates about your account.
      static let screen_email_verification_b2b_display_text_email_confirmation = Rswift.StringResource(key: "screen_email_verification_b2b_display_text_email_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We’ve sent you this so we can remain connected and give you important updates about your account.
      static let screen_email_verification_b2c_display_text_email_confirmation = Rswift.StringResource(key: "screen_email_verification_b2c_display_text_email_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What are you waiting for? Go ahead and set a unique 4-digit PIN to start using your card
      static let screen_yfy_get_started_goal_two_description = Rswift.StringResource(key: "screen_yfy_get_started_goal_two_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What is this for?
      static let screen_iban_send_money_success_reason_header_display_text = Rswift.StringResource(key: "screen_iban_send_money_success_reason_header_display_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What is your employment status?
      static let screen_onboarding_employment_type_screen_subheading_title = Rswift.StringResource(key: "screen_onboarding_employment_type_screen_subheading_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What type of transfer will this be?
      static let screen_add_beneficiary_display_text_transfer_type = Rswift.StringResource(key: "screen_add_beneficiary_display_text_transfer_type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What would you like to call this card?
      static let screen_change_card_name_display_text_add_name = Rswift.StringResource(key: "screen_change_card_name_display_text_add_name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's your mobile number?
      static let screen_phone_number_display_text_title = Rswift.StringResource(key: "screen_phone_number_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's your name?
      static let screeen_name_display_text_title = Rswift.StringResource(key: "screeen_name_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WhatsApp is not installed in your phone
      static let screen_help_and_support_display_text_whatsapp_not_installed = Rswift.StringResource(key: "screen_help_and_support_display_text_whatsapp_not_installed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What’s the legal name of your company?
      static let screen_company_name_display_text_title = Rswift.StringResource(key: "screen_company_name_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What’s your preferred email address?
      static let screen_enter_email_b2c_display_text_title = Rswift.StringResource(key: "screen_enter_email_b2c_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Where can we deliver your debit card?
      static let screen_add_spare_card_update_location_display_text_sub_heading = Rswift.StringResource(key: "screen_add_spare_card_update_location_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Which country do you want to  send money to?
      static let screen_add_beneficiary_display_text_country_title = Rswift.StringResource(key: "screen_add_beneficiary_display_text_country_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Who are you getting the Household plan for?
      static let screen_yap_house_hold_user_info_display_text_heading = Rswift.StringResource(key: "screen_yap_house_hold_user_info_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Who do you want to send money to?
      static let screen_send_money_no_contacts_display_text_sub_heading = Rswift.StringResource(key: "screen_send_money_no_contacts_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Who do you want to send money to?
      static let screen_y2y_display_text_prompt = Rswift.StringResource(key: "screen_y2y_display_text_prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Why do we ask you about your monthly salary?
      static let employment_info_questions_additional_info_for_salary_title = Rswift.StringResource(key: "employment_info_questions_additional_info_for_salary_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Worldwide Free ATM withdrawals
      static let screen_add_card_display_text_feature_free_atm_withdrawals = Rswift.StringResource(key: "screen_add_card_display_text_feature_free_atm_withdrawals", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Would you like to re-send a request or remove this card and get a refund? 
      static let screen_household_card_screen_decline_card_alert_description = Rswift.StringResource(key: "screen_household_card_screen_decline_card_alert_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Would you like to receive notifications from us?
      static let screen_system_permission_text_title_notification = Rswift.StringResource(key: "screen_system_permission_text_title_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP Business
      static let screen_more_home_display_text_tile_business = Rswift.StringResource(key: "screen_more_home_display_text_tile_business", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP Store
      static let screen_yfy_home_screen_store_title = Rswift.StringResource(key: "screen_yfy_home_screen_store_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP Young transfers
      static let screen_transaction_filter_display_text_young_transactions = Rswift.StringResource(key: "screen_transaction_filter_display_text_young_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP account details
      static let screen_more_bank_details_display_text_title = Rswift.StringResource(key: "screen_more_bank_details_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP contacts
      static let screen_y2y_display_button_yap_contacts = Rswift.StringResource(key: "screen_y2y_display_button_yap_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP for you
      static let screen_achievement_detail_display_text_screen_title = Rswift.StringResource(key: "screen_achievement_detail_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP for you
      static let screen_more_home_display_text_yap_for_you = Rswift.StringResource(key: "screen_more_home_display_text_yap_for_you", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP for you
      static let screen_more_home_display_text_yap_for_you_title = Rswift.StringResource(key: "screen_more_home_display_text_yap_for_you_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP for you
      static let screen_more_tour_guide_yap_for_you_title = Rswift.StringResource(key: "screen_more_tour_guide_yap_for_you_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP for you
      static let screen_yap_4_you_home_display_text_screen_title = Rswift.StringResource(key: "screen_yap_4_you_home_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP it
      static let screen_home_display_tour_guide_text_title_yap_it = Rswift.StringResource(key: "screen_home_display_tour_guide_text_title_yap_it", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP needs to access your location to continue. Please grant location access from Settings.
      static let screen_meeting_location_display_text_location_permission_error_title = Rswift.StringResource(key: "screen_meeting_location_display_text_location_permission_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP rate: 
      static let screen_international_funds_transfer_display_text_yap_rate = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_yap_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP referal code:
      static let screen_invite_friend_display_text_your_referal_code = Rswift.StringResource(key: "screen_invite_friend_display_text_your_referal_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP to YAP
      static let screen_send_money_no_contacts_display_text_title = Rswift.StringResource(key: "screen_send_money_no_contacts_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YAP works best with a valid Emirates ID
      static let screen_kyc_information_error_display_text_title_expired_card = Rswift.StringResource(key: "screen_kyc_information_error_display_text_title_expired_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yap Young
      static let screen_menu_display_text_yap_young = Rswift.StringResource(key: "screen_menu_display_text_yap_young", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yearly
      static let screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes
      static let common_button_yes = Rswift.StringResource(key: "common_button_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, keep me updated
      static let screen_notification_permission_button_title = Rswift.StringResource(key: "screen_notification_permission_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, send now
      static let screen_add_beneficiary_detail_display_button_block_alert_yes = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_button_block_alert_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, top up now
      static let screen_add_topup_card_succes_button_top_up_now = Rswift.StringResource(key: "screen_add_topup_card_succes_button_top_up_now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are now ready to fully activate and begin using your YAP account.
      static let screen_complete_verification_fss_sub_heading_text = Rswift.StringResource(key: "screen_complete_verification_fss_sub_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are sending %@ %@ 
      static let scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency = Rswift.StringResource(key: "scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can only move an amount less than or equal to your current balance of %@
      static let screen_remove_funds_display_text_available_balance_error = Rswift.StringResource(key: "screen_remove_funds_display_text_available_balance_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can only send up to %@ at this time. To transfer bigger amounts, please wait for %@ hours from the time you added %@.
      static let common_display_text_cooling_period_limit_error = Rswift.StringResource(key: "common_display_text_cooling_period_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can only top up with an amount equal to or less than the current balance of %@ available on your main debit card
      static let screen_add_funds_display_text_available_balance_error = Rswift.StringResource(key: "screen_add_funds_display_text_available_balance_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can only transfer an amount less than or equal to your current balance of %@
      static let screen_y2y_funds_transfer_display_text_error_exceeding_amount = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_error_exceeding_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can send money to people around the world through your YAP account. Click below to start adding a beneficiary. You can also do this using the + button anytime.
      static let screen_send_money_no_contacts_display_text_detail = Rswift.StringResource(key: "screen_send_money_no_contacts_display_text_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can temporarily block usage of your card by clicking on Freeze. Don’t worry though, you can always unfreeze your card instantly. 
      static let screen_primary_card_detail_tour_guide_free_card_description = Rswift.StringResource(key: "screen_primary_card_detail_tour_guide_free_card_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You cannot add an amount more than %@
      static let screen_add_funds_display_text_max_limit_error = Rswift.StringResource(key: "screen_add_funds_display_text_max_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You cannot enter your own IBAN
      static let screen_add_beneficiary_detail_display_text_error_iban_current_user = Rswift.StringResource(key: "screen_add_beneficiary_detail_display_text_error_iban_current_user", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You cannot move an amount more than %@
      static let screen_remove_funds_display_text_max_limit_error = Rswift.StringResource(key: "screen_remove_funds_display_text_max_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have any activity on this account yet
      static let screen_household_analytics_screen_no_transection_title = Rswift.StringResource(key: "screen_household_analytics_screen_no_transection_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have %d cards
      static let screen_cards_display_text_cards_count = Rswift.StringResource(key: "screen_cards_display_text_cards_count", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have %d cards
      static let screen_topup_card_selection_display_text_heading_cards = Rswift.StringResource(key: "screen_topup_card_selection_display_text_heading_cards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have 1 card
      static let screen_cards_display_text_cards_count_1 = Rswift.StringResource(key: "screen_cards_display_text_cards_count_1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have 1 card
      static let screen_topup_card_selection_display_text_heading_1_card = Rswift.StringResource(key: "screen_topup_card_selection_display_text_heading_1_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have been added to a Household plan by %@
      static let screen_household_welcome_accept_invitation_title = Rswift.StringResource(key: "screen_household_welcome_accept_invitation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have been bumped up by %d spots.
      static let screen_waiting_list_rank_invitees_list_subtitle_text = Rswift.StringResource(key: "screen_waiting_list_rank_invitees_list_subtitle_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have consumed the limit for the amount you can send at this time. To send money, please wait for %@ hours from the time you added %@.
      static let common_display_text_cooling_period_limit_consumed_error = Rswift.StringResource(key: "common_display_text_cooling_period_limit_consumed_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have denied YAP access to camera. To allow YAP to use camera go to settings
      static let common_display_text_permission_camera = Rswift.StringResource(key: "common_display_text_permission_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have exceeded your daily transaction limit
      static let common_display_text_daily_limit_error_multiple_transactions = Rswift.StringResource(key: "common_display_text_daily_limit_error_multiple_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have exceeded your limit for held on transactions, please enter an amount less than %@
      static let common_display_text_on_hold_limit_error = Rswift.StringResource(key: "common_display_text_on_hold_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have full control of your card!  Set limits against spending online, abroad, retail and at an ATM
      static let screen_yfy_up_and_running_goal_four_description = Rswift.StringResource(key: "screen_yfy_up_and_running_goal_four_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have insufficient balance in your account to purchase this package
      static let screen_yap_house_hold_confirm_payment_display_text_amount_error = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_amount_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have moved %@  to your main debit card
      static let screen_success_remove_funds_transaction_display_text_success_heading = Rswift.StringResource(key: "screen_success_remove_funds_transaction_display_text_success_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have now added %@ to your account
      static let screen_topup_success_display_text_success_transaction_message = Rswift.StringResource(key: "screen_topup_success_display_text_success_transaction_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have sent
      static let screen_cash_pickup_funds_transfer_display_text_amount_heading = Rswift.StringResource(key: "screen_cash_pickup_funds_transfer_display_text_amount_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have sent
      static let screen_domestic_funds_transfer_display_text_amount_heading = Rswift.StringResource(key: "screen_domestic_funds_transfer_display_text_amount_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have sent
      static let screen_international_funds_transfer_display_text_amount_heading = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_amount_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have sent
      static let screen_y2y_funds_transfer_success_display_text_transfer = Rswift.StringResource(key: "screen_y2y_funds_transfer_success_display_text_transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have successfully sent
      static let screen_iban_send_money_success_prefix_message_display_text = Rswift.StringResource(key: "screen_iban_send_money_success_prefix_message_display_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have topped up with %@  from your main debit card
      static let screen_success_funds_transaction_display_text_success_heading = Rswift.StringResource(key: "screen_success_funds_transaction_display_text_success_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You referred %d friends! %@
      static let screen_waiting_list_rank_invitees_list_title_text = Rswift.StringResource(key: "screen_waiting_list_rank_invitees_list_title_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You're all set
      static let screen_passcode_success_display_text_heading = Rswift.StringResource(key: "screen_passcode_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your %@ is on its way
      static let screen_card_delivery_status_display_text_info = Rswift.StringResource(key: "screen_card_delivery_status_display_text_info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your %@ is shipped
      static let screen_card_delivery_status_shipped_display_text_info = Rswift.StringResource(key: "screen_card_delivery_status_shipped_display_text_info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your EID is expired. Please ensure you update your card to continue accessing YAP
      static let screen_personal_details_display_text_expired_emirates_id_details = Rswift.StringResource(key: "screen_personal_details_display_text_expired_emirates_id_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your EID is required. Tap to update to ensure account continuity
      static let screen_personal_details_display_text_required_emirates_id_details = Rswift.StringResource(key: "screen_personal_details_display_text_required_emirates_id_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your EID scan has been carried out. We are now processing your account. Please wait for activation to be completed shortly.
      static let view_payment_card_onboarding_stage_two_active_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_two_active_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your EID scan was approved on %@
      static let view_payment_card_onboarding_stage_two_completed_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_two_completed_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your PIN was successfully set on %@
      static let view_payment_card_onboarding_stage_three_completed_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_three_completed_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your account will be deducted by
      static let screen_yap_house_hold_confirm_payment_display_text_account_deducted = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_account_deducted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your achievements
      static let screen_complete_achievement_display_text_screen_title = Rswift.StringResource(key: "screen_complete_achievement_display_text_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is
      static let screen_add_spare_card_display_text_available_balance = Rswift.StringResource(key: "screen_add_spare_card_display_text_available_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_add_funds_display_text_available_balance = Rswift.StringResource(key: "screen_add_funds_display_text_available_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_iban_send_money_available_balance = Rswift.StringResource(key: "screen_iban_send_money_available_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_remove_funds_display_text_available_balance = Rswift.StringResource(key: "screen_remove_funds_display_text_available_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_topup_transfer_display_text_available_balance = Rswift.StringResource(key: "screen_topup_transfer_display_text_available_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_y2y_funds_transfer_display_text_balance = Rswift.StringResource(key: "screen_y2y_funds_transfer_display_text_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your available balance is %@
      static let screen_yap_house_hold_confirm_payment_display_text_balance = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your balace
      static let screen_household_card_screen_admin_account_title = Rswift.StringResource(key: "screen_household_card_screen_admin_account_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your balance from this card will be transferred back to your main account
      static let screen_card_detail_display_text_remove_card_alert_desc = Rswift.StringResource(key: "screen_card_detail_display_text_remove_card_alert_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your bank details
      static let screen_more_tour_guide_bank_detail_title = Rswift.StringResource(key: "screen_more_tour_guide_bank_detail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card has been added successfully
      static let screen_add_topup_card_display_text_succes_title = Rswift.StringResource(key: "screen_add_topup_card_display_text_succes_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card has been blocked
      static let screen_card_blocked_display_text_heading = Rswift.StringResource(key: "screen_card_blocked_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card has been reordered successfully
      static let screen_add_debit_card_completion_display_text_complete_transaction = Rswift.StringResource(key: "screen_add_debit_card_completion_display_text_complete_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is delivered
      static let view_payment_card_onboarding_stage_two_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_two_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is on it's way!
      static let screen_meeting_confirmation_display_text_title = Rswift.StringResource(key: "screen_meeting_confirmation_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is on its way!
      static let screen_household_location_selection_success_display_text_title = Rswift.StringResource(key: "screen_household_location_selection_success_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is on the way
      static let view_payment_card_onboarding_stage_card_on_the_way_title = Rswift.StringResource(key: "view_payment_card_onboarding_stage_card_on_the_way_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is ready to be delivered!
      static let screen_meeting_location_display_text_title = Rswift.StringResource(key: "screen_meeting_location_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is verified and up to date
      static let screen_personal_details_display_text_emirates_id_details = Rswift.StringResource(key: "screen_personal_details_display_text_emirates_id_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card is verified and up to date
      static let screen_personal_details_display_text_emirates_id_details_update = Rswift.StringResource(key: "screen_personal_details_display_text_emirates_id_details_update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card was delieverd on %@
      static let view_payment_card_onboarding_stage_completed_subheading = Rswift.StringResource(key: "view_payment_card_onboarding_stage_completed_subheading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your card will be delivered to:
      static let screen_household_location_selection_success_address_display_text_heading = Rswift.StringResource(key: "screen_household_location_selection_success_address_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your cards
      static let creen_cards_display_text_your_cards = Rswift.StringResource(key: "creen_cards_display_text_your_cards", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your current balance
      static let screen_home_display_tour_guide_text_title_amount = Rswift.StringResource(key: "screen_home_display_tour_guide_text_title_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your email address has been changed to %@
      static let screen_unverified_success_display_text_sub_heading = Rswift.StringResource(key: "screen_unverified_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your email address has been updated to  %@
      static let screen_email_address_success_display_text_sub_heading = Rswift.StringResource(key: "screen_email_address_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your entered amount should be between %@ and %@
      static let common_display_text_transaction_limit_error = Rswift.StringResource(key: "common_display_text_transaction_limit_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your mobile number has been updated to  %@
      static let screen_phone_number_success_display_text_sub_heading = Rswift.StringResource(key: "screen_phone_number_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your new YAP balance is
      static let screen_topup_success_display_text_account_balance_title = Rswift.StringResource(key: "screen_topup_success_display_text_account_balance_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your new passcode has been created successfully
      static let screen_passcode_success_display_text_sub_heading = Rswift.StringResource(key: "screen_passcode_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your new spare card balance is
      static let screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance = Rswift.StringResource(key: "screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your passcode has been updated successfully
      static let screen_change_passcode_success_display_text_sub_heading = Rswift.StringResource(key: "screen_change_passcode_success_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your place in the queue
      static let screen_waiting_list_rank_place_text_heading = Rswift.StringResource(key: "screen_waiting_list_rank_place_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your receipt has been added!
      static let screen_add_receipt_success_text = Rswift.StringResource(key: "screen_add_receipt_success_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your saving %0.0f%%!
      static let screen_yap_house_hold_confirm_payment_display_text_saving = Rswift.StringResource(key: "screen_yap_house_hold_confirm_payment_display_text_saving", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your transfer of %@ to %@ will be sent at the exchange rate of %@  That's %@ from your account
      static let scren_send_money_funds_transfer_confirmation_display_text_amount = Rswift.StringResource(key: "scren_send_money_funds_transfer_confirmation_display_text_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your transfer will be processed on the next business day.
      static let screen_international_funds_transfer_display_text_cutoff_time_uaefts = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_cutoff_time_uaefts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your transfer will be processed on the next business day. Please note there maybe an impact on the FX rate at the time of transfer.
      static let screen_international_funds_transfer_display_text_cutoff_time_swift = Rswift.StringResource(key: "screen_international_funds_transfer_display_text_cutoff_time_swift", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your virtual card can only hold up to %@.
      static let screen_add_funds_display_text_error_card_balance_limit_reached = Rswift.StringResource(key: "screen_add_funds_display_text_error_card_balance_limit_reached", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your virtual card can only hold up to %@. Please enter an amount up to %@ to proceed.
      static let screen_add_funds_display_text_error_card_balance_limit = Rswift.StringResource(key: "screen_add_funds_display_text_error_card_balance_limit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’ll need this to begin using your card
      static let view_payment_card_onboarding_stage_three_initial_subtitle = Rswift.StringResource(key: "view_payment_card_onboarding_stage_three_initial_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’re a Pro!
      static let screen_yfy_home_screen_you_are_a_pro_started_title = Rswift.StringResource(key: "screen_yfy_home_screen_you_are_a_pro_started_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’re all set
      static let screen_change_passcode_success_display_text_heading = Rswift.StringResource(key: "screen_change_passcode_success_display_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’re all set!   Time to top up
      static let screen_set_card_pin_success_display_text_title = Rswift.StringResource(key: "screen_set_card_pin_success_display_text_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’re on our waiting list
      static let screen_waiting_list_dispaly_text_heading = Rswift.StringResource(key: "screen_waiting_list_dispaly_text_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’ve completed this task! Time for a little celebration 🥳
      static let screen_yfy_get_started_goal_completed_description = Rswift.StringResource(key: "screen_yfy_get_started_goal_completed_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’ve now changed your PIN. Please remember this number and don’t share it with anyone.
      static let screen_household_pin_change_success_sub_heading = Rswift.StringResource(key: "screen_household_pin_change_success_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: as an expense advance
      static let screen_iban_send_money_success_postfix_message_display_text = Rswift.StringResource(key: "screen_iban_send_money_success_postfix_message_display_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: per month
      static let screen_yap_house_hold_subscription_selection_display_text_per_month = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_per_month", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: per year
      static let screen_yap_house_hold_subscription_selection_display_text_per_year = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_per_year", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: please scan your Emirates ID
      static let screen_b2c_kyc_home_display_text_sub_heading = Rswift.StringResource(key: "screen_b2c_kyc_home_display_text_sub_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: save 25%
      static let screen_yap_house_hold_subscription_selection_display_text_saving = Rswift.StringResource(key: "screen_yap_house_hold_subscription_selection_display_text_saving", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: transaction
      static let screen_card_analytics_display_text_transaction = Rswift.StringResource(key: "screen_card_analytics_display_text_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: transactions
      static let screen_card_analytics_display_text_transactions = Rswift.StringResource(key: "screen_card_analytics_display_text_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: waiting behind you
      static let screen_waiting_list_rank_behind_text = Rswift.StringResource(key: "screen_waiting_list_rank_behind_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: you reached the top of the Queue!
      static let screen_complete_verification_fss_display_text_heading_text = Rswift.StringResource(key: "screen_complete_verification_fss_display_text_heading_text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: you should now receive an email on
      static let screen_email_verification_b2b_display_text_email_sent = Rswift.StringResource(key: "screen_email_verification_b2b_display_text_email_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: you should now receive an email on
      static let screen_email_verification_b2c_display_text_email_sent = Rswift.StringResource(key: "screen_email_verification_b2c_display_text_email_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ​​Looks like none of your friends use YAP yet. Invite them now to make sending money easier than ever
      static let screen_y2y_display_text_no_yap_contacts = Rswift.StringResource(key: "screen_y2y_display_text_no_yap_contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  Make sure you have your Emirates ID at hand before we proceed
      static func screen_onboarding_congratulations_display_text_meeting_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_display_text_meeting_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_display_text_meeting_note"
        }

        return NSLocalizedString("screen_onboarding_congratulations_display_text_meeting_note", bundle: bundle, comment: "")
      }

      /// Value:  to 
      static func screen_send_money_otp_display_text_subheading_preposition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_otp_display_text_subheading_preposition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_otp_display_text_subheading_preposition"
        }

        return NSLocalizedString("screen_send_money_otp_display_text_subheading_preposition", bundle: bundle, comment: "")
      }

      /// Value: %@ did not accpet your request for a household card
      static func screen_household_card_screen_decline_card_alert_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_card_screen_decline_card_alert_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_decline_card_alert_title"
        }

        let format = NSLocalizedString("screen_household_card_screen_decline_card_alert_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ has been added to your account
      static func screen_yap_house_hold_success_display_text_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_success_display_text_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_title"
        }

        let format = NSLocalizedString("screen_yap_house_hold_success_display_text_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ will be deducted from your account for the delivery of your new card.
      static func screen_card_blocked_display_text_note(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_card_blocked_display_text_note", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_blocked_display_text_note"
        }

        let format = NSLocalizedString("screen_card_blocked_display_text_note", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ will receive an SMS with instructions to download the app and complete sign up
      static func screen_yap_house_hold_success_display_text_direct_message(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_success_display_text_direct_message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_direct_message"
        }

        let format = NSLocalizedString("screen_yap_house_hold_success_display_text_direct_message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ will recieve %@
      static func scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts"
        }

        let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount_uaefts", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: %@'s card is on it's way
      static func screen_yap_house_hold_success_display_text_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_success_display_text_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_heading"
        }

        let format = NSLocalizedString("screen_yap_house_hold_success_display_text_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %d YAP contact
      static func screen_y2y_display_text_yap_contact(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_display_text_yap_contact", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_yap_contact"
        }

        let format = NSLocalizedString("screen_y2y_display_text_yap_contact", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %d YAP contacts
      static func screen_y2y_display_text_yap_contacts(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_display_text_yap_contacts", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_yap_contacts"
        }

        let format = NSLocalizedString("screen_y2y_display_text_yap_contacts", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: 0.00
      static func custom_view_display_text_amount_view_initial_value(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("custom_view_display_text_amount_view_initial_value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "custom_view_display_text_amount_view_initial_value"
        }

        return NSLocalizedString("custom_view_display_text_amount_view_initial_value", bundle: bundle, comment: "")
      }

      /// Value: 12 months
      static func screen_yap_house_hold_subscription_selection_display_text_months(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_months", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_months"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_months", bundle: bundle, comment: "")
      }

      /// Value: 365 days of any YAP membership calls for a celebration! We’re glad you’re enjoying YAP so far.
      static func screen_yfy_you_are_a_pro_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_a_pro_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_a_pro_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_you_are_a_pro_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: A YAP Personal Account has been created for you in less than %@ seconds!
      static func screen_onboarding_congratulations_display_text_sub_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_onboarding_congratulations_display_text_sub_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_display_text_sub_title"
        }

        let format = NSLocalizedString("screen_onboarding_congratulations_display_text_sub_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: A YAP Personal Account has been created for you!
      static func screen_onboarding_congratulations_display_text_sub_title_no_interval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_display_text_sub_title_no_interval", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_display_text_sub_title_no_interval"
        }

        return NSLocalizedString("screen_onboarding_congratulations_display_text_sub_title_no_interval", bundle: bundle, comment: "")
      }

      /// Value: A card for every need
      static func screen_add_card_display_text_feature_spare_card_every_need_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_every_need_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_every_need_title"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_every_need_title", bundle: bundle, comment: "")
      }

      /// Value: A free Mastercard delivered to your doorstep
      static func screen_welcome_b2c_display_text_page2_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page2_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page2_details"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page2_details", bundle: bundle, comment: "")
      }

      /// Value: A fun way to track your progress on YAP, complete missions and explore all the different aspects of the YAP app and account.
      static func screen_more_tour_guide_yap_for_you_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_tour_guide_yap_for_you_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_tour_guide_yap_for_you_description"
        }

        return NSLocalizedString("screen_more_tour_guide_yap_for_you_description", bundle: bundle, comment: "")
      }

      /// Value: A shiny new card available in 4 metallic shades and a world of perks!  Choose from audacious amber, sparkly sterling, romantic rose or glorious granite.
      static func screen_yfy_take_the_leap_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_the_leap_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_the_leap_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_take_the_leap_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: A verification email will now be sent to this address
      static func screen_change_email_display_text_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_display_text_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_display_text_description"
        }

        return NSLocalizedString("screen_change_email_display_text_description", bundle: bundle, comment: "")
      }

      /// Value: AED
      static func common_display_text_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_currency"
        }

        return NSLocalizedString("common_display_text_currency", bundle: bundle, comment: "")
      }

      /// Value: AED
      static func custom_view_display_text_amount_view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("custom_view_display_text_amount_view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "custom_view_display_text_amount_view"
        }

        return NSLocalizedString("custom_view_display_text_amount_view", bundle: bundle, comment: "")
      }

      /// Value: AED
      static func screen_household_currency_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_currency_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_currency_title"
        }

        return NSLocalizedString("screen_household_currency_title", bundle: bundle, comment: "")
      }

      /// Value: AED Balance
      static func screen_transaction_filter_display_text_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_balance"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_balance", bundle: bundle, comment: "")
      }

      /// Value: ATM and cash deposit
      static func screen_menu_display_text_locate_atm_cd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_locate_atm_cd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_locate_atm_cd"
        }

        return NSLocalizedString("screen_menu_display_text_locate_atm_cd", bundle: bundle, comment: "")
      }

      /// Value: ATM withdrawal
      static func screen_card_limits_display_text_atm_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_atm_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_atm_title"
        }

        return NSLocalizedString("screen_card_limits_display_text_atm_title", bundle: bundle, comment: "")
      }

      /// Value: ATM withdrawals
      static func screen_notification_settings_display_text_setting_atm_withdrawl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_atm_withdrawl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_atm_withdrawl"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_atm_withdrawl", bundle: bundle, comment: "")
      }

      /// Value: About us
      static func screen_user_profile_display_text_about_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_about_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_about_us"
        }

        return NSLocalizedString("screen_user_profile_display_text_about_us", bundle: bundle, comment: "")
      }

      /// Value: Accept
      static func screen_household_welcome_accept_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_accept_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_accept_button_title"
        }

        return NSLocalizedString("screen_household_welcome_accept_button_title", bundle: bundle, comment: "")
      }

      /// Value: Account
      static func common_display_text_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_account"
        }

        return NSLocalizedString("common_display_text_account", bundle: bundle, comment: "")
      }

      /// Value: Account
      static func screen_menu_display_text_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_account"
        }

        return NSLocalizedString("screen_menu_display_text_account", bundle: bundle, comment: "")
      }

      /// Value: Account
      static func screen_more_bank_details_display_text_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_account"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_account", bundle: bundle, comment: "")
      }

      /// Value: Account activation pending
      static func common_display_text_account_activation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_account_activation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_account_activation"
        }

        return NSLocalizedString("common_display_text_account_activation", bundle: bundle, comment: "")
      }

      /// Value: Account details
      static func screen_more_home_display_text_your_bank_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_your_bank_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_your_bank_details"
        }

        return NSLocalizedString("screen_more_home_display_text_your_bank_details", bundle: bundle, comment: "")
      }

      /// Value: Account number
      static func screen_add_beneficiary_detail_display_text_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_iban"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_iban", bundle: bundle, comment: "")
      }

      /// Value: Account number
      static func screen_beneficiary_overview_display_text_account_number_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_beneficiary_overview_display_text_account_number_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_beneficiary_overview_display_text_account_number_iban"
        }

        return NSLocalizedString("screen_beneficiary_overview_display_text_account_number_iban", bundle: bundle, comment: "")
      }

      /// Value: Add
      static func common_button_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_add"
        }

        return NSLocalizedString("common_button_add", bundle: bundle, comment: "")
      }

      /// Value: Add
      static func screen_add_funds_button_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_funds_button_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_button_add"
        }

        return NSLocalizedString("screen_add_funds_button_add", bundle: bundle, comment: "")
      }

      /// Value: Add a new card
      static func screen_household_card_screen_add_new_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_add_new_card_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_add_new_card_title"
        }

        return NSLocalizedString("screen_household_card_screen_add_new_card_title", bundle: bundle, comment: "")
      }

      /// Value: Add a new card
      static func screen_topup_card_selection_display_text_add_new_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_add_new_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_add_new_card"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_add_new_card", bundle: bundle, comment: "")
      }

      /// Value: Add a note
      static func screen_transaction_details_display_text_add_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_add_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_add_note"
        }

        return NSLocalizedString("screen_transaction_details_display_text_add_note", bundle: bundle, comment: "")
      }

      /// Value: Add a receipt
      static func screen_transaction_details_display_text_add_receipt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_add_receipt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_add_receipt"
        }

        return NSLocalizedString("screen_transaction_details_display_text_add_receipt", bundle: bundle, comment: "")
      }

      /// Value: Add a remark (optional)
      static func screen_international_funds_transfer_input_text_note_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_input_text_note_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_input_text_note_hint"
        }

        return NSLocalizedString("screen_international_funds_transfer_input_text_note_hint", bundle: bundle, comment: "")
      }

      /// Value: Add a remark (optional)
      static func screen_y2y_funds_transfer_display_text_note_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_display_text_note_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_note_placeholder"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_display_text_note_placeholder", bundle: bundle, comment: "")
      }

      /// Value: Add a spare card
      static func screen_add_spare_card_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_title"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Add a virtual card instantly
      static func screen_add_card_display_text_feature_spare_card_add_instantly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_add_instantly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_add_instantly"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_add_instantly", bundle: bundle, comment: "")
      }

      /// Value: Add a virtual spare card
      static func screen_add_card_display_text_title_spare_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_title_spare_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_title_spare_card"
        }

        return NSLocalizedString("screen_add_card_display_text_title_spare_card", bundle: bundle, comment: "")
      }

      /// Value: Add another receipt
      static func screen_add_receipt_success_add_another_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_receipt_success_add_another_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_receipt_success_add_another_text"
        }

        return NSLocalizedString("screen_add_receipt_success_add_another_text", bundle: bundle, comment: "")
      }

      /// Value: Add beneficiary
      static func screen_add_beneficiary_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_title"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Add card
      static func screen_cards_display_text_add_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_add_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_add_card"
        }

        return NSLocalizedString("screen_cards_display_text_add_card", bundle: bundle, comment: "")
      }

      /// Value: Add card
      static func screen_cards_home_tour_guide_add_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_home_tour_guide_add_card_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_home_tour_guide_add_card_title"
        }

        return NSLocalizedString("screen_cards_home_tour_guide_add_card_title", bundle: bundle, comment: "")
      }

      /// Value: Add card
      static func screen_topup_card_selection_display_text_add_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_add_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_add_card"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_add_card", bundle: bundle, comment: "")
      }

      /// Value: Add card name
      static func screen_change_card_name_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_card_name_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_card_name_display_text_title"
        }

        return NSLocalizedString("screen_change_card_name_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Add first name
      static func screen_add_beneficiary_detail_input_text_first_name_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_input_text_first_name_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_input_text_first_name_hint"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_input_text_first_name_hint", bundle: bundle, comment: "")
      }

      /// Value: Add funds
      static func screen_add_funds_display_text_add_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_funds_display_text_add_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_add_funds"
        }

        return NSLocalizedString("screen_add_funds_display_text_add_funds", bundle: bundle, comment: "")
      }

      /// Value: Add funds
      static func screen_card_detail_button_add_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_add_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_add_funds"
        }

        return NSLocalizedString("screen_card_detail_button_add_funds", bundle: bundle, comment: "")
      }

      /// Value: Add last name
      static func screen_add_beneficiary_detail_input_text_last_name_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_input_text_last_name_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_input_text_last_name_hint"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_input_text_last_name_hint", bundle: bundle, comment: "")
      }

      /// Value: Add money
      static func screen_yap_it_button_add_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_it_button_add_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_it_button_add_money"
        }

        return NSLocalizedString("screen_yap_it_button_add_money", bundle: bundle, comment: "")
      }

      /// Value: Add money to your YAP card to start spending
      static func view_payment_card_onboarding_stage_four_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_four_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_four_subheading"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_four_subheading", bundle: bundle, comment: "")
      }

      /// Value: Add money to your account
      static func screen_yfy_get_started_text_add_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_text_add_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_text_add_money"
        }

        return NSLocalizedString("screen_yfy_get_started_text_add_money", bundle: bundle, comment: "")
      }

      /// Value: Add money using a card
      static func screen_topup_card_selection_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_title"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Add money using a card
      static func screen_topup_transfer_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_transfer_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_transfer_display_text_screen_title"
        }

        return NSLocalizedString("screen_topup_transfer_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: Add new delivery address
      static func screen_add_spare_card_update_location_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_update_location_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_update_location_display_text_heading"
        }

        return NSLocalizedString("screen_add_spare_card_update_location_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Add nickname
      static func screen_add_beneficiary_detail_input_text_nick_name_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_input_text_nick_name_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_input_text_nick_name_hint"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_input_text_nick_name_hint", bundle: bundle, comment: "")
      }

      /// Value: Add now
      static func screen_send_money_no_contacts_button_title_add_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_no_contacts_button_title_add_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_no_contacts_button_title_add_now"
        }

        return NSLocalizedString("screen_send_money_no_contacts_button_title_add_now", bundle: bundle, comment: "")
      }

      /// Value: Add or remove funds as you need
      static func screen_add_card_display_text_feature_spare_card_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_funds"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_funds", bundle: bundle, comment: "")
      }

      /// Value: Add or upgrade
      static func screen_cards_display_text_add_upgrade_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_add_upgrade_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_add_upgrade_card"
        }

        return NSLocalizedString("screen_cards_display_text_add_upgrade_card", bundle: bundle, comment: "")
      }

      /// Value: Additional requirements
      static func view_payment_card_onboarding_stage_additional_requirement_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_additional_requirement_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_title", bundle: bundle, comment: "")
      }

      /// Value: Address
      static func screen_meeting_location_input_text_address_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_input_text_address_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_input_text_address_title"
        }

        return NSLocalizedString("screen_meeting_location_input_text_address_title", bundle: bundle, comment: "")
      }

      /// Value: Address
      static func screen_more_bank_details_display_text_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_address"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_address", bundle: bundle, comment: "")
      }

      /// Value: Address
      static func screen_personal_details_display_text_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_address"
        }

        return NSLocalizedString("screen_personal_details_display_text_address", bundle: bundle, comment: "")
      }

      /// Value: Alerts and notifications
      static func screen_menu_display_text_alert_and_notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_alert_and_notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_alert_and_notifications"
        }

        return NSLocalizedString("screen_menu_display_text_alert_and_notifications", bundle: bundle, comment: "")
      }

      /// Value: All
      static func screen_notification_settings_display_text_setting_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_all"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_all", bundle: bundle, comment: "")
      }

      /// Value: All beneficiaries
      static func screen_send_money_display_text_all_beneficiaries(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_display_text_all_beneficiaries", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_display_text_all_beneficiaries"
        }

        return NSLocalizedString("screen_send_money_display_text_all_beneficiaries", bundle: bundle, comment: "")
      }

      /// Value: All contacts
      static func screen_y2y_display_button_all_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_button_all_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_button_all_contacts"
        }

        return NSLocalizedString("screen_y2y_display_button_all_contacts", bundle: bundle, comment: "")
      }

      /// Value: Allocate household budgets
      static func screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_allocate_budget", bundle: bundle, comment: "")
      }

      /// Value: Allow your card to be used at retail outlets. This includes restaurants, petrol stations and hospitality venues
      static func screen_card_limits_display_text_retail_payment_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_retail_payment_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_retail_payment_desc"
        }

        return NSLocalizedString("screen_card_limits_display_text_retail_payment_desc", bundle: bundle, comment: "")
      }

      /// Value: Allow your card to be used for payments outside your current country
      static func screen_card_limits_display_text_payment_abroad_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_payment_abroad_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_payment_abroad_desc"
        }

        return NSLocalizedString("screen_card_limits_display_text_payment_abroad_desc", bundle: bundle, comment: "")
      }

      /// Value: Allow your card to be used for purchases made over the internet
      static func screen_card_limits_display_text_online_transaction_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_online_transaction_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_online_transaction_desc"
        }

        return NSLocalizedString("screen_card_limits_display_text_online_transaction_desc", bundle: bundle, comment: "")
      }

      /// Value: Allow your card to withdraw from cash machines
      static func screen_card_limits_display_text_atm_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_atm_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_atm_desc"
        }

        return NSLocalizedString("screen_card_limits_display_text_atm_desc", bundle: bundle, comment: "")
      }

      /// Value: Almost there!
      static func screen_b2c_eid_info_review_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_title"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Already have an account? Sign in
      static func screen_home_display_text_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_text_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_text_sign_in"
        }

        return NSLocalizedString("screen_home_display_text_sign_in", bundle: bundle, comment: "")
      }

      /// Value: Always remember this code and don't share it with anyone
      static func screen_household_pin_setup_success_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_success_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_success_sub_heading"
        }

        return NSLocalizedString("screen_household_pin_setup_success_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Amount to transfer
      static func screen_household_amount_to_transfer_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_amount_to_transfer_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_amount_to_transfer_title"
        }

        return NSLocalizedString("screen_household_amount_to_transfer_title", bundle: bundle, comment: "")
      }

      /// Value: An %@ fee will be charged to your YAP account for this transfer
      static func screen_cash_pickup_funds_display_text_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_cash_pickup_funds_display_text_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_pickup_funds_display_text_fee"
        }

        let format = NSLocalizedString("screen_cash_pickup_funds_display_text_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Analytics
      static func screen_card_analytics_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_analytics_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_title"
        }

        return NSLocalizedString("screen_card_analytics_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Analytics
      static func screen_household_card_analytics_screen_Analytics_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_analytics_screen_Analytics_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_analytics_screen_Analytics_button_title"
        }

        return NSLocalizedString("screen_household_card_analytics_screen_Analytics_button_title", bundle: bundle, comment: "")
      }

      /// Value: Analytics
      static func screen_menu_display_text_analytics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_analytics", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_analytics"
        }

        return NSLocalizedString("screen_menu_display_text_analytics", bundle: bundle, comment: "")
      }

      /// Value: And while that's great, this YAP account is only for adults. Don't worry though, you can speak to your parents about getting you started with YAP Young or wait till you're %d :)
      static func screen_kyc_information_error_display_text_explanation_under_age(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_kyc_information_error_display_text_explanation_under_age", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_explanation_under_age"
        }

        let format = NSLocalizedString("screen_kyc_information_error_display_text_explanation_under_age", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: App notifications
      static func screen_user_profile_display_text_app_notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_app_notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_app_notifications"
        }

        return NSLocalizedString("screen_user_profile_display_text_app_notifications", bundle: bundle, comment: "")
      }

      /// Value: Apply filters
      static func screen_transaction_filter_button_apply_filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_button_apply_filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_button_apply_filter"
        }

        return NSLocalizedString("screen_transaction_filter_button_apply_filter", bundle: bundle, comment: "")
      }

      /// Value: Are you sure you want to cancel this subscription?
      static func screen_household_cancel_subscription_cancel_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_cancel_subscription_cancel_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_cancel_subscription_cancel_title"
        }

        return NSLocalizedString("screen_household_cancel_subscription_cancel_title", bundle: bundle, comment: "")
      }

      /// Value: Are you sure you want to exit?
      static func screen_add_beneficiary_detail_display_text_cancel_popup_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_cancel_popup_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_cancel_popup_title"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_cancel_popup_title", bundle: bundle, comment: "")
      }

      /// Value: Are you sure you want to log out
      static func screen_profile_action_display_text_logout_popups_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_profile_action_display_text_logout_popups_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_profile_action_display_text_logout_popups_message"
        }

        return NSLocalizedString("screen_profile_action_display_text_logout_popups_message", bundle: bundle, comment: "")
      }

      /// Value: Automatic renewal
      static func screen_household_renewable_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_renewable_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_renewable_title"
        }

        return NSLocalizedString("screen_household_renewable_title", bundle: bundle, comment: "")
      }

      /// Value: Awesome!
      static func screen_email_address_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_address_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_address_success_display_text_heading"
        }

        return NSLocalizedString("screen_email_address_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Awesome! We’re as excited as you are. We’ll send you an SMS as soon as we’ve launched!
      static func screen_waiting_list_dispaly_text_awsome_alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_dispaly_text_awsome_alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_dispaly_text_awsome_alert"
        }

        return NSLocalizedString("screen_waiting_list_dispaly_text_awsome_alert", bundle: bundle, comment: "")
      }

      /// Value: Back to card
      static func screen_success_funds_transaction_display_text_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_success_funds_transaction_display_text_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_funds_transaction_display_text_button"
        }

        return NSLocalizedString("screen_success_funds_transaction_display_text_button", bundle: bundle, comment: "")
      }

      /// Value: Back to dashboard
      static func screen_cash_pickup_funds_transfer_back_to_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cash_pickup_funds_transfer_back_to_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_pickup_funds_transfer_back_to_dashboard"
        }

        return NSLocalizedString("screen_cash_pickup_funds_transfer_back_to_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Back to dashboard
      static func screen_international_funds_transfer_back_to_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_back_to_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_back_to_dashboard"
        }

        return NSLocalizedString("screen_international_funds_transfer_back_to_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Back to dashboard
      static func screen_unverified_display_button_back_to_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_unverified_display_button_back_to_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_unverified_display_button_back_to_dashboard"
        }

        return NSLocalizedString("screen_unverified_display_button_back_to_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Bank
      static func screen_more_bank_details_display_text_bank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_bank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_bank"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_bank", bundle: bundle, comment: "")
      }

      /// Value: Bank branch
      static func screen_bank_details_display_text_branch_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_display_text_branch_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_display_text_branch_name"
        }

        return NSLocalizedString("screen_bank_details_display_text_branch_name", bundle: bundle, comment: "")
      }

      /// Value: Bank city
      static func screen_bank_details_display_text_bank_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_display_text_bank_city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_display_text_bank_city"
        }

        return NSLocalizedString("screen_bank_details_display_text_bank_city", bundle: bundle, comment: "")
      }

      /// Value: Bank name
      static func screen_bank_details_display_text_bank_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_display_text_bank_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_display_text_bank_name"
        }

        return NSLocalizedString("screen_bank_details_display_text_bank_name", bundle: bundle, comment: "")
      }

      /// Value: Bank transfer
      static func screen_add_beneficiary_display_text_transfer_type_bank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_bank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_transfer_type_bank"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_bank", bundle: bundle, comment: "")
      }

      /// Value: Bank transfer
      static func screen_topup_type_selection_button_bank_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_type_selection_button_bank_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_type_selection_button_bank_transfer"
        }

        return NSLocalizedString("screen_topup_type_selection_button_bank_transfer", bundle: bundle, comment: "")
      }

      /// Value: Bank transfer successful!
      static func screen_domestic_funds_transfer_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_domestic_funds_transfer_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_domestic_funds_transfer_display_text_title"
        }

        return NSLocalizedString("screen_domestic_funds_transfer_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Bank transfer successful!
      static func screen_international_funds_transfer_display_text_title_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_title_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_title_success"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_title_success", bundle: bundle, comment: "")
      }

      /// Value: Bank your way and become a YAP pro
      static func screen_more_home_display_text_bank_your_way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_bank_your_way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_bank_your_way"
        }

        return NSLocalizedString("screen_more_home_display_text_bank_your_way", bundle: bundle, comment: "")
      }

      /// Value: Bank your way and become a YAP pro
      static func screen_more_home_display_text_yap_for_you_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_yap_for_you_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_yap_for_you_description"
        }

        return NSLocalizedString("screen_more_home_display_text_yap_for_you_description", bundle: bundle, comment: "")
      }

      /// Value: Begin using your YAP card by topping up your card with AED 50 or more
      static func screen_set_card_pin_success_display_text_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_success_display_text_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_success_display_text_description"
        }

        return NSLocalizedString("screen_set_card_pin_success_display_text_description", bundle: bundle, comment: "")
      }

      /// Value: Beneficiary account details
      static func screen_beneficiary_account_details_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_beneficiary_account_details_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_beneficiary_account_details_display_text_title"
        }

        return NSLocalizedString("screen_beneficiary_account_details_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Beneficiary has been added successfully
      static func screen_add_beneficiary_detail_display_text_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_alert_title"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_alert_title", bundle: bundle, comment: "")
      }

      /// Value: Beneficiary overview
      static func screen_beneficiary_overview_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_beneficiary_overview_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_beneficiary_overview_display_text_title"
        }

        return NSLocalizedString("screen_beneficiary_overview_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Better together
      static func screen_yfy_home_screen_better_togather_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_better_togather_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_better_togather_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_better_togather_title", bundle: bundle, comment: "")
      }

      /// Value: Black Metal Card
      static func commone_disply_text_card_name_metal_black(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_metal_black", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_metal_black"
        }

        return NSLocalizedString("commone_disply_text_card_name_metal_black", bundle: bundle, comment: "")
      }

      /// Value: Black Premium Card
      static func commone_disply_text_card_name_premium_black(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_premium_black", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_premium_black"
        }

        return NSLocalizedString("commone_disply_text_card_name_premium_black", bundle: bundle, comment: "")
      }

      /// Value: Block and report
      static func screen_report_card_button_block_report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_button_block_report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_button_block_report"
        }

        return NSLocalizedString("screen_report_card_button_block_report", bundle: bundle, comment: "")
      }

      /// Value: Block card permanently
      static func screen_report_card_display_text_block_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_block_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_block_alert_title"
        }

        return NSLocalizedString("screen_report_card_display_text_block_alert_title", bundle: bundle, comment: "")
      }

      /// Value: Boost yourself up the queue by %@ for every friend you refer that signs up.🚀
      static func screen_waiting_list_rank_bump_me_up_info_text_bottom(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_bump_me_up_info_text_bottom", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_bump_me_up_info_text_bottom"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_bump_me_up_info_text_bottom", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Branch name
      static func screen_bank_details_input_text_branch_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_input_text_branch_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_input_text_branch_hint"
        }

        return NSLocalizedString("screen_bank_details_input_text_branch_hint", bundle: bundle, comment: "")
      }

      /// Value: Building
      static func common_delivery_status_building(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_delivery_status_building", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_delivery_status_building"
        }

        return NSLocalizedString("common_delivery_status_building", bundle: bundle, comment: "")
      }

      /// Value: Built
      static func common_delivery_status_built(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_delivery_status_built", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_delivery_status_built"
        }

        return NSLocalizedString("common_delivery_status_built", bundle: bundle, comment: "")
      }

      /// Value: Built-in analytics at your fingertips
      static func screen_welcome_b2c_display_text_page3_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page3_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page3_details"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page3_details", bundle: bundle, comment: "")
      }

      /// Value: Bump me up the queue
      static func screen_waiting_list_rank_bump_me_up_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_bump_me_up_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_bump_me_up_text"
        }

        return NSLocalizedString("screen_waiting_list_rank_bump_me_up_text", bundle: bundle, comment: "")
      }

      /// Value: Business
      static func screen_home_button_business(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_button_business", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_button_business"
        }

        return NSLocalizedString("screen_home_button_business", bundle: bundle, comment: "")
      }

      /// Value: Business
      static func screen_menu_display_text_business(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_business", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_business"
        }

        return NSLocalizedString("screen_menu_display_text_business", bundle: bundle, comment: "")
      }

      /// Value: By clicking “Use %@” you agree to our
      static func screen_system_permission_text_title_terms_and_conditions(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_system_permission_text_title_terms_and_conditions", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_title_terms_and_conditions"
        }

        let format = NSLocalizedString("screen_system_permission_text_title_terms_and_conditions", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: By creating a PIN you agree to our Terms & Conditions
      static func screen_confirm_card_pin_display_text_terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_card_pin_display_text_terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_card_pin_display_text_terms_and_conditions"
        }

        return NSLocalizedString("screen_confirm_card_pin_display_text_terms_and_conditions", bundle: bundle, comment: "")
      }

      /// Value: By creating a passcode you agree to our Terms & Conditions
      static func screen_create_passcode_display_text_terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_display_text_terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_display_text_terms_and_conditions"
        }

        return NSLocalizedString("screen_create_passcode_display_text_terms_and_conditions", bundle: bundle, comment: "")
      }

      /// Value: CRS and FATCA Terms and Conditions
      static func screen_meeting_location_text_terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_text_terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_text_terms_and_conditions"
        }

        return NSLocalizedString("screen_meeting_location_text_terms_and_conditions", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func common_button_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_cancel"
        }

        return NSLocalizedString("common_button_cancel", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func screen_profile_action_display_text_logout_popups_cencel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_profile_action_display_text_logout_popups_cencel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_profile_action_display_text_logout_popups_cencel"
        }

        return NSLocalizedString("screen_profile_action_display_text_logout_popups_cencel", bundle: bundle, comment: "")
      }

      /// Value: Cancel subscription
      static func screen_household_cancel_subscription_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_cancel_subscription_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_cancel_subscription_title"
        }

        return NSLocalizedString("screen_household_cancel_subscription_title", bundle: bundle, comment: "")
      }

      /// Value: Cancellation will come into effect following the 12-month contract period
      static func screen_household_cancel_subscription_cancel_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_cancel_subscription_cancel_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_cancel_subscription_cancel_message"
        }

        return NSLocalizedString("screen_household_cancel_subscription_cancel_message", bundle: bundle, comment: "")
      }

      /// Value: Card
      static func screen_topup_card_details_display_text_placeholder_card_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_placeholder_card_number"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_number", bundle: bundle, comment: "")
      }

      /// Value: Card
      static func screen_topup_type_selection_button_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_type_selection_button_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_type_selection_button_card"
        }

        return NSLocalizedString("screen_topup_type_selection_button_card", bundle: bundle, comment: "")
      }

      /// Value: Card balance
      static func screen_card_detail_display_text_card_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_display_text_card_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_display_text_card_balance"
        }

        return NSLocalizedString("screen_card_detail_display_text_card_balance", bundle: bundle, comment: "")
      }

      /// Value: Card details
      static func screen_payment_card_detail_button_card_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_payment_card_detail_button_card_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_payment_card_detail_button_card_details"
        }

        return NSLocalizedString("screen_payment_card_detail_button_card_details", bundle: bundle, comment: "")
      }

      /// Value: Card details
      static func screen_topup_card_details_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_title"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Card fee
      static func screen_add_spare_card_display_text_card_fee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_card_fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_card_fee"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_card_fee", bundle: bundle, comment: "")
      }

      /// Value: Card holder's profile
      static func screen_household_cardholder_profile_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_cardholder_profile_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_cardholder_profile_title"
        }

        return NSLocalizedString("screen_household_cardholder_profile_title", bundle: bundle, comment: "")
      }

      /// Value: Card nickname
      static func screen_topup_card_details_display_text_placeholder_card_nickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_placeholder_card_nickname"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_nickname", bundle: bundle, comment: "")
      }

      /// Value: Card removed successfully.
      static func screen_topup_card_details_button_remove_card_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_button_remove_card_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_button_remove_card_message"
        }

        return NSLocalizedString("screen_topup_card_details_button_remove_card_message", bundle: bundle, comment: "")
      }

      /// Value: Card statements
      static func screen_card_statements_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_statements_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_statements_display_text_title"
        }

        return NSLocalizedString("screen_card_statements_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Card successfully removed!
      static func screen_cards_display_text_card_removed_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_card_removed_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_card_removed_success"
        }

        return NSLocalizedString("screen_cards_display_text_card_removed_success", bundle: bundle, comment: "")
      }

      /// Value: Cards
      static func screen_household_card_analytics_screen_card_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_analytics_screen_card_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_analytics_screen_card_button_title"
        }

        return NSLocalizedString("screen_household_card_analytics_screen_card_button_title", bundle: bundle, comment: "")
      }

      /// Value: Cash pickup
      static func screen_add_beneficiary_display_text_transfer_type_cash_pickup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_cash_pickup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_transfer_type_cash_pickup"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_cash_pickup", bundle: bundle, comment: "")
      }

      /// Value: Cash transfer successful
      static func screen_cash_funds_transfer_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cash_funds_transfer_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_funds_transfer_display_text_title"
        }

        return NSLocalizedString("screen_cash_funds_transfer_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Cash transfer successful!
      static func screen_cash_pickup_funds_transfer_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cash_pickup_funds_transfer_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_pickup_funds_transfer_display_text_title"
        }

        return NSLocalizedString("screen_cash_pickup_funds_transfer_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Category
      static func screen_card_analytics_display_text_category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_analytics_display_text_category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_category"
        }

        return NSLocalizedString("screen_card_analytics_display_text_category", bundle: bundle, comment: "")
      }

      /// Value: Change
      static func common_button_change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_change", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_change"
        }

        return NSLocalizedString("common_button_change", bundle: bundle, comment: "")
      }

      /// Value: Change PIN
      static func screen_card_detail_button_change_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_change_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_change_pin"
        }

        return NSLocalizedString("screen_card_detail_button_change_pin", bundle: bundle, comment: "")
      }

      /// Value: Change PIN
      static func screen_change_pin_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_display_text_heading"
        }

        return NSLocalizedString("screen_change_pin_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Change card's name
      static func screen_card_detail_button_change_card_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_change_card_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_change_card_name"
        }

        return NSLocalizedString("screen_card_detail_button_change_card_name", bundle: bundle, comment: "")
      }

      /// Value: Change currency
      static func screen_add_beneficiary_detail_display_text_change_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_change_currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_change_currency"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_change_currency", bundle: bundle, comment: "")
      }

      /// Value: Change email
      static func screen_change_email_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_display_text_heading"
        }

        return NSLocalizedString("screen_change_email_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Change location
      static func screen_add_spare_card_button_change_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_button_change_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_button_change_location"
        }

        return NSLocalizedString("screen_add_spare_card_button_change_location", bundle: bundle, comment: "")
      }

      /// Value: Change mobile number
      static func screen_change_phone_number_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_phone_number_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_phone_number_display_text_heading"
        }

        return NSLocalizedString("screen_change_phone_number_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Change paln
      static func screen_yap_house_hold_confirm_payment_display_text_change_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_change_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_change_plan"
        }

        return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_change_plan", bundle: bundle, comment: "")
      }

      /// Value: Check back later to see the category updated
      static func screen_transaction_details_display_text_wait_for_category_to_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_wait_for_category_to_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_wait_for_category_to_update"
        }

        return NSLocalizedString("screen_transaction_details_display_text_wait_for_category_to_update", bundle: bundle, comment: "")
      }

      /// Value: Choose a unique colour and give it a nickname
      static func screen_add_card_display_text_feature_spare_card_nick_name_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_nick_name_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_nick_name_title"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_nick_name_title", bundle: bundle, comment: "")
      }

      /// Value: Choose a virtual or physical card
      static func screen_add_card_display_text_feature_spare_card_virtual_or_physical_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_virtual_or_physical_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_virtual_or_physical_title"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_virtual_or_physical_title", bundle: bundle, comment: "")
      }

      /// Value: Choose email app
      static func screen_mail_action_sheet_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_mail_action_sheet_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_mail_action_sheet_display_text_title"
        }

        return NSLocalizedString("screen_mail_action_sheet_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Choose photo
      static func screen_user_profile_display_text_choose_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_choose_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_choose_photo"
        }

        return NSLocalizedString("screen_user_profile_display_text_choose_photo", bundle: bundle, comment: "")
      }

      /// Value: Choose which card you want to top up with
      static func screen_topup_card_selection_display_text_sub_heading_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_sub_heading_cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_sub_heading_cards"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_sub_heading_cards", bundle: bundle, comment: "")
      }

      /// Value: Choose your location below. We will also call you to verify this address.
      static func screen_meeting_location_display_text_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_display_text_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_display_text_subtitle"
        }

        return NSLocalizedString("screen_meeting_location_display_text_subtitle", bundle: bundle, comment: "")
      }

      /// Value: City
      static func screen_bank_details_input_text_city_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_input_text_city_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_input_text_city_hint"
        }

        return NSLocalizedString("screen_bank_details_input_text_city_hint", bundle: bundle, comment: "")
      }

      /// Value: Clear filters
      static func screen_transaction_filter_button_clear_filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_button_clear_filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_button_clear_filter"
        }

        return NSLocalizedString("screen_transaction_filter_button_clear_filter", bundle: bundle, comment: "")
      }

      /// Value: Click 'block and report' to confirm that your card has been lost, damaged or stolen. We will immediately block your card and report it to our security team.
      static func screen_report_card_display_text_block_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_block_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_block_note"
        }

        return NSLocalizedString("screen_report_card_display_text_block_note", bundle: bundle, comment: "")
      }

      /// Value: Click here
      static func screen_email_verified_popup_button_title_click_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verified_popup_button_title_click_here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_button_title_click_here"
        }

        return NSLocalizedString("screen_email_verified_popup_button_title_click_here", bundle: bundle, comment: "")
      }

      /// Value: Click here if you’d like to change your email address 
      static func screen_email_verified_popup_display_text_click_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verified_popup_display_text_click_here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_display_text_click_here"
        }

        return NSLocalizedString("screen_email_verified_popup_display_text_click_here", bundle: bundle, comment: "")
      }

      /// Value: Click here to add a name to your card, view statements or remove it from your account. 
      static func screen_primary_card_detail_tour_guide_more_icon_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_more_icon_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_more_icon_description"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_more_icon_description", bundle: bundle, comment: "")
      }

      /// Value: Click here to add a new card to your account. You can create a spare virtual card or upgrade to Prime or Metal! 
      static func screen_cards_home_tour_guide_add_card_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_home_tour_guide_add_card_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_home_tour_guide_add_card_description"
        }

        return NSLocalizedString("screen_cards_home_tour_guide_add_card_description", bundle: bundle, comment: "")
      }

      /// Value: Click here to search for specific transactions in your account history.
      static func screen_home_display_tour_guide_text_desc_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_desc_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_desc_search"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_desc_search", bundle: bundle, comment: "")
      }

      /// Value: Close
      static func screen_waiting_list_dispaly_text_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_dispaly_text_close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_dispaly_text_close"
        }

        return NSLocalizedString("screen_waiting_list_dispaly_text_close", bundle: bundle, comment: "")
      }

      /// Value: Coming soon
      static func commn_display_text_comming_soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commn_display_text_comming_soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commn_display_text_comming_soon"
        }

        return NSLocalizedString("commn_display_text_comming_soon", bundle: bundle, comment: "")
      }

      /// Value: Company name
      static func screen_company_name_display_text_company_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_company_name_display_text_company_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_company_name_display_text_company_name"
        }

        return NSLocalizedString("screen_company_name_display_text_company_name", bundle: bundle, comment: "")
      }

      /// Value: Complete a renewal
      static func screen_yfy_you_are_pro_text_complete_a_renewal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_complete_a_renewal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_complete_a_renewal"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_complete_a_renewal", bundle: bundle, comment: "")
      }

      /// Value: Complete verification
      static func screen_b2c_kyc_home_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_kyc_home_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_kyc_home_display_text_screen_title"
        }

        return NSLocalizedString("screen_b2c_kyc_home_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: Complete verification
      static func screen_household_welcome_complete_verification_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_complete_verification_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_complete_verification_button_title"
        }

        return NSLocalizedString("screen_household_welcome_complete_verification_button_title", bundle: bundle, comment: "")
      }

      /// Value: Complete verification
      static func screen_lite_dashboard_button_complete_verification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_lite_dashboard_button_complete_verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_lite_dashboard_button_complete_verification"
        }

        return NSLocalizedString("screen_lite_dashboard_button_complete_verification", bundle: bundle, comment: "")
      }

      /// Value: Complete verification
      static func screen_onboarding_congratulations_button_complete_verification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_button_complete_verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_button_complete_verification"
        }

        return NSLocalizedString("screen_onboarding_congratulations_button_complete_verification", bundle: bundle, comment: "")
      }

      /// Value: Completed
      static func view_payment_card_onboarding_stage_completed_label_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_completed_label_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_completed_label_text"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_completed_label_text", bundle: bundle, comment: "")
      }

      /// Value: Confirm
      static func common_button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_confirm"
        }

        return NSLocalizedString("common_button_confirm", bundle: bundle, comment: "")
      }

      /// Value: Confirm
      static func screen_b2c_eid_info_review_button_title_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_button_title_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_button_title_confirm"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_button_title_confirm", bundle: bundle, comment: "")
      }

      /// Value: Confirm IBAN
      static func screen_sdd_beneficiary_display_confirm_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sdd_beneficiary_display_confirm_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sdd_beneficiary_display_confirm_iban"
        }

        return NSLocalizedString("screen_sdd_beneficiary_display_confirm_iban", bundle: bundle, comment: "")
      }

      /// Value: Confirm PIN
      static func screen_confirm_card_pin_display_button_confirm_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_card_pin_display_button_confirm_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_card_pin_display_button_confirm_pin"
        }

        return NSLocalizedString("screen_confirm_card_pin_display_button_confirm_pin", bundle: bundle, comment: "")
      }

      /// Value: Confirm email address
      static func screen_change_email_placeholder_confirm_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_placeholder_confirm_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_placeholder_confirm_email_address"
        }

        return NSLocalizedString("screen_change_email_placeholder_confirm_email_address", bundle: bundle, comment: "")
      }

      /// Value: Confirm location
      static func screen_add_spare_card_button_confirm_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_button_confirm_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_button_confirm_location"
        }

        return NSLocalizedString("screen_add_spare_card_button_confirm_location", bundle: bundle, comment: "")
      }

      /// Value: Confirm location
      static func screen_meeting_location_button_confirm_selected_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_button_confirm_selected_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_button_confirm_selected_location"
        }

        return NSLocalizedString("screen_meeting_location_button_confirm_selected_location", bundle: bundle, comment: "")
      }

      /// Value: Confirm mobile number
      static func screen_yap_house_hold_user_info_contact_display_text_confirm_mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_user_info_contact_display_text_confirm_mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_user_info_contact_display_text_confirm_mobile"
        }

        return NSLocalizedString("screen_yap_house_hold_user_info_contact_display_text_confirm_mobile", bundle: bundle, comment: "")
      }

      /// Value: Confirm payment
      static func screen_yap_house_hold_confirm_payment_display_text_toolbar_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_toolbar_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_toolbar_title"
        }

        return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_toolbar_title", bundle: bundle, comment: "")
      }

      /// Value: Confirm purchase
      static func screen_add_spare_card_button_confirm_purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_button_confirm_purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_button_confirm_purchase"
        }

        return NSLocalizedString("screen_add_spare_card_button_confirm_purchase", bundle: bundle, comment: "")
      }

      /// Value: Confirm transfer
      static func screen_send_money_otp_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_otp_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_otp_display_text_title"
        }

        return NSLocalizedString("screen_send_money_otp_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Congrats! You were bumped up by %@ spots! Keep on referring to get to the top faster! 
      static func screen_waiting_list_rank_bumped_notification_text(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_bumped_notification_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_bumped_notification_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_bumped_notification_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Congrats, %@!
      static func screen_onboarding_congratulations_display_text_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_onboarding_congratulations_display_text_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_display_text_title"
        }

        let format = NSLocalizedString("screen_onboarding_congratulations_display_text_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Contact us
      static func screen_menu_display_text_contact_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_contact_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_contact_us"
        }

        return NSLocalizedString("screen_menu_display_text_contact_us", bundle: bundle, comment: "")
      }

      /// Value: Continue
      static func screen_household_pin_setup_continue_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_continue_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_continue_button_title"
        }

        return NSLocalizedString("screen_household_pin_setup_continue_button_title", bundle: bundle, comment: "")
      }

      /// Value: Copy
      static func common_display_text_copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_copy"
        }

        return NSLocalizedString("common_display_text_copy", bundle: bundle, comment: "")
      }

      /// Value: Copy
      static func screen_menu_display_text_copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_copy"
        }

        return NSLocalizedString("screen_menu_display_text_copy", bundle: bundle, comment: "")
      }

      /// Value: Country
      static func screen_add_beneficiary_detail_display_text_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_country"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_country", bundle: bundle, comment: "")
      }

      /// Value: Country of residence
      static func screen_add_beneficiary_display_text_select_country_residence_review(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_select_country_residence_review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_select_country_residence_review"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_select_country_residence_review", bundle: bundle, comment: "")
      }

      /// Value: Create PIN
      static func screen_create_card_pin_display_button_create_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_card_pin_display_button_create_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_card_pin_display_button_create_pin"
        }

        return NSLocalizedString("screen_create_card_pin_display_button_create_pin", bundle: bundle, comment: "")
      }

      /// Value: Create PIN
      static func screen_set_card_pin_welcome_button_create_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_welcome_button_create_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_welcome_button_create_pin"
        }

        return NSLocalizedString("screen_set_card_pin_welcome_button_create_pin", bundle: bundle, comment: "")
      }

      /// Value: Create PIN code
      static func screen_household_pin_setup_set_pin_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_set_pin_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_set_pin_button_title"
        }

        return NSLocalizedString("screen_household_pin_setup_set_pin_button_title", bundle: bundle, comment: "")
      }

      /// Value: Create a 4-digit PIN code to access your new card
      static func screen_household_pin_setup_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_heading"
        }

        return NSLocalizedString("screen_household_pin_setup_heading", bundle: bundle, comment: "")
      }

      /// Value: Create a PIN to start using your card
      static func screen_cards_button_set_pin_to_activate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_button_set_pin_to_activate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_button_set_pin_to_activate"
        }

        return NSLocalizedString("screen_cards_button_set_pin_to_activate", bundle: bundle, comment: "")
      }

      /// Value: Create a new 4- to 6-digit passcode​
      static func screen_create_passcode_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_display_text_title"
        }

        return NSLocalizedString("screen_create_passcode_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Create new PIN
      static func screen_change_pin_action_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_action_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_action_button_title"
        }

        return NSLocalizedString("screen_change_pin_action_button_title", bundle: bundle, comment: "")
      }

      /// Value: Create passcode
      static func screen_create_passcode_button_create_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_button_create_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_button_create_passcode"
        }

        return NSLocalizedString("screen_create_passcode_button_create_passcode", bundle: bundle, comment: "")
      }

      /// Value: Create your 4-digit PIN
      static func screen_set_card_pin_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_display_text_title"
        }

        return NSLocalizedString("screen_set_card_pin_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Currency
      static func screen_add_beneficiary_detail_display_text_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_currency"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_currency", bundle: bundle, comment: "")
      }

      /// Value: Current account with no hidden fees
      static func screen_welcome_b2c_display_text_page1_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page1_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page1_details"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page1_details", bundle: bundle, comment: "")
      }

      /// Value: Current achievement
      static func screen_yap_4_you_home_display_text_current_achievement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_4_you_home_display_text_current_achievement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_4_you_home_display_text_current_achievement"
        }

        return NSLocalizedString("screen_yap_4_you_home_display_text_current_achievement", bundle: bundle, comment: "")
      }

      /// Value: Current future payment set
      static func screen_household_future_payment_edit_cell_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_future_payment_edit_cell_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_future_payment_edit_cell_title"
        }

        return NSLocalizedString("screen_household_future_payment_edit_cell_title", bundle: bundle, comment: "")
      }

      /// Value: Current recurring salary
      static func screen_household_current_recurring_salary_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_current_recurring_salary_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_current_recurring_salary_title"
        }

        return NSLocalizedString("screen_household_current_recurring_salary_title", bundle: bundle, comment: "")
      }

      /// Value: Customize your card’s usage by setting limits on where and how it can be used.
      static func screen_primary_card_detail_tour_guide_set_limit_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_set_limit_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_set_limit_description"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_set_limit_description", bundle: bundle, comment: "")
      }

      /// Value: Daily
      static func screen_household_daily_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_daily_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_daily_title"
        }

        return NSLocalizedString("screen_household_daily_title", bundle: bundle, comment: "")
      }

      /// Value: Daily transaction graph
      static func screen_home_display_tour_guide_text_title_graph(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_title_graph", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_title_graph"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_title_graph", bundle: bundle, comment: "")
      }

      /// Value: Damaged card
      static func screen_report_card_button_damage_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_button_damage_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_button_damage_card"
        }

        return NSLocalizedString("screen_report_card_button_damage_card", bundle: bundle, comment: "")
      }

      /// Value: Date of birth
      static func screen_b2c_eid_info_review_display_text_dob_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_dob_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_dob_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_dob_heading", bundle: bundle, comment: "")
      }

      /// Value: Date of transfer 
      static func screen_household_future_payment_edit_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_future_payment_edit_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_future_payment_edit_date"
        }

        return NSLocalizedString("screen_household_future_payment_edit_date", bundle: bundle, comment: "")
      }

      /// Value: Debit card
      static func screen_add_card_display_text_debit_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_debit_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_debit_card"
        }

        return NSLocalizedString("screen_add_card_display_text_debit_card", bundle: bundle, comment: "")
      }

      /// Value: Decline request
      static func screen_household_welcome_decline_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_decline_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_decline_button_title"
        }

        return NSLocalizedString("screen_household_welcome_decline_button_title", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func screen_notifications_display_text_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notifications_display_text_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notifications_display_text_delete"
        }

        return NSLocalizedString("screen_notifications_display_text_delete", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func screen_send_money_display_text_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_display_text_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_display_text_delete"
        }

        return NSLocalizedString("screen_send_money_display_text_delete", bundle: bundle, comment: "")
      }

      /// Value: Delete notification
      static func screen_notification_details_button_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_details_button_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_details_button_delete"
        }

        return NSLocalizedString("screen_notification_details_button_delete", bundle: bundle, comment: "")
      }

      /// Value: Do it later
      static func screen_set_card_pin_success_button_create_pin_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_success_button_create_pin_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_success_button_create_pin_later"
        }

        return NSLocalizedString("screen_set_card_pin_success_button_create_pin_later", bundle: bundle, comment: "")
      }

      /// Value: Do you want to order a new card?
      static func screen_card_blocked_display_text_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_blocked_display_text_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_blocked_display_text_subheading"
        }

        return NSLocalizedString("screen_card_blocked_display_text_subheading", bundle: bundle, comment: "")
      }

      /// Value: Done
      static func common_button_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_done"
        }

        return NSLocalizedString("common_button_done", bundle: bundle, comment: "")
      }

      /// Value: Done
      static func screen_add_receipt_success_done_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_receipt_success_done_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_receipt_success_done_text"
        }

        return NSLocalizedString("screen_add_receipt_success_done_text", bundle: bundle, comment: "")
      }

      /// Value: Done
      static func screen_household_card_pin_success_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_pin_success_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_pin_success_button_title"
        }

        return NSLocalizedString("screen_household_card_pin_success_button_title", bundle: bundle, comment: "")
      }

      /// Value: Due to all the excitement of our official launch, we are gradually activating as many accounts as possible to keep the app running smoothly. In the meantime, until your account is ready to be fully activated you’ll be placed in a queue.
      static func screen_onboarding_congratulations_waiting_user_display_text_meeting_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_waiting_user_display_text_meeting_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_waiting_user_display_text_meeting_note"
        }

        return NSLocalizedString("screen_onboarding_congratulations_waiting_user_display_text_meeting_note", bundle: bundle, comment: "")
      }

      /// Value: EID scan will be carried out by the agent
      static func view_payment_card_onboarding_stage_two_initial_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_two_initial_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_two_initial_subtitle"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_two_initial_subtitle", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func common_button_edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_edit"
        }

        return NSLocalizedString("common_button_edit", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func screen_household_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_edit_title"
        }

        return NSLocalizedString("screen_household_edit_title", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func screen_send_money_display_text_edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_display_text_edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_display_text_edit"
        }

        return NSLocalizedString("screen_send_money_display_text_edit", bundle: bundle, comment: "")
      }

      /// Value: Edit beneficiary
      static func screen_edit_beneficiary_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_edit_beneficiary_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_edit_beneficiary_display_text_title"
        }

        return NSLocalizedString("screen_edit_beneficiary_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Email
      static func screen_personal_details_display_text_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_email"
        }

        return NSLocalizedString("screen_personal_details_display_text_email", bundle: bundle, comment: "")
      }

      /// Value: Email address
      static func screen_change_email_placeholder_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_placeholder_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_placeholder_email_address"
        }

        return NSLocalizedString("screen_change_email_placeholder_email_address", bundle: bundle, comment: "")
      }

      /// Value: Email address
      static func screen_enter_email_display_text_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_enter_email_display_text_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_enter_email_display_text_email_address"
        }

        return NSLocalizedString("screen_enter_email_display_text_email_address", bundle: bundle, comment: "")
      }

      /// Value: Email address or phone number
      static func screen_sign_in_input_text_email_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_input_text_email_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_input_text_email_hint"
        }

        return NSLocalizedString("screen_sign_in_input_text_email_hint", bundle: bundle, comment: "")
      }

      /// Value: Email notifications
      static func screen_notification_settings_display_text_header_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_header_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_header_email"
        }

        return NSLocalizedString("screen_notification_settings_display_text_header_email", bundle: bundle, comment: "")
      }

      /// Value: Emirate
      static func screen_meeting_location_input_text_emirate_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_input_text_emirate_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_input_text_emirate_title"
        }

        return NSLocalizedString("screen_meeting_location_input_text_emirate_title", bundle: bundle, comment: "")
      }

      /// Value: Emirates ID
      static func common_display_text_emirates_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_emirates_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_emirates_id"
        }

        return NSLocalizedString("common_display_text_emirates_id", bundle: bundle, comment: "")
      }

      /// Value: Emirates ID
      static func screen_b2c_eid_info_review_display_text_emirates_id_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_emirates_id_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_emirates_id_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_emirates_id_heading", bundle: bundle, comment: "")
      }

      /// Value: Emirates ID
      static func screen_meeting_confirmation_display_text_emirates_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_confirmation_display_text_emirates_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_confirmation_display_text_emirates_id"
        }

        return NSLocalizedString("screen_meeting_confirmation_display_text_emirates_id", bundle: bundle, comment: "")
      }

      /// Value: Emirates ID
      static func screen_personal_details_display_text_emirates_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_emirates_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_emirates_id"
        }

        return NSLocalizedString("screen_personal_details_display_text_emirates_id", bundle: bundle, comment: "")
      }

      /// Value: Employment Information
      static func screen_onboarding_employment_type_screen_heading_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_employment_type_screen_heading_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_employment_type_screen_heading_title"
        }

        return NSLocalizedString("screen_onboarding_employment_type_screen_heading_title", bundle: bundle, comment: "")
      }

      /// Value: Enter IBAN
      static func screen_beneficiary_account_details_display_text_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_beneficiary_account_details_display_text_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_beneficiary_account_details_display_text_iban"
        }

        return NSLocalizedString("screen_beneficiary_account_details_display_text_iban", bundle: bundle, comment: "")
      }

      /// Value: Enter PIN code again
      static func screen_household_pin_setup_confirm_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_confirm_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_confirm_heading"
        }

        return NSLocalizedString("screen_household_pin_setup_confirm_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter Passcode
      static func screen_verify_passcode_text_enter_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_text_enter_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_text_enter_passcode"
        }

        return NSLocalizedString("screen_verify_passcode_text_enter_passcode", bundle: bundle, comment: "")
      }

      /// Value: Enter a new PIN
      static func screen_create_card_pin_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_card_pin_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_card_pin_display_text_heading"
        }

        return NSLocalizedString("screen_create_card_pin_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter amount
      static func screen_iban_send_money_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_subheading"
        }

        return NSLocalizedString("screen_iban_send_money_subheading", bundle: bundle, comment: "")
      }

      /// Value: Enter amount to send
      static func screen_y2y_funds_transfer_display_text_title_qr_contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_display_text_title_qr_contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_title_qr_contact"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_display_text_title_qr_contact", bundle: bundle, comment: "")
      }

      /// Value: Enter it one more time
      static func screen_change_email_display_text_confirm_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_display_text_confirm_email_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_display_text_confirm_email_title"
        }

        return NSLocalizedString("screen_change_email_display_text_confirm_email_title", bundle: bundle, comment: "")
      }

      /// Value: Enter it one more time
      static func screen_confirm_card_pin_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_card_pin_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_card_pin_display_text_heading"
        }

        return NSLocalizedString("screen_confirm_card_pin_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter it one more time​
      static func screen_change_pin_repeat_new_pin_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_repeat_new_pin_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_repeat_new_pin_text"
        }

        return NSLocalizedString("screen_change_pin_repeat_new_pin_text", bundle: bundle, comment: "")
      }

      /// Value: Enter landmark
      static func screen_meeting_location_input_text_landmark_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_input_text_landmark_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_input_text_landmark_hint"
        }

        return NSLocalizedString("screen_meeting_location_input_text_landmark_hint", bundle: bundle, comment: "")
      }

      /// Value: Enter that one more time to confirm
      static func screen_confirm_card_pin_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_card_pin_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_card_pin_display_text_title"
        }

        return NSLocalizedString("screen_confirm_card_pin_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Enter the CVV to top up your acccount with
      static func screen_topup_card_cvv_display_text_cvv(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_cvv_display_text_cvv", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_cvv_display_text_cvv"
        }

        return NSLocalizedString("screen_topup_card_cvv_display_text_cvv", bundle: bundle, comment: "")
      }

      /// Value: Enter the OTP sent to your registered mobile number %@
      static func screen_add_beneificiary_otp_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_beneificiary_otp_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneificiary_otp_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_add_beneificiary_otp_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Enter the OTP sent to your registered mobile number %@
      static func screen_add_funds_otp_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_otp_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_otp_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_add_funds_otp_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Enter the OTP sent to your registered mobile number %@
      static func screen_forgot_passcode_otp_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_forgot_passcode_otp_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_forgot_passcode_otp_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_forgot_passcode_otp_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Enter the OTP sent to your registered mobile number to complete login
      static func screen_device_registration_otp_display_text_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_device_registration_otp_display_text_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_device_registration_otp_display_text_message"
        }

        return NSLocalizedString("screen_device_registration_otp_display_text_message", bundle: bundle, comment: "")
      }

      /// Value: Enter the amount to Add
      static func screen_add_funds_display_text_enter_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_funds_display_text_enter_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_enter_amount"
        }

        return NSLocalizedString("screen_add_funds_display_text_enter_amount", bundle: bundle, comment: "")
      }

      /// Value: Enter the amount to remove
      static func screen_remove_funds_display_text_enter_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_remove_funds_display_text_enter_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_enter_amount"
        }

        return NSLocalizedString("screen_remove_funds_display_text_enter_amount", bundle: bundle, comment: "")
      }

      /// Value: Enter the code sent to your mobile number to transfer 
      static func screen_send_money_otp_display_text_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_otp_display_text_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_otp_display_text_subheading"
        }

        return NSLocalizedString("screen_send_money_otp_display_text_subheading", bundle: bundle, comment: "")
      }

      /// Value: Enter transfer amount
      static func screen_household_pay_salary_screen_enter_transfer_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pay_salary_screen_enter_transfer_amount_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pay_salary_screen_enter_transfer_amount_title"
        }

        return NSLocalizedString("screen_household_pay_salary_screen_enter_transfer_amount_title", bundle: bundle, comment: "")
      }

      /// Value: Enter your address
      static func screen_meeting_location_input_text_address_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_input_text_address_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_input_text_address_hint"
        }

        return NSLocalizedString("screen_meeting_location_input_text_address_hint", bundle: bundle, comment: "")
      }

      /// Value: Enter your business email to begin
      static func screen_enter_email_b2b_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_enter_email_b2b_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_enter_email_b2b_display_text_sub_heading"
        }

        return NSLocalizedString("screen_enter_email_b2b_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter your card details
      static func screen_add_topup_card_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_topup_card_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_topup_card_display_text_title"
        }

        return NSLocalizedString("screen_add_topup_card_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Enter your current  PIN
      static func screen_current_card_pin_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_current_card_pin_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_current_card_pin_display_text_heading"
        }

        return NSLocalizedString("screen_current_card_pin_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter your current PIN
      static func screen_household_card_pin_change_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_pin_change_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_pin_change_heading"
        }

        return NSLocalizedString("screen_household_card_pin_change_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter your current PIN code
      static func screen_change_pin_enter_current_pin_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_enter_current_pin_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_enter_current_pin_text"
        }

        return NSLocalizedString("screen_change_pin_enter_current_pin_text", bundle: bundle, comment: "")
      }

      /// Value: Enter your current passcode
      static func screen_current_passcode_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_current_passcode_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_current_passcode_display_text_heading"
        }

        return NSLocalizedString("screen_current_passcode_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter your new PIN code
      static func screen_change_pin_enter_new_pin_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_enter_new_pin_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_enter_new_pin_text"
        }

        return NSLocalizedString("screen_change_pin_enter_new_pin_text", bundle: bundle, comment: "")
      }

      /// Value: Enter your new email address
      static func screen_change_email_display_text_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_display_text_email_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_display_text_email_title"
        }

        return NSLocalizedString("screen_change_email_display_text_email_title", bundle: bundle, comment: "")
      }

      /// Value: Enter your new number
      static func screen_change_phone_number_display_text_text_field_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_phone_number_display_text_text_field_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_phone_number_display_text_text_field_title"
        }

        return NSLocalizedString("screen_change_phone_number_display_text_text_field_title", bundle: bundle, comment: "")
      }

      /// Value: Enter your new passcode
      static func screen_set_passcode_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_passcode_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_passcode_display_text_heading"
        }

        return NSLocalizedString("screen_set_passcode_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Enter your passcode to access this account
      static func screen_verify_passcode_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_display_text_title"
        }

        return NSLocalizedString("screen_verify_passcode_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Equip your household help with a card of their own. Now you can send them salaries and household expenses directly into their card so you don’t always have to depend on cash.
      static func screen_yfy_yap_store_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_yap_store_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_yap_store_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_yap_store_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: Exclusive partner offers
      static func screen_add_card_display_text_feature_exclusive_partner_offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_exclusive_partner_offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_exclusive_partner_offers"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_exclusive_partner_offers", bundle: bundle, comment: "")
      }

      /// Value: Expenses
      static func screen_house_hold_salary_profile_expenses_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_expenses_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_expenses_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_expenses_text", bundle: bundle, comment: "")
      }

      /// Value: Expiry date
      static func screen_b2c_eid_info_review_display_text_expiry_date_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_expiry_date_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_expiry_date_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_expiry_date_heading", bundle: bundle, comment: "")
      }

      /// Value: Expiry date
      static func screen_topup_card_details_display_text_placeholder_expiry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_placeholder_expiry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_placeholder_expiry"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_placeholder_expiry", bundle: bundle, comment: "")
      }

      /// Value: Expiry date: 
      static func screen_household_pin_setup_expiry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_expiry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_expiry"
        }

        return NSLocalizedString("screen_household_pin_setup_expiry", bundle: bundle, comment: "")
      }

      /// Value: Explore card controls
      static func screen_yfy_up_and_running_text_explore_card_controls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_text_explore_card_controls", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_text_explore_card_controls"
        }

        return NSLocalizedString("screen_yfy_up_and_running_text_explore_card_controls", bundle: bundle, comment: "")
      }

      /// Value: Face ID
      static func screen_light_dashboard_button_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_light_dashboard_button_face_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_light_dashboard_button_face_id"
        }

        return NSLocalizedString("screen_light_dashboard_button_face_id", bundle: bundle, comment: "")
      }

      /// Value: Face ID is the quickest way to access YAP. Make sure your Face ID is always on in your device settings
      static func screen_system_permission_text_details_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_details_face_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_details_face_id"
        }

        return NSLocalizedString("screen_system_permission_text_details_face_id", bundle: bundle, comment: "")
      }

      /// Value: Facebook
      static func screen_user_profile_display_text_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_facebook"
        }

        return NSLocalizedString("screen_user_profile_display_text_facebook", bundle: bundle, comment: "")
      }

      /// Value: Failed card transactions
      static func screen_notification_settings_display_text_setting_failed_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_failed_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_failed_transaction"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_failed_transaction", bundle: bundle, comment: "")
      }

      /// Value: Fee
      static func screen_transaction_details_display_text_fee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_fee"
        }

        return NSLocalizedString("screen_transaction_details_display_text_fee", bundle: bundle, comment: "")
      }

      /// Value: Fee: %@
      static func screen_add_funds_display_text_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_fee"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Fee: %@
      static func screen_remove_funds_display_text_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_remove_funds_display_text_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_fee"
        }

        let format = NSLocalizedString("screen_remove_funds_display_text_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Fee: %@
      static func screen_topup_transfer_display_text_transaction_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_topup_transfer_display_text_transaction_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_transfer_display_text_transaction_fee"
        }

        let format = NSLocalizedString("screen_topup_transfer_display_text_transaction_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Fee: %@
      static func screen_y2y_funds_transfer_display_text_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_fee"
        }

        let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Fee: %@ Note that the recipient's bank may have its own charges.
      static func scren_send_money_funds_transfer_confirmation_display_text_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scren_send_money_funds_transfer_confirmation_display_text_fee"
        }

        let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Feeling generous? Send money to someone who isn't on your YAP contacts by adding them as a beneficiary in a few simple steps.  Use the YAP It button and choose either bank transfer or cash pickup, so you can send money to even those who don’t have a bank account!
      static func screen_yfy_better_together_goal_four_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_goal_four_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_goal_four_description"
        }

        return NSLocalizedString("screen_yfy_better_together_goal_four_description", bundle: bundle, comment: "")
      }

      /// Value: Fees & pricing plans
      static func screen_user_profile_display_text_pricing_plans(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_pricing_plans", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_pricing_plans"
        }

        return NSLocalizedString("screen_user_profile_display_text_pricing_plans", bundle: bundle, comment: "")
      }

      /// Value: Female
      static func common_display_text_gender_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_gender_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_gender_female"
        }

        return NSLocalizedString("common_display_text_gender_female", bundle: bundle, comment: "")
      }

      /// Value: Filter
      static func screen_home_button_filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_button_filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_button_filter"
        }

        return NSLocalizedString("screen_home_button_filter", bundle: bundle, comment: "")
      }

      /// Value: Filters
      static func screen_transaction_filter_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_title"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Find bank
      static func screen_bank_details_button_find_bank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_button_find_bank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_button_find_bank"
        }

        return NSLocalizedString("screen_bank_details_button_find_bank", bundle: bundle, comment: "")
      }

      /// Value: First name
      static func screen_add_beneficiary_detail_display_text_transfer_first_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_first_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_first_name"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_first_name", bundle: bundle, comment: "")
      }

      /// Value: First name
      static func screen_b2c_eid_info_review_display_text_first_name_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_first_name_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_first_name_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_first_name_heading", bundle: bundle, comment: "")
      }

      /// Value: First name
      static func screen_name_display_text_first_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_name_display_text_first_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_name_display_text_first_name"
        }

        return NSLocalizedString("screen_name_display_text_first_name", bundle: bundle, comment: "")
      }

      /// Value: First name
      static func screen_yap_house_hold_user_info_display_text_first_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_user_info_display_text_first_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_user_info_display_text_first_name"
        }

        return NSLocalizedString("screen_yap_house_hold_user_info_display_text_first_name", bundle: bundle, comment: "")
      }

      /// Value: Flat number/ Building name/ Landmark
      static func screen_meeting_location_input_text_landmark_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_input_text_landmark_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_input_text_landmark_title"
        }

        return NSLocalizedString("screen_meeting_location_input_text_landmark_title", bundle: bundle, comment: "")
      }

      /// Value: Follow us
      static func screen_user_profile_button_follow_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_button_follow_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_button_follow_us"
        }

        return NSLocalizedString("screen_user_profile_button_follow_us", bundle: bundle, comment: "")
      }

      /// Value: For those people who still use cash, how much cash will you add to YAP per month?
      static func employment_info_questions_additional_info_for_cash_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("employment_info_questions_additional_info_for_cash_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "employment_info_questions_additional_info_for_cash_title"
        }

        return NSLocalizedString("employment_info_questions_additional_info_for_cash_title", bundle: bundle, comment: "")
      }

      /// Value: Forgot PIN?
      static func screen_household_card_pin_change_text_forgot_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_pin_change_text_forgot_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_pin_change_text_forgot_password"
        }

        return NSLocalizedString("screen_household_card_pin_change_text_forgot_password", bundle: bundle, comment: "")
      }

      /// Value: Forgot passcode?
      static func screen_verify_passcode_text_forgot_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_text_forgot_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_text_forgot_password"
        }

        return NSLocalizedString("screen_verify_passcode_text_forgot_password", bundle: bundle, comment: "")
      }

      /// Value: Free package subscription
      static func screen_add_card_display_text_feature_free_package_subscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_free_package_subscription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_free_package_subscription"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_free_package_subscription", bundle: bundle, comment: "")
      }

      /// Value: Freeze and unfreeze your card
      static func screen_yfy_up_and_running_text_freeze_unfreeze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_text_freeze_unfreeze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_text_freeze_unfreeze"
        }

        return NSLocalizedString("screen_yfy_up_and_running_text_freeze_unfreeze", bundle: bundle, comment: "")
      }

      /// Value: Freeze card
      static func screen_card_detail_button_freeze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_freeze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_freeze"
        }

        return NSLocalizedString("screen_card_detail_button_freeze", bundle: bundle, comment: "")
      }

      /// Value: Freeze card
      static func screen_primary_card_detail_tour_guide_free_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_free_card_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_free_card_title"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_free_card_title", bundle: bundle, comment: "")
      }

      /// Value: Freeze or unfreeze anytime
      static func screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_title", bundle: bundle, comment: "")
      }

      /// Value: Full name
      static func screen_personal_details_display_text_full_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_full_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_full_name"
        }

        return NSLocalizedString("screen_personal_details_display_text_full_name", bundle: bundle, comment: "")
      }

      /// Value: Future payment
      static func screen_household_future_payment_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_future_payment_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_future_payment_edit_title"
        }

        return NSLocalizedString("screen_household_future_payment_edit_title", bundle: bundle, comment: "")
      }

      /// Value: GOLD
      static func account_subscription_gold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_subscription_gold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_subscription_gold"
        }

        return NSLocalizedString("account_subscription_gold", bundle: bundle, comment: "")
      }

      /// Value: Gender
      static func screen_b2c_eid_info_review_display_text_gender_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_gender_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_gender_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_gender_heading", bundle: bundle, comment: "")
      }

      /// Value: Get Started
      static func screen_household_welcome_getstarted_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_getstarted_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_getstarted_button_title"
        }

        return NSLocalizedString("screen_household_welcome_getstarted_button_title", bundle: bundle, comment: "")
      }

      /// Value: Get YAP Young
      static func screen_yfy_you_are_pro_text_get_yap_young(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_get_yap_young", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_get_yap_young"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_get_yap_young", bundle: bundle, comment: "")
      }

      /// Value: Get a Household card
      static func screen_yap_house_hold_onboarding_landing_button_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_button_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_button_text"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_button_text", bundle: bundle, comment: "")
      }

      /// Value: Get a card for your household help and start managing your finances easily! 
      static func screen_yap_house_hold_subscription_selection_display_text_house_hold_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_house_hold_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_house_hold_heading"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_house_hold_heading", bundle: bundle, comment: "")
      }

      /// Value: Get direction
      static func screen_more_home_display_text_get_direction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_get_direction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_get_direction"
        }

        return NSLocalizedString("screen_more_home_display_text_get_direction", bundle: bundle, comment: "")
      }

      /// Value: Get quick access to useful links related to your profile, account details, analytics, support and contacting YAP.
      static func screen_home_display_tour_guide_text_desc_top_menue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_desc_top_menue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_desc_top_menue"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_desc_top_menue", bundle: bundle, comment: "")
      }

      /// Value: Get started
      static func screen_welcome_button_get_started(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_button_get_started", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_button_get_started"
        }

        return NSLocalizedString("screen_welcome_button_get_started", bundle: bundle, comment: "")
      }

      /// Value: Get started
      static func screen_yfy_home_screen_get_started_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_get_started_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_get_started_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_get_started_title", bundle: bundle, comment: "")
      }

      /// Value: Give them the power to manage their salary and expenses
      static func screen_yap_house_hold_onboarding_landing_display_text_manage_expense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_manage_expense", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_manage_expense"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_manage_expense", bundle: bundle, comment: "")
      }

      /// Value: Give us up to 48 hours for it to reach you
      static func view_payment_card_onboarding_stage_card_on_the_way_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_card_on_the_way_subheading"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_subheading", bundle: bundle, comment: "")
      }

      /// Value: Give your kids tasks that will help them earn money. Chores can be fun too!
      static func screen_yfy_yap_store_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_yap_store_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_yap_store_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_yap_store_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: Gmail
      static func screen_mail_action_sheet_display_text_ms_outlook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_mail_action_sheet_display_text_ms_outlook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_mail_action_sheet_display_text_ms_outlook"
        }

        return NSLocalizedString("screen_mail_action_sheet_display_text_ms_outlook", bundle: bundle, comment: "")
      }

      /// Value: Go Metal
      static func screen_yfy_take_a_leap_text_go_metal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_a_leap_text_go_metal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_a_leap_text_go_metal"
        }

        return NSLocalizedString("screen_yfy_take_a_leap_text_go_metal", bundle: bundle, comment: "")
      }

      /// Value: Go on and add some money to your account so you can start spending! You can do this by using your existing bank card, make a wire transfer to this account or deposit cash at the nearest machine.
      static func screen_yfy_get_started_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_get_started_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: Go to Household
      static func screen_yap_house_hold_success_button_text_goto_house_hold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_success_button_text_goto_house_hold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_button_text_goto_house_hold"
        }

        return NSLocalizedString("screen_yap_house_hold_success_button_text_goto_house_hold", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func common_button_go_to_dashbaord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_go_to_dashbaord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_go_to_dashbaord"
        }

        return NSLocalizedString("common_button_go_to_dashbaord", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func common_button_go_to_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_go_to_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_go_to_dashboard"
        }

        return NSLocalizedString("common_button_go_to_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func screen_household_location_selection_success_button_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_location_selection_success_button_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_location_selection_success_button_dashboard"
        }

        return NSLocalizedString("screen_household_location_selection_success_button_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func screen_household_normal_payment_go_to_dashboard_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_normal_payment_go_to_dashboard_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_normal_payment_go_to_dashboard_text"
        }

        return NSLocalizedString("screen_household_normal_payment_go_to_dashboard_text", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func screen_meeting_confirmation_button_go_to_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_confirmation_button_go_to_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_confirmation_button_go_to_dashboard"
        }

        return NSLocalizedString("screen_meeting_confirmation_button_go_to_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func screen_topup_success_display_text_dashboard_action_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_success_display_text_dashboard_action_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_success_display_text_dashboard_action_button_title"
        }

        return NSLocalizedString("screen_topup_success_display_text_dashboard_action_button_title", bundle: bundle, comment: "")
      }

      /// Value: Go to dashboard
      static func screen_y2y_funds_transfer_success_button_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_success_button_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_success_button_back"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_success_button_back", bundle: bundle, comment: "")
      }

      /// Value: Gold Premium Card
      static func commone_disply_text_card_name_premium_gold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_premium_gold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_premium_gold"
        }

        return NSLocalizedString("commone_disply_text_card_name_premium_gold", bundle: bundle, comment: "")
      }

      /// Value: Great!
      static func screen_email_verification_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_display_text_title"
        }

        return NSLocalizedString("screen_email_verification_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Great, you’ve successfully updated your PIN!
      static func screen_change_pin_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_success_display_text_heading"
        }

        return NSLocalizedString("screen_change_pin_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Grey Premium Card
      static func commone_disply_text_card_name_premium_grey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_premium_grey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_premium_grey"
        }

        return NSLocalizedString("commone_disply_text_card_name_premium_grey", bundle: bundle, comment: "")
      }

      /// Value: Having trouble finding your email? Don’t worry, you can request for a new one! Verifying your email helps us stay in touch and send you important updates.
      static func screen_email_verified_popup_display_text_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verified_popup_display_text_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_display_text_sub_title"
        }

        return NSLocalizedString("screen_email_verified_popup_display_text_sub_title", bundle: bundle, comment: "")
      }

      /// Value: Help and support
      static func screen_menu_display_text_help_and_support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_help_and_support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_help_and_support"
        }

        return NSLocalizedString("screen_menu_display_text_help_and_support", bundle: bundle, comment: "")
      }

      /// Value: Help and support
      static func screen_more_home_display_text_tile_help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_help"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_help", bundle: bundle, comment: "")
      }

      /// Value: Here's your IBAN
      static func screen_onboarding_congratulations_display_text_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_display_text_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_display_text_iban"
        }

        return NSLocalizedString("screen_onboarding_congratulations_display_text_iban", bundle: bundle, comment: "")
      }

      /// Value: Hey there, looks like you're under %d
      static func screen_b2c_eid_info_review_display_text_error_under_age(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_error_under_age", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_error_under_age"
        }

        let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_error_under_age", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Hey! I just joined the UAE’s newest banking app – YAP. Transform the way you bank and reserve your place in the queue to be one of the first to join me in the banking revolution.  %@
      static func screen_waiting_list_rank_share_invite_text(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_share_invite_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_share_invite_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_share_invite_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Hey! I’ve started using the UAE’s newest banking app – YAP. Transform how you manage your money and join me in the banking revolution.  %@
      static func screen_invite_friend_cards__plan_display_text_share_url(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_invite_friend_cards_&_plan_display_text_share_url", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_cards_&_plan_display_text_share_url"
        }

        let format = NSLocalizedString("screen_invite_friend_cards_&_plan_display_text_share_url", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Hi %@ would like to send you some money via YAP. Download the app now and join YAP’s fast growing community!  Download YAP here:  %@
      static func common_display_text_y2y_share(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_y2y_share", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_y2y_share"
        }

        let format = NSLocalizedString("common_display_text_y2y_share", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Hi %@, %@ has added you as their Household on YAP. Download YAP from the link below and login with these credentials:  Username: %@ Passcode:%@  Download on App Store: %@  Download on Play Store: %@
      static func screen_yap_house_hold_confirm_payment_share_text(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, _ value6: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_share_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4, value5, value6)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_share_text"
        }

        let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_share_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4, value5, value6)
      }

      /// Value: Hi %@, it looks like you haven’t verified this email yet:
      static func screen_email_verified_popup_display_text_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_email_verified_popup_display_text_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_display_text_title"
        }

        let format = NSLocalizedString("screen_email_verified_popup_display_text_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Hope you like your new card!
      static func screen_household_pin_setup_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_title"
        }

        return NSLocalizedString("screen_household_pin_setup_title", bundle: bundle, comment: "")
      }

      /// Value: Household
      static func screen_household_card_analytics_screen_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_analytics_screen_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_analytics_screen_display_text_title"
        }

        return NSLocalizedString("screen_household_card_analytics_screen_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Household
      static func screen_menu_display_text_household(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_household", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_household"
        }

        return NSLocalizedString("screen_menu_display_text_household", bundle: bundle, comment: "")
      }

      /// Value: Household
      static func screen_yap_house_hold_onboarding_landing_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_title"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Household card
      static func screen_household_card_selection_display_text_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_selection_display_text_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_selection_display_text_subheading"
        }

        return NSLocalizedString("screen_household_card_selection_display_text_subheading", bundle: bundle, comment: "")
      }

      /// Value: Household card
      static func screen_yap_house_hold_success_display_text_house_hold_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_success_display_text_house_hold_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_house_hold_card"
        }

        return NSLocalizedString("screen_yap_house_hold_success_display_text_house_hold_card", bundle: bundle, comment: "")
      }

      /// Value: Household salary
      static func screen_menu_display_text_household_salary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_household_salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_household_salary"
        }

        return NSLocalizedString("screen_menu_display_text_household_salary", bundle: bundle, comment: "")
      }

      /// Value: Household transfers
      static func screen_transaction_filter_display_text_household_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_household_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_household_transactions"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_household_transactions", bundle: bundle, comment: "")
      }

      /// Value: How about a recurring payment for %1s's salary so you don't have to manually transfer money every month? You can stop anytime.
      static func screen_household_normal_payment_recurring_text(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_normal_payment_recurring_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_normal_payment_recurring_text"
        }

        let format = NSLocalizedString("screen_household_normal_payment_recurring_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: How do you want to top up?
      static func screen_topup_type_selection_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_type_selection_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_type_selection_display_text_heading"
        }

        return NSLocalizedString("screen_topup_type_selection_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: How much would you like to add?
      static func screen_topup_transfer_display_text_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_transfer_display_text_amount_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_transfer_display_text_amount_title"
        }

        return NSLocalizedString("screen_topup_transfer_display_text_amount_title", bundle: bundle, comment: "")
      }

      /// Value: I accept the
      static func screen_meeting_location_text_accept_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_text_accept_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_text_accept_terms"
        }

        return NSLocalizedString("screen_meeting_location_text_accept_terms", bundle: bundle, comment: "")
      }

      /// Value: I want an account for
      static func screen_home_display_text_account_selection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_text_account_selection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_text_account_selection"
        }

        return NSLocalizedString("screen_home_display_text_account_selection", bundle: bundle, comment: "")
      }

      /// Value: I'll do it later
      static func screen_add_beneficiary_detail_display_button_block_alert_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_button_block_alert_no"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_no", bundle: bundle, comment: "")
      }

      /// Value: I'll do it later
      static func screen_iban_send_money_success_do_it_later_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_do_it_later_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_do_it_later_button"
        }

        return NSLocalizedString("screen_iban_send_money_success_do_it_later_button", bundle: bundle, comment: "")
      }

      /// Value: I've started using YAP The Money App to manage my spending and I think you'll find it really useful.  %@
      static func screen_invite_friend_display_text_share_url(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_invite_friend_display_text_share_url", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_share_url"
        }

        let format = NSLocalizedString("screen_invite_friend_display_text_share_url", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: IBAN
      static func screen_more_bank_details_display_text_iban(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_iban", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_iban"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_iban", bundle: bundle, comment: "")
      }

      /// Value: If you feel this is a mistake please call us at %@
      static func screen_household_warning_display_text_support_number(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_warning_display_text_support_number", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_warning_display_text_support_number"
        }

        let format = NSLocalizedString("screen_household_warning_display_text_support_number", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: If you suspect any malicious activity or need to provide us with any other essential information regarding your card's disappearance, please give our customer care center a call at %@
      static func screen_report_card_display_text_block_footnote(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_report_card_display_text_block_footnote", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_block_footnote"
        }

        let format = NSLocalizedString("screen_report_card_display_text_block_footnote", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Improve logo or location?
      static func screen_transaction_details_display_text_improve_attribute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_improve_attribute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_improve_attribute"
        }

        return NSLocalizedString("screen_transaction_details_display_text_improve_attribute", bundle: bundle, comment: "")
      }

      /// Value: In process
      static func view_payment_card_onboarding_stage_in_process_label_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_in_process_label_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_in_process_label_text"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_in_process_label_text", bundle: bundle, comment: "")
      }

      /// Value: In-app notifications
      static func screen_notification_settings_display_text_header_in_app(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_header_in_app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_header_in_app"
        }

        return NSLocalizedString("screen_notification_settings_display_text_header_in_app", bundle: bundle, comment: "")
      }

      /// Value: Incoming transactions
      static func screen_transaction_filter_display_text_incoming_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_incoming_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_incoming_transactions"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_incoming_transactions", bundle: bundle, comment: "")
      }

      /// Value: Incoming transfers
      static func screen_notification_settings_display_text_setting_incoming_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_incoming_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_incoming_transfer"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_incoming_transfer", bundle: bundle, comment: "")
      }

      /// Value: Instagram
      static func screen_user_profile_display_text_instagram(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_instagram", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_instagram"
        }

        return NSLocalizedString("screen_user_profile_display_text_instagram", bundle: bundle, comment: "")
      }

      /// Value: Install
      static func common_button_install(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_install", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_install"
        }

        return NSLocalizedString("common_button_install", bundle: bundle, comment: "")
      }

      /// Value: International transfer fee: %@ Note that the recipient's bank may have its own charges.
      static func screen_international_funds_transfer_display_text_fee_amount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_international_funds_transfer_display_text_fee_amount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_fee_amount"
        }

        let format = NSLocalizedString("screen_international_funds_transfer_display_text_fee_amount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Invite
      static func screen_y2y_display_button_invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_button_invite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_button_invite"
        }

        return NSLocalizedString("screen_y2y_display_button_invite", bundle: bundle, comment: "")
      }

      /// Value: Invite 10 friends to YAP
      static func screen_yfy_you_are_pro_text_invite_friends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_invite_friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_invite_friends"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_invite_friends", bundle: bundle, comment: "")
      }

      /// Value: Invite a friend
      static func screen_more_home_display_text_tile_invite_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_invite_friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_invite_friend"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_invite_friend", bundle: bundle, comment: "")
      }

      /// Value: Invite a friend
      static func screen_yfy_better_together_text_invite_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_text_invite_friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_text_invite_friend"
        }

        return NSLocalizedString("screen_yfy_better_together_text_invite_friend", bundle: bundle, comment: "")
      }

      /// Value: Invite contacts from your address book
      static func screen_y2y_display_text_invite_phone_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_invite_phone_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_invite_phone_contacts"
        }

        return NSLocalizedString("screen_y2y_display_text_invite_phone_contacts", bundle: bundle, comment: "")
      }

      /// Value: Invite now
      static func screen_y2y_display_button_invite_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_button_invite_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_button_invite_now"
        }

        return NSLocalizedString("screen_y2y_display_button_invite_now", bundle: bundle, comment: "")
      }

      /// Value: Is this your address?
      static func screen_add_spare_card_display_text_address_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_address_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_address_confirmation"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_address_confirmation", bundle: bundle, comment: "")
      }

      /// Value: I’ll do it later
      static func screen_set_card_pin_welcome_button_create_pin_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_welcome_button_create_pin_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_welcome_button_create_pin_later"
        }

        return NSLocalizedString("screen_set_card_pin_welcome_button_create_pin_later", bundle: bundle, comment: "")
      }

      /// Value: Keep me posted!
      static func screen_waiting_list_dispaly_button_keep_me_posted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_dispaly_button_keep_me_posted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_dispaly_button_keep_me_posted"
        }

        return NSLocalizedString("screen_waiting_list_dispaly_button_keep_me_posted", bundle: bundle, comment: "")
      }

      /// Value: Keep track of your spendings
      static func screen_transaction_details_display_text_add_receipt_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_add_receipt_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_add_receipt_description"
        }

        return NSLocalizedString("screen_transaction_details_display_text_add_receipt_description", bundle: bundle, comment: "")
      }

      /// Value: Last name
      static func screen_add_beneficiary_detail_display_text_transfer_last_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_last_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_last_name"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_last_name", bundle: bundle, comment: "")
      }

      /// Value: Last name
      static func screen_b2c_eid_info_review_display_text_last_name_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_last_name_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_last_name_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_last_name_heading", bundle: bundle, comment: "")
      }

      /// Value: Last name
      static func screen_name_display_text_last_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_name_display_text_last_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_name_display_text_last_name"
        }

        return NSLocalizedString("screen_name_display_text_last_name", bundle: bundle, comment: "")
      }

      /// Value: Last name
      static func screen_yap_house_hold_user_info_display_text_last_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_user_info_display_text_last_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_user_info_display_text_last_name"
        }

        return NSLocalizedString("screen_yap_house_hold_user_info_display_text_last_name", bundle: bundle, comment: "")
      }

      /// Value: Launch the YAP it button to carry out important functions like sending money, adding funds to your account and paying bills.
      static func screen_home_display_tour_guide_text_desc_yap_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_desc_yap_it", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_desc_yap_it"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_desc_yap_it", bundle: bundle, comment: "")
      }

      /// Value: Let %@ know by sharing the details below:
      static func screen_yap_house_hold_success_display_text_share_credentials(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_success_display_text_share_credentials", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_share_credentials"
        }

        let format = NSLocalizedString("screen_yap_house_hold_success_display_text_share_credentials", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Let your help choose from any one of these breathtaking colors
      static func screen_yap_house_hold_onboarding_landing_display_text_choose_colour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_choose_colour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_choose_colour"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_choose_colour", bundle: bundle, comment: "")
      }

      /// Value: Let's do it
      static func screen_cards_button_set_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_button_set_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_button_set_pin"
        }

        return NSLocalizedString("screen_cards_button_set_pin", bundle: bundle, comment: "")
      }

      /// Value: Let's get started
      static func screen_enter_email_b2b_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_enter_email_b2b_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_enter_email_b2b_display_text_title"
        }

        return NSLocalizedString("screen_enter_email_b2b_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Let’s begin by confirming this is you and setting up your account!
      static func screen_household_welcome_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_title"
        }

        return NSLocalizedString("screen_household_welcome_title", bundle: bundle, comment: "")
      }

      /// Value: Light Dashboard
      static func screen_light_dashboard_display_text_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_light_dashboard_display_text_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_light_dashboard_display_text_heading_text"
        }

        return NSLocalizedString("screen_light_dashboard_display_text_heading_text", bundle: bundle, comment: "")
      }

      /// Value: Like us
      static func screen_user_profile_button_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_button_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_button_facebook"
        }

        return NSLocalizedString("screen_user_profile_button_facebook", bundle: bundle, comment: "")
      }

      /// Value: Live chat
      static func screen_menu_display_text_live_chat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_live_chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_live_chat"
        }

        return NSLocalizedString("screen_menu_display_text_live_chat", bundle: bundle, comment: "")
      }

      /// Value: Locate ATM and CDM
      static func screen_more_home_display_text_tile_locate_atm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_locate_atm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_locate_atm"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_locate_atm", bundle: bundle, comment: "")
      }

      /// Value: Log back in to see your rank in the queue
      static func screen_waiting_list_rank_log_back_in_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_log_back_in_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_log_back_in_text"
        }

        return NSLocalizedString("screen_waiting_list_rank_log_back_in_text", bundle: bundle, comment: "")
      }

      /// Value: Log out
      static func screen_profile_action_display_text_logout_popups_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_profile_action_display_text_logout_popups_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_profile_action_display_text_logout_popups_logout"
        }

        return NSLocalizedString("screen_profile_action_display_text_logout_popups_logout", bundle: bundle, comment: "")
      }

      /// Value: Log out
      static func screen_profile_action_display_text_logout_popups_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_profile_action_display_text_logout_popups_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_profile_action_display_text_logout_popups_title"
        }

        return NSLocalizedString("screen_profile_action_display_text_logout_popups_title", bundle: bundle, comment: "")
      }

      /// Value: Log out
      static func screen_user_profile_button_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_button_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_button_logout"
        }

        return NSLocalizedString("screen_user_profile_button_logout", bundle: bundle, comment: "")
      }

      /// Value: Logout
      static func screen_light_dashboard_button_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_light_dashboard_button_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_light_dashboard_button_logout"
        }

        return NSLocalizedString("screen_light_dashboard_button_logout", bundle: bundle, comment: "")
      }

      /// Value: Logout!
      static func screen_household_warning_button_title_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_warning_button_title_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_warning_button_title_logout"
        }

        return NSLocalizedString("screen_household_warning_button_title_logout", bundle: bundle, comment: "")
      }

      /// Value: Look up friends
      static func screen_y2y_display_text_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_search"
        }

        return NSLocalizedString("screen_y2y_display_text_search", bundle: bundle, comment: "")
      }

      /// Value: Looks like you don't have enough funds in your account. Top up now to continue with this purchase
      static func screen_add_spare_card_display_text_insufficient_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_insufficient_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_insufficient_balance"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_insufficient_balance", bundle: bundle, comment: "")
      }

      /// Value: Looks like you're from United States
      static func screen_b2c_eid_info_review_display_text_error_from_usa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_error_from_usa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_error_from_usa"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_error_from_usa", bundle: bundle, comment: "")
      }

      /// Value: Looks like you're from the United States
      static func screen_kyc_information_error_display_text_title_from_usa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_title_from_usa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_title_from_usa"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_title_from_usa", bundle: bundle, comment: "")
      }

      /// Value: Looks like you're offline. Please reconnect and refresh to continue using YAP.
      static func common_display_text_error_no_internet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_error_no_internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_error_no_internet"
        }

        return NSLocalizedString("common_display_text_error_no_internet", bundle: bundle, comment: "")
      }

      /// Value: Looks like you're under %d!
      static func screen_kyc_information_error_display_text_title_under_age(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_kyc_information_error_display_text_title_under_age", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_title_under_age"
        }

        let format = NSLocalizedString("screen_kyc_information_error_display_text_title_under_age", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Looks like your Emirates ID is expired
      static func screen_b2c_eid_info_review_display_text_error_expired_eid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_error_expired_eid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_error_expired_eid"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_error_expired_eid", bundle: bundle, comment: "")
      }

      /// Value: Looks like your ID has expired. Please re-scan a valid ID
      static func screen_b2c_eid_info_review_display_text_expired_eid_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_expired_eid_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_expired_eid_error"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_expired_eid_error", bundle: bundle, comment: "")
      }

      /// Value: Lost/Stolen card
      static func screen_report_card_button_lost_stolen_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_button_lost_stolen_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_button_lost_stolen_card"
        }

        return NSLocalizedString("screen_report_card_button_lost_stolen_card", bundle: bundle, comment: "")
      }

      /// Value: METAL
      static func account_subscription_metal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_subscription_metal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_subscription_metal"
        }

        return NSLocalizedString("account_subscription_metal", bundle: bundle, comment: "")
      }

      /// Value: Mail
      static func screen_mail_action_sheet_display_text_apple_mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_mail_action_sheet_display_text_apple_mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_mail_action_sheet_display_text_apple_mail"
        }

        return NSLocalizedString("screen_mail_action_sheet_display_text_apple_mail", bundle: bundle, comment: "")
      }

      /// Value: Make a Y2Y transfer
      static func screen_yfy_better_together_text_y2y_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_text_y2y_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_text_y2y_transfer"
        }

        return NSLocalizedString("screen_yfy_better_together_text_y2y_transfer", bundle: bundle, comment: "")
      }

      /// Value: Make heads turn the next time you’re out using your YAP card.
      static func screen_yfy_up_and_running_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_up_and_running_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: Make life easier by sending household salaries through YAP Household
      static func screen_yfy_yap_store_goal_four_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_yap_store_goal_four_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_yap_store_goal_four_description"
        }

        return NSLocalizedString("screen_yfy_yap_store_goal_four_description", bundle: bundle, comment: "")
      }

      /// Value: Make online payments securely
      static func screen_add_card_display_text_feature_spare_card_online_payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_online_payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_online_payments"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_online_payments", bundle: bundle, comment: "")
      }

      /// Value: Make recurring
      static func screen_household_employee_salary_recurring_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_employee_salary_recurring_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_employee_salary_recurring_heading_text"
        }

        return NSLocalizedString("screen_household_employee_salary_recurring_heading_text", bundle: bundle, comment: "")
      }

      /// Value: Make sure you have your Emirates ID at hand before we proceed
      static func screen_complete_verification_fss_info_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_complete_verification_fss_info_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_complete_verification_fss_info_text"
        }

        return NSLocalizedString("screen_complete_verification_fss_info_text", bundle: bundle, comment: "")
      }

      /// Value: Make sure you have your original Emirates ID on you at the time of delivery as we’ll need to scan it
      static func screen_meeting_confirmation_display_text_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_confirmation_display_text_guide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_confirmation_display_text_guide"
        }

        return NSLocalizedString("screen_meeting_confirmation_display_text_guide", bundle: bundle, comment: "")
      }

      /// Value: Make your next AED 100 purchase a YAP one. Don’t forget to buy yourself something nice!
      static func screen_yfy_up_and_running_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_up_and_running_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: Make your next AED 1000 purchase a YAP one. Don’t forget to buy yourself something nice!
      static func screen_yfy_you_are_a_pro_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_a_pro_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_a_pro_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_you_are_a_pro_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: Male
      static func common_display_text_gender_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_gender_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_gender_male"
        }

        return NSLocalizedString("common_display_text_gender_male", bundle: bundle, comment: "")
      }

      /// Value: Manage your household salaries digitally
      static func screen_yap_house_hold_onboarding_landing_display_text_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_description"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_description", bundle: bundle, comment: "")
      }

      /// Value: Maybe later
      static func common_button_may_be_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_may_be_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_may_be_later"
        }

        return NSLocalizedString("common_button_may_be_later", bundle: bundle, comment: "")
      }

      /// Value: Merchant
      static func screen_card_analytics_display_text_merchant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_analytics_display_text_merchant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_merchant"
        }

        return NSLocalizedString("screen_card_analytics_display_text_merchant", bundle: bundle, comment: "")
      }

      /// Value: Microsoft Outlook
      static func screen_mail_action_sheet_display_text_gmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_mail_action_sheet_display_text_gmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_mail_action_sheet_display_text_gmail"
        }

        return NSLocalizedString("screen_mail_action_sheet_display_text_gmail", bundle: bundle, comment: "")
      }

      /// Value: Middle name (If applicable)
      static func screen_b2c_eid_info_review_display_text_middle_name_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_middle_name_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_middle_name_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_middle_name_heading", bundle: bundle, comment: "")
      }

      /// Value: Mobile number
      static func screen_personal_details_display_text_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_phone_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_phone_number"
        }

        return NSLocalizedString("screen_personal_details_display_text_phone_number", bundle: bundle, comment: "")
      }

      /// Value: Mobile number
      static func screen_yap_house_hold_success_display_text_share_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_success_display_text_share_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_share_email"
        }

        return NSLocalizedString("screen_yap_house_hold_success_display_text_share_email", bundle: bundle, comment: "")
      }

      /// Value: Monthly
      static func screen_household_monthly_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_monthly_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_monthly_title"
        }

        return NSLocalizedString("screen_household_monthly_title", bundle: bundle, comment: "")
      }

      /// Value: Monthly
      static func screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_select_plan_monthly", bundle: bundle, comment: "")
      }

      /// Value: Monthly average is %@
      static func screen_card_analytics_display_text_monthly_average(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_card_analytics_display_text_monthly_average", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_monthly_average"
        }

        let format = NSLocalizedString("screen_card_analytics_display_text_monthly_average", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: More icon
      static func screen_primary_card_detail_tour_guide_more_icon_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_more_icon_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_more_icon_title"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_more_icon_title", bundle: bundle, comment: "")
      }

      /// Value: Multi currency
      static func screen_menu_display_text_multi_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_multi_currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_multi_currency"
        }

        return NSLocalizedString("screen_menu_display_text_multi_currency", bundle: bundle, comment: "")
      }

      /// Value: My QR code
      static func screen_menu_display_text_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_qr_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_qr_code"
        }

        return NSLocalizedString("screen_menu_display_text_qr_code", bundle: bundle, comment: "")
      }

      /// Value: My YAP account details
      static func screen_more_bank_details_display_text_for_top_up_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_for_top_up_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_for_top_up_title"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_for_top_up_title", bundle: bundle, comment: "")
      }

      /// Value: My profile
      static func screen_menu_display_text_my_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_my_profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_my_profile"
        }

        return NSLocalizedString("screen_menu_display_text_my_profile", bundle: bundle, comment: "")
      }

      /// Value: Name
      static func screen_more_bank_details_display_text_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_name"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_name", bundle: bundle, comment: "")
      }

      /// Value: Nationality
      static func screen_b2c_eid_info_review_display_text_nationality_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_nationality_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_nationality_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_nationality_heading", bundle: bundle, comment: "")
      }

      /// Value: New OTP has been generated successfully
      static func screen_verify_phone_number_display_text_resend_otp_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_phone_number_display_text_resend_otp_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_phone_number_display_text_resend_otp_success"
        }

        return NSLocalizedString("screen_verify_phone_number_display_text_resend_otp_success", bundle: bundle, comment: "")
      }

      /// Value: New to YAP? Sign up now
      static func screen_sign_in_display_text_sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_display_text_sign_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_display_text_sign_up"
        }

        return NSLocalizedString("screen_sign_in_display_text_sign_up", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func common_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_next"
        }

        return NSLocalizedString("common_button_next", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_confirm_passcode_display_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_passcode_display_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_passcode_display_button_next"
        }

        return NSLocalizedString("screen_confirm_passcode_display_button_next", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_current_card_pin_display_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_current_card_pin_display_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_current_card_pin_display_button_next"
        }

        return NSLocalizedString("screen_current_card_pin_display_button_next", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_current_passcode_display_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_current_passcode_display_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_current_passcode_display_button_next"
        }

        return NSLocalizedString("screen_current_passcode_display_button_next", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_household_card_pin_change_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_pin_change_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_pin_change_button_title"
        }

        return NSLocalizedString("screen_household_card_pin_change_button_title", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_household_card_selectio_button_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_selectio_button_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_selectio_button_dashboard"
        }

        return NSLocalizedString("screen_household_card_selectio_button_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_set_card_pin_button_create_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_button_create_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_button_create_pin"
        }

        return NSLocalizedString("screen_set_card_pin_button_create_pin", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func screen_set_passcode_display_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_passcode_display_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_passcode_display_button_next"
        }

        return NSLocalizedString("screen_set_passcode_display_button_next", bundle: bundle, comment: "")
      }

      /// Value: Nickname
      static func screen_add_beneficiary_detail_display_text_transfer_nick_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_nick_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_nick_name"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_nick_name", bundle: bundle, comment: "")
      }

      /// Value: No access to Camera or Microphone. You can grant access to YAP from the Settings.
      static func screen_user_profile_display_text_audio_video_permission_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_audio_video_permission_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_audio_video_permission_error"
        }

        return NSLocalizedString("screen_user_profile_display_text_audio_video_permission_error", bundle: bundle, comment: "")
      }

      /// Value: No access to Camera. You can grant access to YAP from the Settings.
      static func screen_user_profile_display_text_video_permission_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_video_permission_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_video_permission_error"
        }

        return NSLocalizedString("screen_user_profile_display_text_video_permission_error", bundle: bundle, comment: "")
      }

      /// Value: No access to Microphone. You can grant access to YAP from the Settings.
      static func screen_user_profile_display_text_audio_permission_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_audio_permission_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_audio_permission_error"
        }

        return NSLocalizedString("screen_user_profile_display_text_audio_permission_error", bundle: bundle, comment: "")
      }

      /// Value: No access to Photos. You can grant access to YAP from the Settings.
      static func screen_user_profile_display_text_photo_permission_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_photo_permission_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_photo_permission_error"
        }

        return NSLocalizedString("screen_user_profile_display_text_photo_permission_error", bundle: bundle, comment: "")
      }

      /// Value: No cards are connected to this account yet
      static func screen_topup_card_selection_display_text_sub_heading_no_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_sub_heading_no_cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_sub_heading_no_cards"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_sub_heading_no_cards", bundle: bundle, comment: "")
      }

      /// Value: No results found.
      static func screen_home_display_text_nothing_to_report_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_text_nothing_to_report_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_text_nothing_to_report_search"
        }

        return NSLocalizedString("screen_home_display_text_nothing_to_report_search", bundle: bundle, comment: "")
      }

      /// Value: No, I have a valid Emirates ID
      static func screen_b2c_eid_info_review_button_valid_emirates_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_button_valid_emirates_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_button_valid_emirates_id"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_button_valid_emirates_id", bundle: bundle, comment: "")
      }

      /// Value: No, I'm fine
      static func screen_system_permission_text_denied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_denied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_denied"
        }

        return NSLocalizedString("screen_system_permission_text_denied", bundle: bundle, comment: "")
      }

      /// Value: No, I'm not from USA
      static func screen_b2c_eid_info_review_button_not_from_usa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_button_not_from_usa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_button_not_from_usa"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_button_not_from_usa", bundle: bundle, comment: "")
      }

      /// Value: No, I'm over %d
      static func screen_b2c_eid_info_review_button_not_under_age(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_b2c_eid_info_review_button_not_under_age", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_button_not_under_age"
        }

        let format = NSLocalizedString("screen_b2c_eid_info_review_button_not_under_age", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: No, do it later
      static func screen_add_topup_card_succes_button_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_topup_card_succes_button_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_topup_card_succes_button_later"
        }

        return NSLocalizedString("screen_add_topup_card_succes_button_later", bundle: bundle, comment: "")
      }

      /// Value: Note
      static func screen_transaction_details_display_text_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_note"
        }

        return NSLocalizedString("screen_transaction_details_display_text_note", bundle: bundle, comment: "")
      }

      /// Value: Note added 
      static func screen_transaction_details_display_text_edit_note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_edit_note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_edit_note"
        }

        return NSLocalizedString("screen_transaction_details_display_text_edit_note", bundle: bundle, comment: "")
      }

      /// Value: Notifications
      static func screen_menu_display_text_household_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_household_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_household_notification"
        }

        return NSLocalizedString("screen_menu_display_text_household_notification", bundle: bundle, comment: "")
      }

      /// Value: Notifications
      static func screen_more_home_display_text_tile_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_notification"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_notification", bundle: bundle, comment: "")
      }

      /// Value: Notifications
      static func screen_notifications_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notifications_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notifications_display_text_title"
        }

        return NSLocalizedString("screen_notifications_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Notificitons settings
      static func screen_notification_settings_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_title"
        }

        return NSLocalizedString("screen_notification_settings_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Now create a unique PIN to start using this card
      static func screen_set_card_pin_welcome_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_welcome_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_welcome_display_text_title"
        }

        return NSLocalizedString("screen_set_card_pin_welcome_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Now enter your new 4-digit PIN
      static func screen_household_card_new_pin_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_new_pin_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_new_pin_heading"
        }

        return NSLocalizedString("screen_household_card_new_pin_heading", bundle: bundle, comment: "")
      }

      /// Value: Now, your primary card balance is  %@
      static func screen_success_funds_transaction_display_text_success_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_success_funds_transaction_display_text_success_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_funds_transaction_display_text_success_sub_heading"
        }

        let format = NSLocalizedString("screen_success_funds_transaction_display_text_success_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Now, your primary card balance is  %@
      static func screen_success_remove_funds_transaction_display_text_success_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_success_remove_funds_transaction_display_text_success_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_remove_funds_transaction_display_text_success_sub_heading"
        }

        let format = NSLocalizedString("screen_success_remove_funds_transaction_display_text_success_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: OK
      static func common_button_ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_ok"
        }

        return NSLocalizedString("common_button_ok", bundle: bundle, comment: "")
      }

      /// Value: OK, got it!
      static func screen_store_display_tour_guide_button_title_purchase_package(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_store_display_tour_guide_button_title_purchase_package", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_store_display_tour_guide_button_title_purchase_package"
        }

        return NSLocalizedString("screen_store_display_tour_guide_button_title_purchase_package", bundle: bundle, comment: "")
      }

      /// Value: Once you've renewed or received your Emirates ID, re-scan it via our dashboard to continue opening your account with YAP.
      static func screen_kyc_information_error_display_text_explanation_expired_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_explanation_expired_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_explanation_expired_card"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_explanation_expired_card", bundle: bundle, comment: "")
      }

      /// Value: Once your referred friends sign up, you will see their names listed below and your place in the queue bumped up by %@ spots for each friend!
      static func screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_subtitle_zero_invitees_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Once you’re set, head over to the top right menu on your dashboard (or via More on the bottom navigation menu) to start inviting your friends to join YAP.  The more the merrier!
      static func screen_yfy_better_together_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_better_together_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: One time fee of %@
      static func screen_add_card_display_text_one_time_fee(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_card_display_text_one_time_fee", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_one_time_fee"
        }

        let format = NSLocalizedString("screen_add_card_display_text_one_time_fee", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Online transactions
      static func screen_card_limits_display_text_online_transaction_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_online_transaction_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_online_transaction_title"
        }

        return NSLocalizedString("screen_card_limits_display_text_online_transaction_title", bundle: bundle, comment: "")
      }

      /// Value: Oops!
      static func screen_household_warning_display_text_oops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_warning_display_text_oops", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_warning_display_text_oops"
        }

        return NSLocalizedString("screen_household_warning_display_text_oops", bundle: bundle, comment: "")
      }

      /// Value: Oops! That’s too big. Please try again with a file that’s under 25 MB
      static func error_document_validation_size_exceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_document_validation_size_exceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_document_validation_size_exceed"
        }

        return NSLocalizedString("error_document_validation_size_exceed", bundle: bundle, comment: "")
      }

      /// Value: Open Mail App
      static func screen_email_verified_popup_button_button_title_take_me_to_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verified_popup_button_button_title_take_me_to_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_button_button_title_take_me_to_email"
        }

        return NSLocalizedString("screen_email_verified_popup_button_button_title_take_me_to_email", bundle: bundle, comment: "")
      }

      /// Value: Open camera
      static func screen_user_profile_display_text_open_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_open_camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_open_camera"
        }

        return NSLocalizedString("screen_user_profile_display_text_open_camera", bundle: bundle, comment: "")
      }

      /// Value: Open in Google Maps
      static func screen_more_home_display_text_open_google_maps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_open_google_maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_open_google_maps"
        }

        return NSLocalizedString("screen_more_home_display_text_open_google_maps", bundle: bundle, comment: "")
      }

      /// Value: Open in Maps
      static func screen_more_home_display_text_open_maps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_open_maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_open_maps"
        }

        return NSLocalizedString("screen_more_home_display_text_open_maps", bundle: bundle, comment: "")
      }

      /// Value: Open mail app
      static func common_button_open_mail_app(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_open_mail_app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_open_mail_app"
        }

        return NSLocalizedString("common_button_open_mail_app", bundle: bundle, comment: "")
      }

      /// Value: Open mail app
      static func screen_unverified_display_button_mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_unverified_display_button_mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_unverified_display_button_mail"
        }

        return NSLocalizedString("screen_unverified_display_button_mail", bundle: bundle, comment: "")
      }

      /// Value: Open your YAP account
      static func screen_yfy_get_started_text_open_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_text_open_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_text_open_account"
        }

        return NSLocalizedString("screen_yfy_get_started_text_open_account", bundle: bundle, comment: "")
      }

      /// Value: Order a virtual card
      static func screen_yfy_take_a_leap_text_send_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_a_leap_text_send_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_a_leap_text_send_money"
        }

        return NSLocalizedString("screen_yfy_take_a_leap_text_send_money", bundle: bundle, comment: "")
      }

      /// Value: Order later
      static func screen_card_blocked_button_order_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_blocked_button_order_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_blocked_button_order_later"
        }

        return NSLocalizedString("screen_card_blocked_button_order_later", bundle: bundle, comment: "")
      }

      /// Value: Ordered
      static func common_delivery_status_ordered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_delivery_status_ordered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_delivery_status_ordered"
        }

        return NSLocalizedString("common_delivery_status_ordered", bundle: bundle, comment: "")
      }

      /// Value: Our delivery agent will be in touch to confirm the delivery date and time. Please keep your Emirates ID at hand.
      static func screen_add_spare_card_completion_display_text_delivery_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_completion_display_text_delivery_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_completion_display_text_delivery_info"
        }

        return NSLocalizedString("screen_add_spare_card_completion_display_text_delivery_info", bundle: bundle, comment: "")
      }

      /// Value: Outgoing transactions
      static func screen_transaction_filter_display_text_outgoing_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_outgoing_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_outgoing_transactions"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_outgoing_transactions", bundle: bundle, comment: "")
      }

      /// Value: Outgoing transfers
      static func screen_notification_settings_display_text_setting_outgoing_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_outgoing_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_outgoing_transfer"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_outgoing_transfer", bundle: bundle, comment: "")
      }

      /// Value: PIN cannot be a straight sequence
      static func screen_set_card_pin_display_text_error_sequence(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_display_text_error_sequence", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_display_text_error_sequence"
        }

        return NSLocalizedString("screen_set_card_pin_display_text_error_sequence", bundle: bundle, comment: "")
      }

      /// Value: PIN cannot be of same digits
      static func screen_set_card_pin_display_text_error_same_digits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_display_text_error_same_digits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_display_text_error_same_digits"
        }

        return NSLocalizedString("screen_set_card_pin_display_text_error_same_digits", bundle: bundle, comment: "")
      }

      /// Value: PIN code saved!
      static func screen_household_pin_setup_success_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_success_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_success_heading"
        }

        return NSLocalizedString("screen_household_pin_setup_success_heading", bundle: bundle, comment: "")
      }

      /// Value: PRIME
      static func account_subscription_prime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_subscription_prime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_subscription_prime"
        }

        return NSLocalizedString("account_subscription_prime", bundle: bundle, comment: "")
      }

      /// Value: Passcode
      static func screen_user_profile_display_text_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_passcode"
        }

        return NSLocalizedString("screen_user_profile_display_text_passcode", bundle: bundle, comment: "")
      }

      /// Value: Passcode cannot be a straight sequence
      static func screen_create_passcode_display_text_error_sequence(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_display_text_error_sequence", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_display_text_error_sequence"
        }

        return NSLocalizedString("screen_create_passcode_display_text_error_sequence", bundle: bundle, comment: "")
      }

      /// Value: Passcode cannot be of same digits
      static func screen_create_passcode_display_text_error_same_digits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_display_text_error_same_digits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_display_text_error_same_digits"
        }

        return NSLocalizedString("screen_create_passcode_display_text_error_same_digits", bundle: bundle, comment: "")
      }

      /// Value: Pay bills
      static func screen_yap_it_button_pay_bills(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_it_button_pay_bills", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_it_button_pay_bills"
        }

        return NSLocalizedString("screen_yap_it_button_pay_bills", bundle: bundle, comment: "")
      }

      /// Value: Pay salary now
      static func screen_household_employee_salary_pay_now_button_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_employee_salary_pay_now_button_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_employee_salary_pay_now_button_text"
        }

        return NSLocalizedString("screen_household_employee_salary_pay_now_button_text", bundle: bundle, comment: "")
      }

      /// Value: Pay salary to %@
      static func screen_household_pay_salary_screen_display_text_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_pay_salary_screen_display_text_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pay_salary_screen_display_text_title"
        }

        let format = NSLocalizedString("screen_household_pay_salary_screen_display_text_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Pay your help using Household
      static func screen_yfy_you_are_pro_text_pay_your_help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_pay_your_help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_pay_your_help"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_pay_your_help", bundle: bundle, comment: "")
      }

      /// Value: Paying your household help is now easier than ever
      static func screen_yap_house_hold_onboarding_landing_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_heading"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Payment confirmation
      static func screen_household_payment_confirmation_tool_bar_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_payment_confirmation_tool_bar_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_payment_confirmation_tool_bar_text"
        }

        return NSLocalizedString("screen_household_payment_confirmation_tool_bar_text", bundle: bundle, comment: "")
      }

      /// Value: Payments abroad
      static func screen_card_limits_display_text_payment_abroad_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_payment_abroad_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_payment_abroad_title"
        }

        return NSLocalizedString("screen_card_limits_display_text_payment_abroad_title", bundle: bundle, comment: "")
      }

      /// Value: Pending confirmation
      static func screen_b2c_eid_info_review_display_text_emirates_id_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_display_text_emirates_id_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_emirates_id_sub_heading"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_display_text_emirates_id_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Pending transactions
      static func screen_transaction_filter_display_text_pending_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_pending_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_pending_transactions"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_pending_transactions", bundle: bundle, comment: "")
      }

      /// Value: Permission denied!
      static func common_display_text_permission_denied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_permission_denied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_permission_denied"
        }

        return NSLocalizedString("common_display_text_permission_denied", bundle: bundle, comment: "")
      }

      /// Value: Personal
      static func screen_home_button_personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_button_personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_button_personal"
        }

        return NSLocalizedString("screen_home_button_personal", bundle: bundle, comment: "")
      }

      /// Value: Personal details
      static func screen_personal_details_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_title"
        }

        return NSLocalizedString("screen_personal_details_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Personal details
      static func screen_user_profile_display_text_personal_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_personal_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_personal_details"
        }

        return NSLocalizedString("screen_user_profile_display_text_personal_details", bundle: bundle, comment: "")
      }

      /// Value: Personalize your profile with a picture of you (or your pet)
      static func screen_yfy_get_started_goal_four_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_goal_four_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_goal_four_description"
        }

        return NSLocalizedString("screen_yfy_get_started_goal_four_description", bundle: bundle, comment: "")
      }

      /// Value: Phone number
      static func screen_add_beneficiary_detail_display_text_transfer_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_phone"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_phone", bundle: bundle, comment: "")
      }

      /// Value: Phone number (optional)
      static func screen_add_beneficiary_detail_display_text_transfer_phone_optional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_phone_optional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_phone_optional"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_phone_optional", bundle: bundle, comment: "")
      }

      /// Value: Physical card
      static func common_display_text_physical_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_physical_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_physical_card"
        }

        return NSLocalizedString("common_display_text_physical_card", bundle: bundle, comment: "")
      }

      /// Value: Pick an expense pot
      static func screen_iban_send_money_success_pick_expense_pot_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_pick_expense_pot_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_pick_expense_pot_button"
        }

        return NSLocalizedString("screen_iban_send_money_success_pick_expense_pot_button", bundle: bundle, comment: "")
      }

      /// Value: Pickup agent location
      static func custom_view_funds_transfer_display_text_location_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("custom_view_funds_transfer_display_text_location_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "custom_view_funds_transfer_display_text_location_heading"
        }

        return NSLocalizedString("custom_view_funds_transfer_display_text_location_heading", bundle: bundle, comment: "")
      }

      /// Value: Plan
      static func screen_yap_house_hold_confirm_payment_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_title"
        }

        return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Please enter alphabets only
      static func screen_name_special_character_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_name_special_character_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_name_special_character_error"
        }

        return NSLocalizedString("screen_name_special_character_error", bundle: bundle, comment: "")
      }

      /// Value: Please log in to your email address to validate your email and continue with access to YAP!
      static func screen_unverified_success_display_text_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_unverified_success_display_text_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_unverified_success_display_text_description"
        }

        return NSLocalizedString("screen_unverified_success_display_text_description", bundle: bundle, comment: "")
      }

      /// Value: Please remove %@, we will refund you the subscription fee
      static func screen_household_card_screen_ineligible_card_alert_description(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_card_screen_ineligible_card_alert_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_ineligible_card_alert_description"
        }

        let format = NSLocalizedString("screen_household_card_screen_ineligible_card_alert_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Please select a location from within United Arab Emirates
      static func screen_meeting_location_display_text_uae_location_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_display_text_uae_location_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_display_text_uae_location_error"
        }

        return NSLocalizedString("screen_meeting_location_display_text_uae_location_error", bundle: bundle, comment: "")
      }

      /// Value: Please update your Emirates ID to continue using YAP
      static func common_display_text_account_eid_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_account_eid_expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_account_eid_expired"
        }

        return NSLocalizedString("common_display_text_account_eid_expired", bundle: bundle, comment: "")
      }

      /// Value: Please update your app in order to continue.
      static func screen_splash_display_text_force_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_splash_display_text_force_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_splash_display_text_force_update"
        }

        return NSLocalizedString("screen_splash_display_text_force_update", bundle: bundle, comment: "")
      }

      /// Value: Please wait we are syncing your account
      static func common_display_text_account_syncing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_account_syncing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_account_syncing"
        }

        return NSLocalizedString("common_display_text_account_syncing", bundle: bundle, comment: "")
      }

      /// Value: Premier airport lounge access
      static func screen_add_card_display_text_feature_premier_airport_lounge_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_premier_airport_lounge_access", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_premier_airport_lounge_access"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_premier_airport_lounge_access", bundle: bundle, comment: "")
      }

      /// Value: Primary card
      static func commone_disply_text_card_name_primary_silver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_primary_silver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_primary_silver"
        }

        return NSLocalizedString("commone_disply_text_card_name_primary_silver", bundle: bundle, comment: "")
      }

      /// Value: Priority customer support
      static func screen_add_card_display_text_feature_priority_customer_support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_priority_customer_support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_priority_customer_support"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_priority_customer_support", bundle: bundle, comment: "")
      }

      /// Value: Privacy
      static func screen_user_profile_display_text_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_privacy"
        }

        return NSLocalizedString("screen_user_profile_display_text_privacy", bundle: bundle, comment: "")
      }

      /// Value: Profile
      static func screen_user_profile_display_text_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_profile"
        }

        return NSLocalizedString("screen_user_profile_display_text_profile", bundle: bundle, comment: "")
      }

      /// Value: Purchased packages
      static func screen_store_display_tour_guide_text_title_purchase_package(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_store_display_tour_guide_text_title_purchase_package", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_store_display_tour_guide_text_title_purchase_package"
        }

        return NSLocalizedString("screen_store_display_tour_guide_text_title_purchase_package", bundle: bundle, comment: "")
      }

      /// Value: Queue up!
      static func screen_onboarding_congratulations_waiting_user_button_complete_verification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_congratulations_waiting_user_button_complete_verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_congratulations_waiting_user_button_complete_verification"
        }

        return NSLocalizedString("screen_onboarding_congratulations_waiting_user_button_complete_verification", bundle: bundle, comment: "")
      }

      /// Value: Re-enter your new passcode
      static func screen_confirm_passcode_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_passcode_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_passcode_display_text_heading"
        }

        return NSLocalizedString("screen_confirm_passcode_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Re-scan Emirates ID
      static func common_button_re_scan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_re_scan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_re_scan"
        }

        return NSLocalizedString("common_button_re_scan", bundle: bundle, comment: "")
      }

      /// Value: Re-scan Emirates ID
      static func screen_b2c_eid_info_review_button_title_rescan_eid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_eid_info_review_button_title_rescan_eid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_button_title_rescan_eid"
        }

        return NSLocalizedString("screen_b2c_eid_info_review_button_title_rescan_eid", bundle: bundle, comment: "")
      }

      /// Value: Re-send
      static func screen_household_card_screen_decline_card_alert_button_title_resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_decline_card_alert_button_title_resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_decline_card_alert_button_title_resend"
        }

        return NSLocalizedString("screen_household_card_screen_decline_card_alert_button_title_resend", bundle: bundle, comment: "")
      }

      /// Value: Reactivate subscription
      static func screen_household_reactivate_subscription_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_reactivate_subscription_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_reactivate_subscription_title"
        }

        return NSLocalizedString("screen_household_reactivate_subscription_title", bundle: bundle, comment: "")
      }

      /// Value: Real-time banking
      static func screen_welcome_b2c_display_text_page1_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page1_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page1_title"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page1_title", bundle: bundle, comment: "")
      }

      /// Value: Real-time benefits
      static func screen_welcome_b2c_display_text_page3_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page3_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page3_title"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page3_title", bundle: bundle, comment: "")
      }

      /// Value: Real-time exchange rates
      static func screen_add_card_display_text_feature_realtime_exchange_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_realtime_exchange_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_realtime_exchange_rate"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_realtime_exchange_rate", bundle: bundle, comment: "")
      }

      /// Value: Real-time perks
      static func screen_welcome_b2c_display_text_page2_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_welcome_b2c_display_text_page2_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_welcome_b2c_display_text_page2_title"
        }

        return NSLocalizedString("screen_welcome_b2c_display_text_page2_title", bundle: bundle, comment: "")
      }

      /// Value: Reason for transfer
      static func screen_international_funds_transfer_display_text_reson(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_reson", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_reson"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_reson", bundle: bundle, comment: "")
      }

      /// Value: Received
      static func screen_transaction_details_display_text_received(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_received", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_received"
        }

        return NSLocalizedString("screen_transaction_details_display_text_received", bundle: bundle, comment: "")
      }

      /// Value: Receiver
      static func screen_transaction_details_display_text_receiver_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_receiver_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_receiver_name"
        }

        return NSLocalizedString("screen_transaction_details_display_text_receiver_name", bundle: bundle, comment: "")
      }

      /// Value: Recent transfers
      static func screen_send_money_display_text_recent_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_display_text_recent_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_display_text_recent_transfer"
        }

        return NSLocalizedString("screen_send_money_display_text_recent_transfer", bundle: bundle, comment: "")
      }

      /// Value: Recent transfers
      static func screen_y2y_display_text_recent_transfers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_recent_transfers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_recent_transfers"
        }

        return NSLocalizedString("screen_y2y_display_text_recent_transfers", bundle: bundle, comment: "")
      }

      /// Value: Redeemed by %d friends
      static func screen_invite_friend_display_text_redeemed_by_friends(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_invite_friend_display_text_redeemed_by_friends", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_redeemed_by_friends"
        }

        let format = NSLocalizedString("screen_invite_friend_display_text_redeemed_by_friends", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Redeemed by 1 friend
      static func screen_invite_friend_display_text_redeemed_by_1_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_redeemed_by_1_friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_redeemed_by_1_friend"
        }

        return NSLocalizedString("screen_invite_friend_display_text_redeemed_by_1_friend", bundle: bundle, comment: "")
      }

      /// Value: Refer a friend
      static func screen_invite_friend_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_title"
        }

        return NSLocalizedString("screen_invite_friend_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Refer a friend
      static func screen_menu_display_text_refer_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_refer_friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_refer_friend"
        }

        return NSLocalizedString("screen_menu_display_text_refer_friend", bundle: bundle, comment: "")
      }

      /// Value: Reference number
      static func custom_view_funds_transfer_display_text_reference_number_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("custom_view_funds_transfer_display_text_reference_number_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "custom_view_funds_transfer_display_text_reference_number_heading"
        }

        return NSLocalizedString("custom_view_funds_transfer_display_text_reference_number_heading", bundle: bundle, comment: "")
      }

      /// Value: Reference number
      static func screen_transaction_details_display_text_refrence_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_refrence_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_refrence_number"
        }

        return NSLocalizedString("screen_transaction_details_display_text_refrence_number", bundle: bundle, comment: "")
      }

      /// Value: Remember ID
      static func screen_sign_in_display_text_remember_id_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_display_text_remember_id_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_display_text_remember_id_text"
        }

        return NSLocalizedString("screen_sign_in_display_text_remember_id_text", bundle: bundle, comment: "")
      }

      /// Value: Remember this PIN as you’ll need it for all your transactions, and make sure you don’t share it with anyone
      static func screen_change_pin_success_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_pin_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_pin_success_display_text_sub_heading"
        }

        return NSLocalizedString("screen_change_pin_success_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Remove
      static func screen_card_detail_button_remove_card_alert_remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_remove_card_alert_remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_remove_card_alert_remove"
        }

        return NSLocalizedString("screen_card_detail_button_remove_card_alert_remove", bundle: bundle, comment: "")
      }

      /// Value: Remove
      static func screen_remove_funds_button_remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_remove_funds_button_remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_button_remove"
        }

        return NSLocalizedString("screen_remove_funds_button_remove", bundle: bundle, comment: "")
      }

      /// Value: Remove
      static func screen_topup_card_details_display_text_remove_card_confirmation_remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_remove_card_confirmation_remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_remove_card_confirmation_remove"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_remove_card_confirmation_remove", bundle: bundle, comment: "")
      }

      /// Value: Remove & Refund
      static func screen_household_card_screen_decline_card_alert_button_title_remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_decline_card_alert_button_title_remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_decline_card_alert_button_title_remove"
        }

        return NSLocalizedString("screen_household_card_screen_decline_card_alert_button_title_remove", bundle: bundle, comment: "")
      }

      /// Value: Remove & Refund
      static func screen_household_card_screen_ineligible_card_alert_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_ineligible_card_alert_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_ineligible_card_alert_button_title"
        }

        return NSLocalizedString("screen_household_card_screen_ineligible_card_alert_button_title", bundle: bundle, comment: "")
      }

      /// Value: Remove card
      static func screen_card_detail_button_remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_remove"
        }

        return NSLocalizedString("screen_card_detail_button_remove", bundle: bundle, comment: "")
      }

      /// Value: Remove card
      static func screen_topup_card_details_button_remove_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_button_remove_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_button_remove_card"
        }

        return NSLocalizedString("screen_topup_card_details_button_remove_card", bundle: bundle, comment: "")
      }

      /// Value: Remove card from YAP account
      static func screen_card_detail_display_text_remove_card_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_display_text_remove_card_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_display_text_remove_card_alert_title"
        }

        return NSLocalizedString("screen_card_detail_display_text_remove_card_alert_title", bundle: bundle, comment: "")
      }

      /// Value: Remove funds
      static func screen_card_detail_button_remove_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_remove_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_remove_funds"
        }

        return NSLocalizedString("screen_card_detail_button_remove_funds", bundle: bundle, comment: "")
      }

      /// Value: Remove funds
      static func screen_remove_funds_display_text_remove_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_remove_funds_display_text_remove_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_remove_funds"
        }

        return NSLocalizedString("screen_remove_funds_display_text_remove_funds", bundle: bundle, comment: "")
      }

      /// Value: Remove photo
      static func screen_user_profile_display_text_remove_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_remove_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_remove_photo"
        }

        return NSLocalizedString("screen_user_profile_display_text_remove_photo", bundle: bundle, comment: "")
      }

      /// Value: Reorder card
      static func screen_cards_button_reorder_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_button_reorder_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_button_reorder_card"
        }

        return NSLocalizedString("screen_cards_button_reorder_card", bundle: bundle, comment: "")
      }

      /// Value: Reorder new card
      static func screen_card_blocked_button_reorder_new_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_blocked_button_reorder_new_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_blocked_button_reorder_new_card"
        }

        return NSLocalizedString("screen_card_blocked_button_reorder_new_card", bundle: bundle, comment: "")
      }

      /// Value: Reorder this card
      static func screen_reorder_spare_card_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_reorder_spare_card_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_reorder_spare_card_display_text_title"
        }

        return NSLocalizedString("screen_reorder_spare_card_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Report lost or stolen card
      static func screen_card_detail_button_report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_report"
        }

        return NSLocalizedString("screen_card_detail_button_report", bundle: bundle, comment: "")
      }

      /// Value: Report lost or stolen card
      static func screen_report_card_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_title"
        }

        return NSLocalizedString("screen_report_card_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Request Money
      static func screen_yap_it_button_request_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_it_button_request_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_it_button_request_money"
        }

        return NSLocalizedString("screen_yap_it_button_request_money", bundle: bundle, comment: "")
      }

      /// Value: Resend OTP
      static func screen_device_registration_otp_button_resend_otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_device_registration_otp_button_resend_otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_device_registration_otp_button_resend_otp"
        }

        return NSLocalizedString("screen_device_registration_otp_button_resend_otp", bundle: bundle, comment: "")
      }

      /// Value: Resend OTP
      static func screen_verify_phone_number_button_resend_otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_phone_number_button_resend_otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_phone_number_button_resend_otp"
        }

        return NSLocalizedString("screen_verify_phone_number_button_resend_otp", bundle: bundle, comment: "")
      }

      /// Value: Retail payments
      static func screen_card_limits_display_text_retail_payment_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_retail_payment_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_retail_payment_title"
        }

        return NSLocalizedString("screen_card_limits_display_text_retail_payment_title", bundle: bundle, comment: "")
      }

      /// Value: Retry
      static func common_display_text_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_retry"
        }

        return NSLocalizedString("common_display_text_retry", bundle: bundle, comment: "")
      }

      /// Value: Rose Gold Premium Card
      static func commone_disply_text_card_name_premium_rose_gold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commone_disply_text_card_name_premium_rose_gold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commone_disply_text_card_name_premium_rose_gold"
        }

        return NSLocalizedString("commone_disply_text_card_name_premium_rose_gold", bundle: bundle, comment: "")
      }

      /// Value: SMS notifications
      static func screen_notification_settings_display_text_header_sms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_header_sms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_header_sms"
        }

        return NSLocalizedString("screen_notification_settings_display_text_header_sms", bundle: bundle, comment: "")
      }

      /// Value: SWIFT/BIC
      static func screen_more_bank_details_display_text_swift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_swift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_swift"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_swift", bundle: bundle, comment: "")
      }

      /// Value: Salary
      static func screen_house_hold_salary_profile_salary_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_salary_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_salary_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_salary_text", bundle: bundle, comment: "")
      }

      /// Value: Salary has been transferred successfully
      static func screen_household_normal_payment_success_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_normal_payment_success_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_normal_payment_success_text"
        }

        return NSLocalizedString("screen_household_normal_payment_success_text", bundle: bundle, comment: "")
      }

      /// Value: Salary has been transferred successfully and a monthly recurring payment has been set for:
      static func screen_household_recurring_payment_success_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_recurring_payment_success_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_recurring_payment_success_text"
        }

        return NSLocalizedString("screen_household_recurring_payment_success_text", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func screen_add_note_display_text_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_note_display_text_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_note_display_text_save"
        }

        return NSLocalizedString("screen_add_note_display_text_save", bundle: bundle, comment: "")
      }

      /// Value: Schedule once
      static func screen_household_employee_salary_schedule_once_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_employee_salary_schedule_once_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_employee_salary_schedule_once_heading_text"
        }

        return NSLocalizedString("screen_household_employee_salary_schedule_once_heading_text", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func screen_home_display_tour_guide_text_title_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_title_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_title_search"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_title_search", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func screen_send_money_input_text_search_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_input_text_search_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_input_text_search_hint"
        }

        return NSLocalizedString("screen_send_money_input_text_search_hint", bundle: bundle, comment: "")
      }

      /// Value: Secured by YAP
      static func screen_payment_card_detail_text_secure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_payment_card_detail_text_secure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_payment_card_detail_text_secure"
        }

        return NSLocalizedString("screen_payment_card_detail_text_secure", bundle: bundle, comment: "")
      }

      /// Value: Security
      static func screen_user_profile_display_text_security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_security"
        }

        return NSLocalizedString("screen_user_profile_display_text_security", bundle: bundle, comment: "")
      }

      /// Value: See details
      static func screen_cards_display_text_see_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_see_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_see_details"
        }

        return NSLocalizedString("screen_cards_display_text_see_details", bundle: bundle, comment: "")
      }

      /// Value: See terms and conditions
      static func screen_invite_friend_display_text_terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_terms_and_conditions"
        }

        return NSLocalizedString("screen_invite_friend_display_text_terms_and_conditions", bundle: bundle, comment: "")
      }

      /// Value: Select
      static func common_button_select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_select"
        }

        return NSLocalizedString("common_button_select", bundle: bundle, comment: "")
      }

      /// Value: Select a card color
      static func screen_household_card_selection_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_selection_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_selection_display_text_title"
        }

        return NSLocalizedString("screen_household_card_selection_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Select a plan. You will be charged only when your Household staff confirms their card.
      static func screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_house_hold_plan_heading", bundle: bundle, comment: "")
      }

      /// Value: Select a reason for transfer
      static func screen_international_funds_transfer_display_text_reason_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_reason_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_reason_placeholder"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_reason_placeholder", bundle: bundle, comment: "")
      }

      /// Value: Select a type of card
      static func screen_add_card_display_text_select_card_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_select_card_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_select_card_type"
        }

        return NSLocalizedString("screen_add_card_display_text_select_card_type", bundle: bundle, comment: "")
      }

      /// Value: Select category
      static func screen_change_transaction_category_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_transaction_category_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_transaction_category_title"
        }

        return NSLocalizedString("screen_change_transaction_category_title", bundle: bundle, comment: "")
      }

      /// Value: Select country
      static func screen_add_beneficiary_display_text_select_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_select_country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_select_country"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_select_country", bundle: bundle, comment: "")
      }

      /// Value: Select country of residence
      static func screen_add_beneficiary_display_text_select_country_residence(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_select_country_residence", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_select_country_residence"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_select_country_residence", bundle: bundle, comment: "")
      }

      /// Value: Select the emirate you live in
      static func screen_meeting_location_display_text_select_cities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_display_text_select_cities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_display_text_select_cities"
        }

        return NSLocalizedString("screen_meeting_location_display_text_select_cities", bundle: bundle, comment: "")
      }

      /// Value: Send cash to
      static func screen_cash_pickup_funds_display_text_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cash_pickup_funds_display_text_header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_pickup_funds_display_text_header"
        }

        return NSLocalizedString("screen_cash_pickup_funds_display_text_header", bundle: bundle, comment: "")
      }

      /// Value: Send me a new email
      static func screen_email_verified_popup_button_button_title_do_it_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verified_popup_button_button_title_do_it_later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verified_popup_button_button_title_do_it_later"
        }

        return NSLocalizedString("screen_email_verified_popup_button_button_title_do_it_later", bundle: bundle, comment: "")
      }

      /// Value: Send money
      static func screen_send_money_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_display_text_title"
        }

        return NSLocalizedString("screen_send_money_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Send money
      static func screen_yap_it_button_send_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_it_button_send_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_it_button_send_money"
        }

        return NSLocalizedString("screen_yap_it_button_send_money", bundle: bundle, comment: "")
      }

      /// Value: Send money outside YAP
      static func screen_yfy_better_together_text_send_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_text_send_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_text_send_money"
        }

        return NSLocalizedString("screen_yfy_better_together_text_send_money", bundle: bundle, comment: "")
      }

      /// Value: Send money to
      static func screen_international_funds_transfer_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_title"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Send money to %@
      static func screen_iban_send_money_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_iban_send_money_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_title"
        }

        let format = NSLocalizedString("screen_iban_send_money_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Send money to an account
      static func screen_add_beneficiary_display_text_transfer_type_bank_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_bank_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_transfer_type_bank_description"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_bank_description", bundle: bundle, comment: "")
      }

      /// Value: Send money to an agent location
      static func screen_add_beneficiary_display_text_transfer_type_cash_pickup_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_cash_pickup_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_transfer_type_cash_pickup_description"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type_cash_pickup_description", bundle: bundle, comment: "")
      }

      /// Value: Send money to someone instantly within your YAP network. Tap on the YAP it button on your dashboard, select a friend from the list and enter the desired amount.  Yes, It's that simple!
      static func screen_yfy_better_together_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_better_together_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: Send money to this beneficiary now?
      static func screen_add_beneficiary_detail_display_button_block_alert_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_button_block_alert_description"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_description", bundle: bundle, comment: "")
      }

      /// Value: Send salaries directly to account
      static func screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_send_salaries", bundle: bundle, comment: "")
      }

      /// Value: Send to a YAP contact
      static func screen_y2y_funds_transfer_display_text_title_yap_contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_display_text_title_yap_contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_title_yap_contact"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_display_text_title_yap_contact", bundle: bundle, comment: "")
      }

      /// Value: Sender
      static func screen_transaction_details_display_text_sendare_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_sendare_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_sendare_name"
        }

        return NSLocalizedString("screen_transaction_details_display_text_sendare_name", bundle: bundle, comment: "")
      }

      /// Value: Set PIN
      static func screen_card_delivery_status_button_set_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_delivery_status_button_set_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_delivery_status_button_set_pin"
        }

        return NSLocalizedString("screen_card_delivery_status_button_set_pin", bundle: bundle, comment: "")
      }

      /// Value: Set PIN
      static func screen_confirm_card_pin_button_create_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_confirm_card_pin_button_create_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_card_pin_button_create_pin"
        }

        return NSLocalizedString("screen_confirm_card_pin_button_create_pin", bundle: bundle, comment: "")
      }

      /// Value: Set PIN
      static func screen_lite_dashboard_button_set_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_lite_dashboard_button_set_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_lite_dashboard_button_set_pin"
        }

        return NSLocalizedString("screen_lite_dashboard_button_set_pin", bundle: bundle, comment: "")
      }

      /// Value: Set PIN
      static func view_payment_card_onboarding_stage_three_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_three_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_three_action_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_three_action_title", bundle: bundle, comment: "")
      }

      /// Value: Set a PIN code to start using it
      static func screen_household_pin_setup_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_setup_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_setup_description"
        }

        return NSLocalizedString("screen_household_pin_setup_description", bundle: bundle, comment: "")
      }

      /// Value: Set a profile photo
      static func screen_yfy_get_started_text_set_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_text_set_profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_text_set_profile"
        }

        return NSLocalizedString("screen_yfy_get_started_text_set_profile", bundle: bundle, comment: "")
      }

      /// Value: Set limits
      static func screen_card_detail_button_set_limits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_set_limits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_set_limits"
        }

        return NSLocalizedString("screen_card_detail_button_set_limits", bundle: bundle, comment: "")
      }

      /// Value: Set limits
      static func screen_card_limits_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_limits_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_limits_display_text_title"
        }

        return NSLocalizedString("screen_card_limits_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Set limits
      static func screen_primary_card_detail_tour_guide_set_limit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_set_limit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_set_limit_title"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_set_limit_title", bundle: bundle, comment: "")
      }

      /// Value: Set missions on YAP Young
      static func screen_yfy_you_are_pro_text_set_mission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_set_mission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_set_mission"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_set_mission", bundle: bundle, comment: "")
      }

      /// Value: Set passcode
      static func screen_create_passcode_button_create_new_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_create_passcode_button_create_new_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_create_passcode_button_create_new_passcode"
        }

        return NSLocalizedString("screen_create_passcode_button_create_new_passcode", bundle: bundle, comment: "")
      }

      /// Value: Set this salary transfer up as a recurring payment
      static func screen_iban_send_money_success_recurring_payment_display_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_recurring_payment_display_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_recurring_payment_display_text"
        }

        return NSLocalizedString("screen_iban_send_money_success_recurring_payment_display_text", bundle: bundle, comment: "")
      }

      /// Value: Set this salary transfer up as a recurring payment 
      static func screen_household_pay_salary_screen_recurring_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pay_salary_screen_recurring_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pay_salary_screen_recurring_text_title"
        }

        return NSLocalizedString("screen_household_pay_salary_screen_recurring_text_title", bundle: bundle, comment: "")
      }

      /// Value: Set up a multi-currency account
      static func screen_yfy_take_a_leap_text_set_mc_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_a_leap_text_set_mc_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_a_leap_text_set_mc_account"
        }

        return NSLocalizedString("screen_yfy_take_a_leap_text_set_mc_account", bundle: bundle, comment: "")
      }

      /// Value: Set up a recurring payment
      static func screen_household_recurring_payment_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_recurring_payment_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_recurring_payment_title"
        }

        return NSLocalizedString("screen_household_recurring_payment_title", bundle: bundle, comment: "")
      }

      /// Value: Set up a salary
      static func screen_house_hold_salary_profile_set_up_salary_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_set_up_salary_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_set_up_salary_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_set_up_salary_text", bundle: bundle, comment: "")
      }

      /// Value: Set up a single payment for a future date
      static func screen_household_employee_salary_future_payment_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_employee_salary_future_payment_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_employee_salary_future_payment_text"
        }

        return NSLocalizedString("screen_household_employee_salary_future_payment_text", bundle: bundle, comment: "")
      }

      /// Value: Set up a standing order for future payments
      static func screen_household_employee_salary_recurring_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_employee_salary_recurring_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_employee_salary_recurring_text"
        }

        return NSLocalizedString("screen_household_employee_salary_recurring_text", bundle: bundle, comment: "")
      }

      /// Value: Set up an expense pot
      static func screen_house_hold_salary_profile_set_up_expense_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_set_up_expense_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_set_up_expense_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_set_up_expense_text", bundle: bundle, comment: "")
      }

      /// Value: Set up automatic payments
      static func screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_setup_payments", bundle: bundle, comment: "")
      }

      /// Value: Set up automatic payouts for salary payments and make life easier with cashless domestic expenses
      static func screen_yap_house_hold_onboarding_landing_display_text_salary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_salary"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_salary", bundle: bundle, comment: "")
      }

      /// Value: Set up now
      static func screen_household_normal_payment_set_up_recurring_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_normal_payment_set_up_recurring_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_normal_payment_set_up_recurring_text"
        }

        return NSLocalizedString("screen_household_normal_payment_set_up_recurring_text", bundle: bundle, comment: "")
      }

      /// Value: Set your PIN
      static func screen_yfy_get_started_text_set_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_text_set_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_text_set_pin"
        }

        return NSLocalizedString("screen_yfy_get_started_text_set_pin", bundle: bundle, comment: "")
      }

      /// Value: Set your card PIN
      static func view_payment_card_onboarding_stage_three_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_three_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_three_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_three_title", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func common_button_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_settings"
        }

        return NSLocalizedString("common_button_settings", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func screen_invite_friend_button_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_button_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_button_share"
        }

        return NSLocalizedString("screen_invite_friend_button_share", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func screen_menu_display_text_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_share"
        }

        return NSLocalizedString("screen_menu_display_text_share", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func screen_more_bank_details_button_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_button_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_button_share"
        }

        return NSLocalizedString("screen_more_bank_details_button_share", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func screen_yap_house_hold_success_button_text_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_success_button_text_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_button_text_share"
        }

        return NSLocalizedString("screen_yap_house_hold_success_button_text_share", bundle: bundle, comment: "")
      }

      /// Value: Share this code
      static func custom_view_funds_transfer_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("custom_view_funds_transfer_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "custom_view_funds_transfer_button_title"
        }

        return NSLocalizedString("custom_view_funds_transfer_button_title", bundle: bundle, comment: "")
      }

      /// Value: Share your referral link
      static func screen_invite_friend_display_text_referal_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_referal_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_referal_code"
        }

        return NSLocalizedString("screen_invite_friend_display_text_referal_code", bundle: bundle, comment: "")
      }

      /// Value: Sharing is sweet, and it’s even better when you do it with friends. Send this special link to your special people so they change the way they bank too!
      static func screen_invite_friend_display_text_referal_reward(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_referal_reward", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_referal_reward"
        }

        return NSLocalizedString("screen_invite_friend_display_text_referal_reward", bundle: bundle, comment: "")
      }

      /// Value: Shipped
      static func common_delivery_status_shipped(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_delivery_status_shipped", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_delivery_status_shipped"
        }

        return NSLocalizedString("common_delivery_status_shipped", bundle: bundle, comment: "")
      }

      /// Value: Shipping
      static func common_delivery_status_shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_delivery_status_shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_delivery_status_shipping"
        }

        return NSLocalizedString("common_delivery_status_shipping", bundle: bundle, comment: "")
      }

      /// Value: Show us your social skills! Invite 10 friends to YAP to complete this level.  You know the drill.
      static func screen_yfy_you_are_a_pro_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_a_pro_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_a_pro_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_you_are_a_pro_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: Sign in
      static func screen_passcode_success_button_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_passcode_success_button_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_passcode_success_button_sign_in"
        }

        return NSLocalizedString("screen_passcode_success_button_sign_in", bundle: bundle, comment: "")
      }

      /// Value: Sign in
      static func screen_sign_in_button_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_button_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_button_sign_in"
        }

        return NSLocalizedString("screen_sign_in_button_sign_in", bundle: bundle, comment: "")
      }

      /// Value: Sign in
      static func screen_verify_passcode_button_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_button_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_button_sign_in"
        }

        return NSLocalizedString("screen_verify_passcode_button_sign_in", bundle: bundle, comment: "")
      }

      /// Value: Sign in to your YAP account
      static func screen_sign_in_display_text_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_display_text_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_display_text_heading_text"
        }

        return NSLocalizedString("screen_sign_in_display_text_heading_text", bundle: bundle, comment: "")
      }

      /// Value: Sign in with Face ID
      static func screen_user_profile_display_text_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_face_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_face_id"
        }

        return NSLocalizedString("screen_user_profile_display_text_face_id", bundle: bundle, comment: "")
      }

      /// Value: Sign in with Touch ID
      static func screen_sign_in_button_sign_in_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_button_sign_in_touch_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_button_sign_in_touch_id"
        }

        return NSLocalizedString("screen_sign_in_button_sign_in_touch_id", bundle: bundle, comment: "")
      }

      /// Value: Sign in with Touch ID
      static func screen_user_profile_display_text_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_touch_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_touch_id"
        }

        return NSLocalizedString("screen_user_profile_display_text_touch_id", bundle: bundle, comment: "")
      }

      /// Value: Sign up to Household
      static func screen_yfy_you_are_pro_text_sign_up_house_hold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_sign_up_house_hold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_sign_up_house_hold"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_sign_up_house_hold", bundle: bundle, comment: "")
      }

      /// Value: Signed up friends: %d
      static func screen_waiting_list_rank_invitees_list_button_title_text(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_button_title_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_invitees_list_button_title_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_button_title_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Skip and do it later
      static func screen_household_welcome_skip_verification_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_skip_verification_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_skip_verification_button_title"
        }

        return NSLocalizedString("screen_household_welcome_skip_verification_button_title", bundle: bundle, comment: "")
      }

      /// Value: Skip and go to dashboard
      static func screen_b2c_kyc_home_button_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_kyc_home_button_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_kyc_home_button_skip"
        }

        return NSLocalizedString("screen_b2c_kyc_home_button_skip", bundle: bundle, comment: "")
      }

      /// Value: Skip and go to dashboard
      static func screen_b2c_kyc_home_button_skip_no_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_kyc_home_button_skip_no_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_kyc_home_button_skip_no_dashboard"
        }

        return NSLocalizedString("screen_b2c_kyc_home_button_skip_no_dashboard", bundle: bundle, comment: "")
      }

      /// Value: Skip for now
      static func screen_add_spare_card_display_text_skip_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_skip_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_skip_now"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_skip_now", bundle: bundle, comment: "")
      }

      /// Value: Some app features have been temporarily blocked for your security. This is because you made too many incorrect OTP attempts.  Get in touch by calling our agents at %@ or message us via the Live Chat so we can unblock your account right away!
      static func screen_otp_blocked_display_text_details_otp_blocked(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_otp_blocked_display_text_details_otp_blocked", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_otp_blocked_display_text_details_otp_blocked"
        }

        let format = NSLocalizedString("screen_otp_blocked_display_text_details_otp_blocked", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Some features may appear blocked for you as you made too many incorrect OTP attempts. Call or chat with us now to get full access.
      static func screen_otp_blocked_display_text_dashboard_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_otp_blocked_display_text_dashboard_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_otp_blocked_display_text_dashboard_notification"
        }

        return NSLocalizedString("screen_otp_blocked_display_text_dashboard_notification", bundle: bundle, comment: "")
      }

      /// Value: Some of your card's features are temporarily disabled. Get in touch with us at %@ for assistance.
      static func common_display_text_notification_feature_block(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_notification_feature_block", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_notification_feature_block"
        }

        let format = NSLocalizedString("common_display_text_notification_feature_block", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Some of your card’s features may not work at this time. This is because your card or account may have been blocked temporarily.  Get in touch by calling our agents at %@ or message us via Live Chat so we can unblock your account right away!
      static func screen_otp_blocked_display_text_details_access_restricted(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_otp_blocked_display_text_details_access_restricted", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_otp_blocked_display_text_details_access_restricted"
        }

        let format = NSLocalizedString("screen_otp_blocked_display_text_details_access_restricted", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Sorry Joe, looks like you already have a Household plan connected to this Emirates ID. Please log out and inform your employer that we cannot proceed with activating your plan at this time. 
      static func screen_household_warning_display_text_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_warning_display_text_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_warning_display_text_description"
        }

        return NSLocalizedString("screen_household_warning_display_text_description", bundle: bundle, comment: "")
      }

      /// Value: Sorry, %@ is ineligible for a household card.
      static func screen_household_card_screen_ineligible_card_alert_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_card_screen_ineligible_card_alert_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_ineligible_card_alert_title"
        }

        let format = NSLocalizedString("screen_household_card_screen_ineligible_card_alert_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Sorry, that doesn't look right. We’re working on fixing it now. Please try again in sometime.
      static func common_display_text_fallback_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_fallback_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_fallback_error_message"
        }

        return NSLocalizedString("common_display_text_fallback_error_message", bundle: bundle, comment: "")
      }

      /// Value: Sorry, that’s too many incorrect attempts. Click on Forgot passcode to set a new one.
      static func screen_verify_passcode_text_account_locked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_text_account_locked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_text_account_locked"
        }

        return NSLocalizedString("screen_verify_passcode_text_account_locked", bundle: bundle, comment: "")
      }

      /// Value: Sorry, this feature isn’t available to you at this time. Please use live chat or call us on %@ to get access.
      static func common_display_text_feature_blocked_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_feature_blocked_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_feature_blocked_error"
        }

        let format = NSLocalizedString("common_display_text_feature_blocked_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Sorry, you've reached your daily limit. Let's try again tomorrow.
      static func common_display_text_daily_limit_error_limit_reached(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_daily_limit_error_limit_reached", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_daily_limit_error_limit_reached"
        }

        return NSLocalizedString("common_display_text_daily_limit_error_limit_reached", bundle: bundle, comment: "")
      }

      /// Value: Spare card benefits
      static func screen_card_feature_display_text_title_spare_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_feature_display_text_title_spare_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_feature_display_text_title_spare_card"
        }

        return NSLocalizedString("screen_card_feature_display_text_title_spare_card", bundle: bundle, comment: "")
      }

      /// Value: Spare physical card
      static func common_display_text_spare_physical_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_spare_physical_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_spare_physical_card"
        }

        return NSLocalizedString("common_display_text_spare_physical_card", bundle: bundle, comment: "")
      }

      /// Value: Spare virtual card
      static func screen_add_card_display_text_spare_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_spare_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_spare_card"
        }

        return NSLocalizedString("screen_add_card_display_text_spare_card", bundle: bundle, comment: "")
      }

      /// Value: Spend AED 100
      static func screen_yfy_up_and_running_text_spend_money(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_text_spend_money", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_text_spend_money"
        }

        return NSLocalizedString("screen_yfy_up_and_running_text_spend_money", bundle: bundle, comment: "")
      }

      /// Value: Spend AED 1000
      static func screen_yfy_you_are_pro_text_spend_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_you_are_pro_text_spend_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_you_are_pro_text_spend_amount"
        }

        return NSLocalizedString("screen_yfy_you_are_pro_text_spend_amount", bundle: bundle, comment: "")
      }

      /// Value: Spent
      static func screen_transaction_details_display_text_spent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_spent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_spent"
        }

        return NSLocalizedString("screen_transaction_details_display_text_spent", bundle: bundle, comment: "")
      }

      /// Value: Split bills (not friendships) the next time you go out with your friends.  To split a bill, simply swipe left on the transaction you want to split, send out reminders to your friends and settle up effortlessly.  Psst… you can also send reminders!
      static func screen_yfy_better_together_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_better_together_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: Split bills with YAP
      static func screen_yfy_better_together_text_split_bills(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_better_together_text_split_bills", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_better_together_text_split_bills"
        }

        return NSLocalizedString("screen_yfy_better_together_text_split_bills", bundle: bundle, comment: "")
      }

      /// Value: Start by adding a card
      static func screen_topup_card_selection_display_text_heading_no_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_heading_no_cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_heading_no_cards"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_heading_no_cards", bundle: bundle, comment: "")
      }

      /// Value: Start using your account to see all your transactions here
      static func screen_home_display_text_nothing_to_report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_text_nothing_to_report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_text_nothing_to_report"
        }

        return NSLocalizedString("screen_home_display_text_nothing_to_report", bundle: bundle, comment: "")
      }

      /// Value: Starting date
      static func screen_household_start_date_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_start_date_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_start_date_title"
        }

        return NSLocalizedString("screen_household_start_date_title", bundle: bundle, comment: "")
      }

      /// Value: Statements
      static func screen_menu_display_text_statements(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_statements", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_statements"
        }

        return NSLocalizedString("screen_menu_display_text_statements", bundle: bundle, comment: "")
      }

      /// Value: Stay organized by adding transaction notes
      static func screen_transaction_details_display_text_note_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_note_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_note_description"
        }

        return NSLocalizedString("screen_transaction_details_display_text_note_description", bundle: bundle, comment: "")
      }

      /// Value: Struggling to keep up with managing your day-to-day house expenses? With Household, set up a quick and safe payment system so you can pay your help and manage expenses easily. Set up monthly salary payments, keep track of grocery spends, and simplify your life without having to rely on cash. Give your household help a card they can use for spending and remittances. 
      static func screen_yap_house_hold_onboarding_landing_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_onboarding_landing_display_text_sub_heading"
        }

        return NSLocalizedString("screen_yap_house_hold_onboarding_landing_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Submit now
      static func view_payment_card_onboarding_stage_additional_requirement_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_additional_requirement_action_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_action_title", bundle: bundle, comment: "")
      }

      /// Value: Subscription
      static func screen_household_subscription_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_subscription_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_subscription_title"
        }

        return NSLocalizedString("screen_household_subscription_title", bundle: bundle, comment: "")
      }

      /// Value: Subscriptions
      static func screen_more_home_display_text_tile_subscriptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_subscriptions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_subscriptions"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_subscriptions", bundle: bundle, comment: "")
      }

      /// Value: Success!
      static func screen_change_address_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_address_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_address_success_display_text_heading"
        }

        return NSLocalizedString("screen_change_address_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Success!
      static func screen_household_pin_change_success_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_change_success_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_change_success_heading"
        }

        return NSLocalizedString("screen_household_pin_change_success_heading", bundle: bundle, comment: "")
      }

      /// Value: Success!
      static func screen_household_welcome_success_heading_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_welcome_success_heading_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_success_heading_title"
        }

        return NSLocalizedString("screen_household_welcome_success_heading_title", bundle: bundle, comment: "")
      }

      /// Value: Success!
      static func screen_phone_number_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_phone_number_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_phone_number_success_display_text_heading"
        }

        return NSLocalizedString("screen_phone_number_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Success!
      static func screen_unverified_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_unverified_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_unverified_success_display_text_heading"
        }

        return NSLocalizedString("screen_unverified_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Successful card transactions
      static func screen_notification_settings_display_text_setting_success_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_settings_display_text_setting_success_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_settings_display_text_setting_success_transaction"
        }

        return NSLocalizedString("screen_notification_settings_display_text_setting_success_transaction", bundle: bundle, comment: "")
      }

      /// Value: Swift code
      static func screen_bank_details_display_text_swift_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_display_text_swift_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_display_text_swift_code"
        }

        return NSLocalizedString("screen_bank_details_display_text_swift_code", bundle: bundle, comment: "")
      }

      /// Value: Swift code
      static func screen_beneficiary_overview_display_text_swift_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_beneficiary_overview_display_text_swift_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_beneficiary_overview_display_text_swift_code"
        }

        return NSLocalizedString("screen_beneficiary_overview_display_text_swift_code", bundle: bundle, comment: "")
      }

      /// Value: Take the leap
      static func screen_yfy_home_screen_take_the_leap_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_take_the_leap_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_take_the_leap_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_take_the_leap_title", bundle: bundle, comment: "")
      }

      /// Value: Tap here to view your complete bank account details, useful for topping up and sharing with contacts for transfer purposes.
      static func screen_more_tour_guide_bank_detail_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_tour_guide_bank_detail_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_tour_guide_bank_detail_description"
        }

        return NSLocalizedString("screen_more_tour_guide_bank_detail_description", bundle: bundle, comment: "")
      }

      /// Value: Tap map to confirm location
      static func screen_meeting_location_button_confirm_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_button_confirm_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_button_confirm_location"
        }

        return NSLocalizedString("screen_meeting_location_button_confirm_location", bundle: bundle, comment: "")
      }

      /// Value: Tap to change category
      static func screen_transaction_details_display_text_change_category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_change_category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_change_category"
        }

        return NSLocalizedString("screen_transaction_details_display_text_change_category", bundle: bundle, comment: "")
      }

      /// Value: Tap to scan your Emirates ID
      static func screen_b2c_kyc_home_emirates_id_scan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_kyc_home_emirates_id_scan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_kyc_home_emirates_id_scan"
        }

        return NSLocalizedString("screen_b2c_kyc_home_emirates_id_scan", bundle: bundle, comment: "")
      }

      /// Value: Teach your kids how to be good with money. Set up a YAP Young account for your child and send them pocket money through the app into their YAP Young card!
      static func screen_yfy_yap_store_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_yap_store_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_yap_store_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_yap_store_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: Tell us about the bank
      static func screen_bank_details_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bank_details_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bank_details_display_text_title"
        }

        return NSLocalizedString("screen_bank_details_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Tell us about the beneficiary
      static func screen_add_beneficiary_detail_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_title"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Tell us how to contact   %@
      static func screen_yap_house_hold_user_info_contact_display_text_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_user_info_contact_display_text_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_user_info_contact_display_text_heading"
        }

        let format = NSLocalizedString("screen_yap_house_hold_user_info_contact_display_text_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Tell us what happened to your card
      static func screen_report_card_display_text_block_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_block_card_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_block_card_title"
        }

        return NSLocalizedString("screen_report_card_display_text_block_card_title", bundle: bundle, comment: "")
      }

      /// Value: Tell your friends about YAP so you can send and receive money instantly!
      static func screen_y2y_display_text_invite_no_phone_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_invite_no_phone_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_invite_no_phone_contacts"
        }

        return NSLocalizedString("screen_y2y_display_text_invite_no_phone_contacts", bundle: bundle, comment: "")
      }

      /// Value: Tell your friends about us!
      static func screen_invite_friend_display_text_reward(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_reward", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_reward"
        }

        return NSLocalizedString("screen_invite_friend_display_text_reward", bundle: bundle, comment: "")
      }

      /// Value: Temporary passcode
      static func screen_yap_house_hold_success_display_text_share_pass_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_success_display_text_share_pass_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_success_display_text_share_pass_code"
        }

        return NSLocalizedString("screen_yap_house_hold_success_display_text_share_pass_code", bundle: bundle, comment: "")
      }

      /// Value: Terms & Conditions
      static func screen_system_permission_text_terms_and_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_terms_and_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_terms_and_conditions"
        }

        return NSLocalizedString("screen_system_permission_text_terms_and_conditions", bundle: bundle, comment: "")
      }

      /// Value: Terms & conditions
      static func screen_more_home_display_text_tile_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_terms"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_terms", bundle: bundle, comment: "")
      }

      /// Value: Terms and conditions
      static func screen_user_profile_display_text_terms_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_terms_conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_terms_conditions"
        }

        return NSLocalizedString("screen_user_profile_display_text_terms_conditions", bundle: bundle, comment: "")
      }

      /// Value: Thanks %@! Check that your details are correct so we can send you your card
      static func screen_b2c_household_eid_info_review_display_text_sub_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_b2c_household_eid_info_review_display_text_sub_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_household_eid_info_review_display_text_sub_title"
        }

        let format = NSLocalizedString("screen_b2c_household_eid_info_review_display_text_sub_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Thanks %@! Verify your details are exactly as per your Emirates ID. You can edit the name fields incase we got it wrong!
      static func screen_b2c_eid_info_review_display_text_subheading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_subheading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_subheading"
        }

        let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_subheading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Thanks %@! Verify your details so we can send you your YAP card
      static func screen_b2c_eid_info_review_display_text_sub_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_sub_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_eid_info_review_display_text_sub_title"
        }

        let format = NSLocalizedString("screen_b2c_eid_info_review_display_text_sub_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: That doesn't look right. Please try again
      static func screen_sign_in_display_text_error_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_display_text_error_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_display_text_error_text"
        }

        return NSLocalizedString("screen_sign_in_display_text_error_text", bundle: bundle, comment: "")
      }

      /// Value: That doesn’t look right. Please upload .jpg or .png only
      static func error_document_validation_malicious(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_document_validation_malicious", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_document_validation_malicious"
        }

        return NSLocalizedString("error_document_validation_malicious", bundle: bundle, comment: "")
      }

      /// Value: That first step was easy! Welcome to YAP. We're so happy you're here :)
      static func screen_yfy_get_started_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_get_started_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: That's over your daily limit. Please enter an amount lower than %@
      static func screen_y2y_funds_transfer_display_text_daily_limit_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_daily_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_daily_limit_error"
        }

        let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_daily_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: The Personalized Banking App
      static func screen_home_display_text_tag_line(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_text_tag_line", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_text_tag_line"
        }

        return NSLocalizedString("screen_home_display_text_tag_line", bundle: bundle, comment: "")
      }

      /// Value: The information you've entered will be lost
      static func screen_add_beneficiary_detail_display_text_cancel_popup_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_cancel_popup_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_cancel_popup_message"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_cancel_popup_message", bundle: bundle, comment: "")
      }

      /// Value: The ultimate YAP card – a 100% metal card with exclusive benefits.  The Metal card – or experience – is available in Black, Rose Gold and Chrome.
      static func screen_yfy_take_the_leap_goal_three_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_the_leap_goal_three_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_the_leap_goal_three_description"
        }

        return NSLocalizedString("screen_yfy_take_the_leap_goal_three_description", bundle: bundle, comment: "")
      }

      /// Value: There is no minimum salary requirement to sign up to YAP. We only ask this question for compliance purposes to safegaurd your account. 
      static func employment_info_questions_additional_info_for_salary_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("employment_info_questions_additional_info_for_salary_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "employment_info_questions_additional_info_for_salary_details"
        }

        return NSLocalizedString("employment_info_questions_additional_info_for_salary_details", bundle: bundle, comment: "")
      }

      /// Value: This 4-digit code is yours to keep. Please don’t share it with anyone
      static func screen_set_card_pin_welcome_display_text_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_welcome_display_text_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_welcome_display_text_sub_title"
        }

        return NSLocalizedString("screen_set_card_pin_welcome_display_text_sub_title", bundle: bundle, comment: "")
      }

      /// Value: This amount exceeds your daily transaction limit
      static func common_display_text_daily_limit_error_single_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_daily_limit_error_single_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_daily_limit_error_single_transaction"
        }

        return NSLocalizedString("common_display_text_daily_limit_error_single_transaction", bundle: bundle, comment: "")
      }

      /// Value: This card has expired
      static func screen_cards_display_text_expired_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_expired_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_expired_card"
        }

        return NSLocalizedString("screen_cards_display_text_expired_card", bundle: bundle, comment: "")
      }

      /// Value: This card is blocked/stolen
      static func screen_cards_display_text_hotlisted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_hotlisted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_hotlisted"
        }

        return NSLocalizedString("screen_cards_display_text_hotlisted", bundle: bundle, comment: "")
      }

      /// Value: This card is frozen
      static func screen_card_detail_display_text_frozen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_display_text_frozen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_display_text_frozen"
        }

        return NSLocalizedString("screen_card_detail_display_text_frozen", bundle: bundle, comment: "")
      }

      /// Value: This card is frozen
      static func screen_cards_display_text_freeze_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_freeze_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_freeze_card"
        }

        return NSLocalizedString("screen_cards_display_text_freeze_card", bundle: bundle, comment: "")
      }

      /// Value: This card will be removed from your top-up methods
      static func screen_topup_card_details_display_text_remove_card_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_remove_card_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_remove_card_confirmation"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_remove_card_confirmation", bundle: bundle, comment: "")
      }

      /// Value: This email doesn’t match what you first entered.
      static func screen_change_email_display_text_confirm_email_diff_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_email_display_text_confirm_email_diff_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_email_display_text_confirm_email_diff_error"
        }

        return NSLocalizedString("screen_change_email_display_text_confirm_email_diff_error", bundle: bundle, comment: "")
      }

      /// Value: This feature has been blocked due to too many OTP attempts. Use our live chat or call us on %@ to get access.
      static func common_display_text_otp_blocked_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_otp_blocked_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_otp_blocked_error"
        }

        let format = NSLocalizedString("common_display_text_otp_blocked_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: This is an indicator of your available balance. It is always updated in real time and supported by a daily transaction graph.
      static func screen_home_display_tour_guide_text_desc_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_desc_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_desc_amount"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_desc_amount", bundle: bundle, comment: "")
      }

      /// Value: This will be stored as your primary address
      static func screen_change_address_success_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_address_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_address_success_display_text_sub_heading"
        }

        return NSLocalizedString("screen_change_address_success_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Time to top up
      static func view_payment_card_onboarding_stage_four_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_four_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_four_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_four_title", bundle: bundle, comment: "")
      }

      /// Value: To confirm this is really you, enter %@’s number below
      static func screen_confirm_parent_mobile_display_text_instructions(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_confirm_parent_mobile_display_text_instructions", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_parent_mobile_display_text_instructions"
        }

        let format = NSLocalizedString("screen_confirm_parent_mobile_display_text_instructions", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Too many attempts. Please wait for
      static func screen_verify_passcode_text_incorrect_attempts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_text_incorrect_attempts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_text_incorrect_attempts"
        }

        return NSLocalizedString("screen_verify_passcode_text_incorrect_attempts", bundle: bundle, comment: "")
      }

      /// Value: Top menu
      static func screen_home_display_tour_guide_text_title_top_menue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_title_top_menue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_title_top_menue"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_title_top_menue", bundle: bundle, comment: "")
      }

      /// Value: Top up
      static func screen_add_spare_card_display_text_top_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_top_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_top_up"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_top_up", bundle: bundle, comment: "")
      }

      /// Value: Top up
      static func screen_topup_type_selection_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_type_selection_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_type_selection_display_text_title"
        }

        return NSLocalizedString("screen_topup_type_selection_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Top up confirmation
      static func screen_topup_card_cvv_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_cvv_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_cvv_display_text_title"
        }

        return NSLocalizedString("screen_topup_card_cvv_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Top up now
      static func screen_set_card_pin_success_button_create_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_success_button_create_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_success_button_create_pin"
        }

        return NSLocalizedString("screen_set_card_pin_success_button_create_pin", bundle: bundle, comment: "")
      }

      /// Value: Top up now
      static func view_payment_card_onboarding_stage_four_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_four_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_four_action_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_four_action_title", bundle: bundle, comment: "")
      }

      /// Value: Top up now with this card?
      static func screen_add_topup_card_display_text_succes_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_topup_card_display_text_succes_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_topup_card_display_text_succes_details"
        }

        return NSLocalizedString("screen_add_topup_card_display_text_succes_details", bundle: bundle, comment: "")
      }

      /// Value: Top up successful
      static func screen_topup_success_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_success_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_success_display_text_title"
        }

        return NSLocalizedString("screen_topup_success_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Total amount
      static func screen_transaction_details_display_text_total_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_total_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_total_amount"
        }

        return NSLocalizedString("screen_transaction_details_display_text_total_amount", bundle: bundle, comment: "")
      }

      /// Value: Touch ID
      static func screen_light_dashboard_button_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_light_dashboard_button_touch_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_light_dashboard_button_touch_id"
        }

        return NSLocalizedString("screen_light_dashboard_button_touch_id", bundle: bundle, comment: "")
      }

      /// Value: Track expenses through analytics
      static func screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_benefit_track_expense", bundle: bundle, comment: "")
      }

      /// Value: Track your delivery
      static func view_payment_card_onboarding_stage_card_on_the_way_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_card_on_the_way_action_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_action_title", bundle: bundle, comment: "")
      }

      /// Value: Transaction
      static func screen_payment_card_detail_display_text_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_payment_card_detail_display_text_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_payment_card_detail_display_text_transaction"
        }

        return NSLocalizedString("screen_payment_card_detail_display_text_transaction", bundle: bundle, comment: "")
      }

      /// Value: Transaction completed! You now have a physical spare card
      static func screen_add_spare_card_completion_display_text_complete_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_completion_display_text_complete_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_completion_display_text_complete_transaction"
        }

        return NSLocalizedString("screen_add_spare_card_completion_display_text_complete_transaction", bundle: bundle, comment: "")
      }

      /// Value: Transaction completed! You now have a physical spare card
      static func screen_report_card_display_text_complete_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_complete_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_complete_transaction"
        }

        return NSLocalizedString("screen_report_card_display_text_complete_transaction", bundle: bundle, comment: "")
      }

      /// Value: Transactions
      static func screen_payment_card_detail_display_text_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_payment_card_detail_display_text_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_payment_card_detail_display_text_transactions"
        }

        return NSLocalizedString("screen_payment_card_detail_display_text_transactions", bundle: bundle, comment: "")
      }

      /// Value: Transfer
      static func screen_house_hold_salary_profile_transfer_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_transfer_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_transfer_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_transfer_text", bundle: bundle, comment: "")
      }

      /// Value: Transfer a bonus or extra cash
      static func screen_house_hold_salary_profile_transfer_bonus_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_transfer_bonus_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_transfer_bonus_text"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_transfer_bonus_text", bundle: bundle, comment: "")
      }

      /// Value: Transfer a salary or add to an expense pot to get your Household analytics started!
      static func screen_household_analytics_screen_no_transection_detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_analytics_screen_no_transection_detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_analytics_screen_no_transection_detail"
        }

        return NSLocalizedString("screen_household_analytics_screen_no_transection_detail", bundle: bundle, comment: "")
      }

      /// Value: Transfer completed
      static func screen_iban_send_money_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_title"
        }

        return NSLocalizedString("screen_iban_send_money_success_title", bundle: bundle, comment: "")
      }

      /// Value: Transfer money to
      static func screen_domestic_funds_transfer_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_domestic_funds_transfer_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_domestic_funds_transfer_display_text_heading"
        }

        return NSLocalizedString("screen_domestic_funds_transfer_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Transfer successful
      static func screen_y2y_funds_transfer_success_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_success_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_success_display_text_title"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_success_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Transfer type
      static func screen_add_beneficiary_detail_display_text_transfer_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_transfer_type"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_transfer_type", bundle: bundle, comment: "")
      }

      /// Value: Transferring amount to a friend
      static func screen_international_funds_transfer_dropdown_text_reason_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_dropdown_text_reason_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_dropdown_text_reason_hint"
        }

        return NSLocalizedString("screen_international_funds_transfer_dropdown_text_reason_hint", bundle: bundle, comment: "")
      }

      /// Value: Transfers
      static func screen_house_hold_salary_profile_display_text_transfers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_house_hold_salary_profile_display_text_transfers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_house_hold_salary_profile_display_text_transfers"
        }

        return NSLocalizedString("screen_house_hold_salary_profile_display_text_transfers", bundle: bundle, comment: "")
      }

      /// Value: Transfers made before %@ UAE time will be processed on the same day. All transfers made after this time will be carried out on the next business day
      static func screen_domestic_funds_transfer_display_text_cutoff_time(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_domestic_funds_transfer_display_text_cutoff_time", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_domestic_funds_transfer_display_text_cutoff_time"
        }

        let format = NSLocalizedString("screen_domestic_funds_transfer_display_text_cutoff_time", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Travel insurance
      static func screen_add_card_display_text_feature_travel_insurance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_travel_insurance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_travel_insurance"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_travel_insurance", bundle: bundle, comment: "")
      }

      /// Value: Traveling abroad? Set up multi-currency on YAP (available on Prime and Metal plans), create currency wallets for the countries you’re visiting, and spend locally when you get there! You can forget about exchanging cash or running out mid-holiday :)
      static func screen_yfy_take_the_leap_goal_four_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_the_leap_goal_four_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_the_leap_goal_four_description"
        }

        return NSLocalizedString("screen_yfy_take_the_leap_goal_four_description", bundle: bundle, comment: "")
      }

      /// Value: Try ty freeze and unfreeze your card. You’ll know what to do when you lost or your card has been stolen
      static func screen_yfy_up_and_running_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_up_and_running_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: Twitter
      static func screen_user_profile_display_text_twitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_twitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_twitter"
        }

        return NSLocalizedString("screen_user_profile_display_text_twitter", bundle: bundle, comment: "")
      }

      /// Value: Type
      static func screen_topup_card_details_display_text_placeholder_card_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_details_display_text_placeholder_card_type"
        }

        return NSLocalizedString("screen_topup_card_details_display_text_placeholder_card_type", bundle: bundle, comment: "")
      }

      /// Value: Type something...
      static func screen_add_note_display_text_type_something(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_note_display_text_type_something", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_note_display_text_type_something"
        }

        return NSLocalizedString("screen_add_note_display_text_type_something", bundle: bundle, comment: "")
      }

      /// Value: Uh oh! You’ll need to have a minimum balance of %@ plus the fee stated to proceed with this payment.
      static func common_display_text_available_balance_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_available_balance_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_available_balance_error"
        }

        let format = NSLocalizedString("common_display_text_available_balance_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Unfortunately, we're unable to proceed with creating your account at this time. However, we appreciate your interest in getting a YAP account.
      static func screen_kyc_information_error_display_text_explanation_sanctioned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_explanation_sanctioned", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_explanation_sanctioned"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_explanation_sanctioned", bundle: bundle, comment: "")
      }

      /// Value: Unfreeze card
      static func screen_card_detail_button_unfreeze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_unfreeze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_unfreeze"
        }

        return NSLocalizedString("screen_card_detail_button_unfreeze", bundle: bundle, comment: "")
      }

      /// Value: Unfreeze card
      static func screen_cards_button_unfreeze_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_button_unfreeze_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_button_unfreeze_card"
        }

        return NSLocalizedString("screen_cards_button_unfreeze_card", bundle: bundle, comment: "")
      }

      /// Value: Unfreeze now
      static func screen_card_detail_button_unfreeze_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_unfreeze_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_unfreeze_now"
        }

        return NSLocalizedString("screen_card_detail_button_unfreeze_now", bundle: bundle, comment: "")
      }

      /// Value: Unspecified
      static func common_display_text_gender_unspecified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_gender_unspecified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_gender_unspecified"
        }

        return NSLocalizedString("common_display_text_gender_unspecified", bundle: bundle, comment: "")
      }

      /// Value: Up and running
      static func screen_yfy_home_screen_up_and_running_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_up_and_running_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_up_and_running_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_up_and_running_title", bundle: bundle, comment: "")
      }

      /// Value: Update
      static func screen_splash_button_force_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_splash_button_force_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_splash_button_force_update"
        }

        return NSLocalizedString("screen_splash_button_force_update", bundle: bundle, comment: "")
      }

      /// Value: Update card
      static func screen_cards_button_update_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_button_update_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_button_update_card"
        }

        return NSLocalizedString("screen_cards_button_update_card", bundle: bundle, comment: "")
      }

      /// Value: Update profile photo
      static func screen_user_profile_display_text_update_profile_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_user_profile_display_text_update_profile_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_user_profile_display_text_update_profile_photo"
        }

        return NSLocalizedString("screen_user_profile_display_text_update_profile_photo", bundle: bundle, comment: "")
      }

      /// Value: Upgrade or add a new card
      static func screen_card_plans_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_plans_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_plans_title"
        }

        return NSLocalizedString("screen_card_plans_title", bundle: bundle, comment: "")
      }

      /// Value: Upgrade to Prime
      static func screen_yfy_take_a_leap_text_upgrade_to_prime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_a_leap_text_upgrade_to_prime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_a_leap_text_upgrade_to_prime"
        }

        return NSLocalizedString("screen_yfy_take_a_leap_text_upgrade_to_prime", bundle: bundle, comment: "")
      }

      /// Value: Use %@
      static func screen_system_permission_button_touch_id(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_system_permission_button_touch_id", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_button_touch_id"
        }

        let format = NSLocalizedString("screen_system_permission_button_touch_id", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Use Face ID to log in to your account?
      static func screen_system_permission_text_title_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_title_face_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_title_face_id"
        }

        return NSLocalizedString("screen_system_permission_text_title_face_id", bundle: bundle, comment: "")
      }

      /// Value: Use Touch ID to log in to your account?
      static func screen_system_permission_text_title_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_title_touch_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_title_touch_id"
        }

        return NSLocalizedString("screen_system_permission_text_title_touch_id", bundle: bundle, comment: "")
      }

      /// Value: Use Touch ID to log into YAP quicker. Make sure your Touch ID is always on in your device settings
      static func screen_system_permission_text_details_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_details_touch_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_details_touch_id"
        }

        return NSLocalizedString("screen_system_permission_text_details_touch_id", bundle: bundle, comment: "")
      }

      /// Value: Use YAP locally
      static func screen_yfy_up_and_running_text_use_yap_locally(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_text_use_yap_locally", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_text_use_yap_locally"
        }

        return NSLocalizedString("screen_yfy_up_and_running_text_use_yap_locally", bundle: bundle, comment: "")
      }

      /// Value: Use your fingerprint to sign in
      static func screen_verify_passcode_display_text_biometrics_reason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_passcode_display_text_biometrics_reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_passcode_display_text_biometrics_reason"
        }

        return NSLocalizedString("screen_verify_passcode_display_text_biometrics_reason", bundle: bundle, comment: "")
      }

      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static func screen_add_card_display_text_feature_spare_card_every_need_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_every_need_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_every_need_details"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_every_need_details", bundle: bundle, comment: "")
      }

      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static func screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_freeze_or_unfreeze_details", bundle: bundle, comment: "")
      }

      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static func screen_add_card_display_text_feature_spare_card_nick_name_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_nick_name_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_nick_name_details"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_nick_name_details", bundle: bundle, comment: "")
      }

      /// Value: Use your spare card as backup or as a card for when you’re away for a few days and don’t want to travel with your primary card. Note that your spare card can only be used by you.
      static func screen_add_card_display_text_feature_spare_card_virtual_or_physical_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_spare_card_virtual_or_physical_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_spare_card_virtual_or_physical_details"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_spare_card_virtual_or_physical_details", bundle: bundle, comment: "")
      }

      /// Value: VAT
      static func screen_transaction_details_display_text_vat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_details_display_text_vat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_details_display_text_vat"
        }

        return NSLocalizedString("screen_transaction_details_display_text_vat", bundle: bundle, comment: "")
      }

      /// Value: Verify
      static func screen_device_registration_otp_button_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_device_registration_otp_button_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_device_registration_otp_button_send"
        }

        return NSLocalizedString("screen_device_registration_otp_button_send", bundle: bundle, comment: "")
      }

      /// Value: Verify
      static func screen_sign_in_button_verify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_sign_in_button_verify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_sign_in_button_verify"
        }

        return NSLocalizedString("screen_sign_in_button_verify", bundle: bundle, comment: "")
      }

      /// Value: Verify your PIN change
      static func screen_forgot_pin_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_forgot_pin_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_forgot_pin_display_text_heading"
        }

        return NSLocalizedString("screen_forgot_pin_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your email address
      static func screen_email_verification_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_display_text_heading"
        }

        return NSLocalizedString("screen_email_verification_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your mobile number
      static func screen_add_beneificiary_otp_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneificiary_otp_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneificiary_otp_display_text_heading"
        }

        return NSLocalizedString("screen_add_beneificiary_otp_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your mobile number
      static func screen_add_funds_otp_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_funds_otp_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_otp_display_text_heading"
        }

        return NSLocalizedString("screen_add_funds_otp_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your mobile number
      static func screen_forgot_passcode_otp_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_forgot_passcode_otp_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_forgot_passcode_otp_display_text_heading"
        }

        return NSLocalizedString("screen_forgot_passcode_otp_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your mobile number
      static func screen_phone_number_verification_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_phone_number_verification_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_phone_number_verification_display_text_heading"
        }

        return NSLocalizedString("screen_phone_number_verification_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Verify your mobile number
      static func screen_verify_phone_number_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_phone_number_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_phone_number_display_text_title"
        }

        return NSLocalizedString("screen_verify_phone_number_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: View
      static func common_button_view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_view"
        }

        return NSLocalizedString("common_button_view", bundle: bundle, comment: "")
      }

      /// Value: View
      static func screen_card_statements_display_text_view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_statements_display_text_view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_statements_display_text_view"
        }

        return NSLocalizedString("screen_card_statements_display_text_view", bundle: bundle, comment: "")
      }

      /// Value: View
      static func screen_yap_4_you_home_button_title_view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_4_you_home_button_title_view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_4_you_home_button_title_view"
        }

        return NSLocalizedString("screen_yap_4_you_home_button_title_view", bundle: bundle, comment: "")
      }

      /// Value: View and manage all your purchased YAP packages and add-ons in a single place.
      static func screen_store_display_tour_guide_text_desc_purchase_package(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_store_display_tour_guide_text_desc_purchase_package", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_store_display_tour_guide_text_desc_purchase_package"
        }

        return NSLocalizedString("screen_store_display_tour_guide_text_desc_purchase_package", bundle: bundle, comment: "")
      }

      /// Value: View statement
      static func screen_card_detail_button_view_statement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_button_view_statement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_button_view_statement"
        }

        return NSLocalizedString("screen_card_detail_button_view_statement", bundle: bundle, comment: "")
      }

      /// Value: View your transactions plotted on a graph and drag your fingers along the bars to view a specific date.
      static func screen_home_display_tour_guide_text_desc_graph(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_desc_graph", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_desc_graph"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_desc_graph", bundle: bundle, comment: "")
      }

      /// Value: Virtual card
      static func common_display_text_spare_virtual_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_spare_virtual_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_spare_virtual_card"
        }

        return NSLocalizedString("common_display_text_spare_virtual_card", bundle: bundle, comment: "")
      }

      /// Value: Virtual card
      static func common_display_text_virtual_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_virtual_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_virtual_card"
        }

        return NSLocalizedString("common_display_text_virtual_card", bundle: bundle, comment: "")
      }

      /// Value: Virtual cards let you make online payments without sharing your main card details.  You can order a virtual card through the Cards section. It is available immediately, so the next time you need to enter your card details online but aren’t comfortable doing it, just use your virtual card!
      static func screen_yfy_take_the_leap_goal_one_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_take_the_leap_goal_one_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_take_the_leap_goal_one_description"
        }

        return NSLocalizedString("screen_yfy_take_the_leap_goal_one_description", bundle: bundle, comment: "")
      }

      /// Value: Want to jump the queue?
      static func screen_waiting_list_rank_bump_me_up_info_text_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_bump_me_up_info_text_top", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_bump_me_up_info_text_top"
        }

        return NSLocalizedString("screen_waiting_list_rank_bump_me_up_info_text_top", bundle: bundle, comment: "")
      }

      /// Value: We are asking about CASH only that would be deposited in a bank machine.  We only ask this question for compliance purposes to safegaurd your account. 
      static func employment_info_questions_additional_info_for_cash_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("employment_info_questions_additional_info_for_cash_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "employment_info_questions_additional_info_for_cash_details"
        }

        return NSLocalizedString("employment_info_questions_additional_info_for_cash_details", bundle: bundle, comment: "")
      }

      /// Value: We are now processing your account. Please wait for activation to be completed shortly.
      static func screen_cards_display_text_inactive_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_inactive_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_inactive_subheading"
        }

        return NSLocalizedString("screen_cards_display_text_inactive_subheading", bundle: bundle, comment: "")
      }

      /// Value: We are reviewing your documents submitted on %@
      static func view_payment_card_onboarding_stage_additional_requirement_provided_subtitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_provided_subtitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_additional_requirement_provided_subtitle"
        }

        let format = NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_provided_subtitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: We need to verify your ID to issue your card
      static func screen_household_kyc_home_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_kyc_home_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_kyc_home_display_text_screen_title"
        }

        return NSLocalizedString("screen_household_kyc_home_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: We only ask you this questions for administrative purpose. It does not impact your ability to sign up to a YAP account.
      static func screen_onboarding_employment_type_screen_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_employment_type_screen_info_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_employment_type_screen_info_title"
        }

        return NSLocalizedString("screen_onboarding_employment_type_screen_info_title", bundle: bundle, comment: "")
      }

      /// Value: We thought you should know, %@!
      static func screen_otp_blocked_display_text_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_otp_blocked_display_text_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_otp_blocked_display_text_heading"
        }

        let format = NSLocalizedString("screen_otp_blocked_display_text_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: We use push notifications to give you updates about all transactions and to send important reminders about your account
      static func screen_system_permission_text_details_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_details_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_details_notification"
        }

        return NSLocalizedString("screen_system_permission_text_details_notification", bundle: bundle, comment: "")
      }

      /// Value: We will call you to confirm the time. Make sure to keep your Emirates ID with you
      static func screen_household_location_selection_success_display_text_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_location_selection_success_display_text_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_location_selection_success_display_text_subheading"
        }

        return NSLocalizedString("screen_household_location_selection_success_display_text_subheading", bundle: bundle, comment: "")
      }

      /// Value: We will notify you before each payment in case you require a fund top up on your account
      static func screen_household_recurring_payment_guide_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_recurring_payment_guide_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_recurring_payment_guide_text"
        }

        return NSLocalizedString("screen_household_recurring_payment_guide_text", bundle: bundle, comment: "")
      }

      /// Value: We will notify you when you’ve reached the top. Log back in to see your updated place in the queue.
      static func screen_waiting_list_rank_info_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_info_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_info_text"
        }

        return NSLocalizedString("screen_waiting_list_rank_info_text", bundle: bundle, comment: "")
      }

      /// Value: We will now block your card permanently, following which you will be able to order a new card. Please confirm if you want to move forward with this action.
      static func screen_report_card_display_text_block_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_report_card_display_text_block_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_report_card_display_text_block_alert_message"
        }

        return NSLocalizedString("screen_report_card_display_text_block_alert_message", bundle: bundle, comment: "")
      }

      /// Value: We're sorry :(
      static func screen_kyc_information_error_display_text_title_sanctioned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_title_sanctioned", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_title_sanctioned"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_title_sanctioned", bundle: bundle, comment: "")
      }

      /// Value: We're sorry, we aren't able to create bank accounts for US citizens at this point. Stay tuned though, we'll announce it everywhere if this changes!
      static func screen_kyc_information_error_display_text_explanation_from_usa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_explanation_from_usa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_explanation_from_usa"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_explanation_from_usa", bundle: bundle, comment: "")
      }

      /// Value: We've sent a code to  %@
      static func screen_phone_number_verification_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_phone_number_verification_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_phone_number_verification_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_phone_number_verification_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: We've sent a verification code to
      static func screen_verify_phone_number_display_text_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_verify_phone_number_display_text_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_verify_phone_number_display_text_sub_title"
        }

        return NSLocalizedString("screen_verify_phone_number_display_text_sub_title", bundle: bundle, comment: "")
      }

      /// Value: We've sent a verification code to  %@
      static func screen_email_verification_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_email_verification_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_email_verification_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: We've sent a verification code to  %@
      static func screen_forgot_pin_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_forgot_pin_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_forgot_pin_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_forgot_pin_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Weekly
      static func screen_household_weekly_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_weekly_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_weekly_title"
        }

        return NSLocalizedString("screen_household_weekly_title", bundle: bundle, comment: "")
      }

      /// Value: Welcome %@!
      static func screen_confirm_parent_mobile_display_text_welcome(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_confirm_parent_mobile_display_text_welcome", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_confirm_parent_mobile_display_text_welcome"
        }

        let format = NSLocalizedString("screen_confirm_parent_mobile_display_text_welcome", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Welcome %@, you’ve been added to a Household plan by %@
      static func screen_household_welcome_subtitle(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_welcome_subtitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_subtitle"
        }

        let format = NSLocalizedString("screen_household_welcome_subtitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: We’ll need some more additional information to proceed
      static func view_payment_card_onboarding_stage_additional_requirement_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_additional_requirement_subtitle"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_additional_requirement_subtitle", bundle: bundle, comment: "")
      }

      /// Value: We’re currently in beta and only open to a limited number of users. Don’t worry, you’ll be the first to know when we’re ready. Should you wish to find out more in the meantime, our website has more information for you.
      static func screen_waiting_list_dispaly_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_dispaly_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_dispaly_text_sub_heading"
        }

        return NSLocalizedString("screen_waiting_list_dispaly_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: We’ve sent you this so we can remain connected and give you important updates about your account.
      static func screen_email_verification_b2b_display_text_email_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_b2b_display_text_email_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_b2b_display_text_email_confirmation"
        }

        return NSLocalizedString("screen_email_verification_b2b_display_text_email_confirmation", bundle: bundle, comment: "")
      }

      /// Value: We’ve sent you this so we can remain connected and give you important updates about your account.
      static func screen_email_verification_b2c_display_text_email_confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_b2c_display_text_email_confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_b2c_display_text_email_confirmation"
        }

        return NSLocalizedString("screen_email_verification_b2c_display_text_email_confirmation", bundle: bundle, comment: "")
      }

      /// Value: What are you waiting for? Go ahead and set a unique 4-digit PIN to start using your card
      static func screen_yfy_get_started_goal_two_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_goal_two_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_goal_two_description"
        }

        return NSLocalizedString("screen_yfy_get_started_goal_two_description", bundle: bundle, comment: "")
      }

      /// Value: What is this for?
      static func screen_iban_send_money_success_reason_header_display_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_reason_header_display_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_reason_header_display_text"
        }

        return NSLocalizedString("screen_iban_send_money_success_reason_header_display_text", bundle: bundle, comment: "")
      }

      /// Value: What is your employment status?
      static func screen_onboarding_employment_type_screen_subheading_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_onboarding_employment_type_screen_subheading_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_onboarding_employment_type_screen_subheading_title"
        }

        return NSLocalizedString("screen_onboarding_employment_type_screen_subheading_title", bundle: bundle, comment: "")
      }

      /// Value: What type of transfer will this be?
      static func screen_add_beneficiary_display_text_transfer_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_transfer_type"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_transfer_type", bundle: bundle, comment: "")
      }

      /// Value: What would you like to call this card?
      static func screen_change_card_name_display_text_add_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_card_name_display_text_add_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_card_name_display_text_add_name"
        }

        return NSLocalizedString("screen_change_card_name_display_text_add_name", bundle: bundle, comment: "")
      }

      /// Value: What's your mobile number?
      static func screen_phone_number_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_phone_number_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_phone_number_display_text_title"
        }

        return NSLocalizedString("screen_phone_number_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: What's your name?
      static func screeen_name_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screeen_name_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screeen_name_display_text_title"
        }

        return NSLocalizedString("screeen_name_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: WhatsApp is not installed in your phone
      static func screen_help_and_support_display_text_whatsapp_not_installed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_help_and_support_display_text_whatsapp_not_installed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_help_and_support_display_text_whatsapp_not_installed"
        }

        return NSLocalizedString("screen_help_and_support_display_text_whatsapp_not_installed", bundle: bundle, comment: "")
      }

      /// Value: What’s the legal name of your company?
      static func screen_company_name_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_company_name_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_company_name_display_text_title"
        }

        return NSLocalizedString("screen_company_name_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: What’s your preferred email address?
      static func screen_enter_email_b2c_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_enter_email_b2c_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_enter_email_b2c_display_text_title"
        }

        return NSLocalizedString("screen_enter_email_b2c_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Where can we deliver your debit card?
      static func screen_add_spare_card_update_location_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_update_location_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_update_location_display_text_sub_heading"
        }

        return NSLocalizedString("screen_add_spare_card_update_location_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Which country do you want to  send money to?
      static func screen_add_beneficiary_display_text_country_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_display_text_country_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_display_text_country_title"
        }

        return NSLocalizedString("screen_add_beneficiary_display_text_country_title", bundle: bundle, comment: "")
      }

      /// Value: Who are you getting the Household plan for?
      static func screen_yap_house_hold_user_info_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_user_info_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_user_info_display_text_heading"
        }

        return NSLocalizedString("screen_yap_house_hold_user_info_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Who do you want to send money to?
      static func screen_send_money_no_contacts_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_no_contacts_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_no_contacts_display_text_sub_heading"
        }

        return NSLocalizedString("screen_send_money_no_contacts_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Who do you want to send money to?
      static func screen_y2y_display_text_prompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_prompt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_prompt"
        }

        return NSLocalizedString("screen_y2y_display_text_prompt", bundle: bundle, comment: "")
      }

      /// Value: Why do we ask you about your monthly salary?
      static func employment_info_questions_additional_info_for_salary_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("employment_info_questions_additional_info_for_salary_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "employment_info_questions_additional_info_for_salary_title"
        }

        return NSLocalizedString("employment_info_questions_additional_info_for_salary_title", bundle: bundle, comment: "")
      }

      /// Value: Worldwide Free ATM withdrawals
      static func screen_add_card_display_text_feature_free_atm_withdrawals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_card_display_text_feature_free_atm_withdrawals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_card_display_text_feature_free_atm_withdrawals"
        }

        return NSLocalizedString("screen_add_card_display_text_feature_free_atm_withdrawals", bundle: bundle, comment: "")
      }

      /// Value: Would you like to re-send a request or remove this card and get a refund? 
      static func screen_household_card_screen_decline_card_alert_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_decline_card_alert_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_decline_card_alert_description"
        }

        return NSLocalizedString("screen_household_card_screen_decline_card_alert_description", bundle: bundle, comment: "")
      }

      /// Value: Would you like to receive notifications from us?
      static func screen_system_permission_text_title_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_system_permission_text_title_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_system_permission_text_title_notification"
        }

        return NSLocalizedString("screen_system_permission_text_title_notification", bundle: bundle, comment: "")
      }

      /// Value: YAP Business
      static func screen_more_home_display_text_tile_business(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_tile_business", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_tile_business"
        }

        return NSLocalizedString("screen_more_home_display_text_tile_business", bundle: bundle, comment: "")
      }

      /// Value: YAP Store
      static func screen_yfy_home_screen_store_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_store_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_store_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_store_title", bundle: bundle, comment: "")
      }

      /// Value: YAP Young transfers
      static func screen_transaction_filter_display_text_young_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_transaction_filter_display_text_young_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_transaction_filter_display_text_young_transactions"
        }

        return NSLocalizedString("screen_transaction_filter_display_text_young_transactions", bundle: bundle, comment: "")
      }

      /// Value: YAP account details
      static func screen_more_bank_details_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_bank_details_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_bank_details_display_text_title"
        }

        return NSLocalizedString("screen_more_bank_details_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: YAP contacts
      static func screen_y2y_display_button_yap_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_button_yap_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_button_yap_contacts"
        }

        return NSLocalizedString("screen_y2y_display_button_yap_contacts", bundle: bundle, comment: "")
      }

      /// Value: YAP for you
      static func screen_achievement_detail_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_achievement_detail_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_achievement_detail_display_text_screen_title"
        }

        return NSLocalizedString("screen_achievement_detail_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: YAP for you
      static func screen_more_home_display_text_yap_for_you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_yap_for_you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_yap_for_you"
        }

        return NSLocalizedString("screen_more_home_display_text_yap_for_you", bundle: bundle, comment: "")
      }

      /// Value: YAP for you
      static func screen_more_home_display_text_yap_for_you_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_home_display_text_yap_for_you_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_home_display_text_yap_for_you_title"
        }

        return NSLocalizedString("screen_more_home_display_text_yap_for_you_title", bundle: bundle, comment: "")
      }

      /// Value: YAP for you
      static func screen_more_tour_guide_yap_for_you_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_tour_guide_yap_for_you_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_tour_guide_yap_for_you_title"
        }

        return NSLocalizedString("screen_more_tour_guide_yap_for_you_title", bundle: bundle, comment: "")
      }

      /// Value: YAP for you
      static func screen_yap_4_you_home_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_4_you_home_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_4_you_home_display_text_screen_title"
        }

        return NSLocalizedString("screen_yap_4_you_home_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: YAP it
      static func screen_home_display_tour_guide_text_title_yap_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_title_yap_it", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_title_yap_it"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_title_yap_it", bundle: bundle, comment: "")
      }

      /// Value: YAP needs to access your location to continue. Please grant location access from Settings.
      static func screen_meeting_location_display_text_location_permission_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_display_text_location_permission_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_display_text_location_permission_error_title"
        }

        return NSLocalizedString("screen_meeting_location_display_text_location_permission_error_title", bundle: bundle, comment: "")
      }

      /// Value: YAP rate: 
      static func screen_international_funds_transfer_display_text_yap_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_yap_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_yap_rate"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_yap_rate", bundle: bundle, comment: "")
      }

      /// Value: YAP referal code:
      static func screen_invite_friend_display_text_your_referal_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_invite_friend_display_text_your_referal_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_invite_friend_display_text_your_referal_code"
        }

        return NSLocalizedString("screen_invite_friend_display_text_your_referal_code", bundle: bundle, comment: "")
      }

      /// Value: YAP to YAP
      static func screen_send_money_no_contacts_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_no_contacts_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_no_contacts_display_text_title"
        }

        return NSLocalizedString("screen_send_money_no_contacts_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: YAP works best with a valid Emirates ID
      static func screen_kyc_information_error_display_text_title_expired_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_kyc_information_error_display_text_title_expired_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_kyc_information_error_display_text_title_expired_card"
        }

        return NSLocalizedString("screen_kyc_information_error_display_text_title_expired_card", bundle: bundle, comment: "")
      }

      /// Value: Yap Young
      static func screen_menu_display_text_yap_young(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_menu_display_text_yap_young", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_menu_display_text_yap_young"
        }

        return NSLocalizedString("screen_menu_display_text_yap_young", bundle: bundle, comment: "")
      }

      /// Value: Yearly
      static func screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_select_plan_yearly", bundle: bundle, comment: "")
      }

      /// Value: Yes
      static func common_button_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_button_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_button_yes"
        }

        return NSLocalizedString("common_button_yes", bundle: bundle, comment: "")
      }

      /// Value: Yes, keep me updated
      static func screen_notification_permission_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_notification_permission_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_notification_permission_button_title"
        }

        return NSLocalizedString("screen_notification_permission_button_title", bundle: bundle, comment: "")
      }

      /// Value: Yes, send now
      static func screen_add_beneficiary_detail_display_button_block_alert_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_button_block_alert_yes"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_button_block_alert_yes", bundle: bundle, comment: "")
      }

      /// Value: Yes, top up now
      static func screen_add_topup_card_succes_button_top_up_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_topup_card_succes_button_top_up_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_topup_card_succes_button_top_up_now"
        }

        return NSLocalizedString("screen_add_topup_card_succes_button_top_up_now", bundle: bundle, comment: "")
      }

      /// Value: You are now ready to fully activate and begin using your YAP account.
      static func screen_complete_verification_fss_sub_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_complete_verification_fss_sub_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_complete_verification_fss_sub_heading_text"
        }

        return NSLocalizedString("screen_complete_verification_fss_sub_heading_text", bundle: bundle, comment: "")
      }

      /// Value: You are sending %@ %@ 
      static func scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency"
        }

        let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount_same_currency", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: You can only move an amount less than or equal to your current balance of %@
      static func screen_remove_funds_display_text_available_balance_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_remove_funds_display_text_available_balance_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_available_balance_error"
        }

        let format = NSLocalizedString("screen_remove_funds_display_text_available_balance_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You can only send up to %@ at this time. To transfer bigger amounts, please wait for %@ hours from the time you added %@.
      static func common_display_text_cooling_period_limit_error(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_cooling_period_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_cooling_period_limit_error"
        }

        let format = NSLocalizedString("common_display_text_cooling_period_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// Value: You can only top up with an amount equal to or less than the current balance of %@ available on your main debit card
      static func screen_add_funds_display_text_available_balance_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_available_balance_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_available_balance_error"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_available_balance_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You can only transfer an amount less than or equal to your current balance of %@
      static func screen_y2y_funds_transfer_display_text_error_exceeding_amount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_error_exceeding_amount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_error_exceeding_amount"
        }

        let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_error_exceeding_amount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You can send money to people around the world through your YAP account. Click below to start adding a beneficiary. You can also do this using the + button anytime.
      static func screen_send_money_no_contacts_display_text_detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_send_money_no_contacts_display_text_detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_send_money_no_contacts_display_text_detail"
        }

        return NSLocalizedString("screen_send_money_no_contacts_display_text_detail", bundle: bundle, comment: "")
      }

      /// Value: You can temporarily block usage of your card by clicking on Freeze. Don’t worry though, you can always unfreeze your card instantly. 
      static func screen_primary_card_detail_tour_guide_free_card_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_primary_card_detail_tour_guide_free_card_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_primary_card_detail_tour_guide_free_card_description"
        }

        return NSLocalizedString("screen_primary_card_detail_tour_guide_free_card_description", bundle: bundle, comment: "")
      }

      /// Value: You cannot add an amount more than %@
      static func screen_add_funds_display_text_max_limit_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_max_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_max_limit_error"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_max_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You cannot enter your own IBAN
      static func screen_add_beneficiary_detail_display_text_error_iban_current_user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_beneficiary_detail_display_text_error_iban_current_user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_beneficiary_detail_display_text_error_iban_current_user"
        }

        return NSLocalizedString("screen_add_beneficiary_detail_display_text_error_iban_current_user", bundle: bundle, comment: "")
      }

      /// Value: You cannot move an amount more than %@
      static func screen_remove_funds_display_text_max_limit_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_remove_funds_display_text_max_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_max_limit_error"
        }

        let format = NSLocalizedString("screen_remove_funds_display_text_max_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You don't have any activity on this account yet
      static func screen_household_analytics_screen_no_transection_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_analytics_screen_no_transection_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_analytics_screen_no_transection_title"
        }

        return NSLocalizedString("screen_household_analytics_screen_no_transection_title", bundle: bundle, comment: "")
      }

      /// Value: You have %d cards
      static func screen_cards_display_text_cards_count(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_cards_display_text_cards_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_cards_count"
        }

        let format = NSLocalizedString("screen_cards_display_text_cards_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have %d cards
      static func screen_topup_card_selection_display_text_heading_cards(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_topup_card_selection_display_text_heading_cards", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_heading_cards"
        }

        let format = NSLocalizedString("screen_topup_card_selection_display_text_heading_cards", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have 1 card
      static func screen_cards_display_text_cards_count_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cards_display_text_cards_count_1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cards_display_text_cards_count_1"
        }

        return NSLocalizedString("screen_cards_display_text_cards_count_1", bundle: bundle, comment: "")
      }

      /// Value: You have 1 card
      static func screen_topup_card_selection_display_text_heading_1_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_card_selection_display_text_heading_1_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_card_selection_display_text_heading_1_card"
        }

        return NSLocalizedString("screen_topup_card_selection_display_text_heading_1_card", bundle: bundle, comment: "")
      }

      /// Value: You have been added to a Household plan by %@
      static func screen_household_welcome_accept_invitation_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_household_welcome_accept_invitation_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_welcome_accept_invitation_title"
        }

        let format = NSLocalizedString("screen_household_welcome_accept_invitation_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have been bumped up by %d spots.
      static func screen_waiting_list_rank_invitees_list_subtitle_text(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_subtitle_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_invitees_list_subtitle_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_subtitle_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have consumed the limit for the amount you can send at this time. To send money, please wait for %@ hours from the time you added %@.
      static func common_display_text_cooling_period_limit_consumed_error(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_cooling_period_limit_consumed_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_cooling_period_limit_consumed_error"
        }

        let format = NSLocalizedString("common_display_text_cooling_period_limit_consumed_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: You have denied YAP access to camera. To allow YAP to use camera go to settings
      static func common_display_text_permission_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_permission_camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_permission_camera"
        }

        return NSLocalizedString("common_display_text_permission_camera", bundle: bundle, comment: "")
      }

      /// Value: You have exceeded your daily transaction limit
      static func common_display_text_daily_limit_error_multiple_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_display_text_daily_limit_error_multiple_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_daily_limit_error_multiple_transactions"
        }

        return NSLocalizedString("common_display_text_daily_limit_error_multiple_transactions", bundle: bundle, comment: "")
      }

      /// Value: You have exceeded your limit for held on transactions, please enter an amount less than %@
      static func common_display_text_on_hold_limit_error(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_on_hold_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_on_hold_limit_error"
        }

        let format = NSLocalizedString("common_display_text_on_hold_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have full control of your card!  Set limits against spending online, abroad, retail and at an ATM
      static func screen_yfy_up_and_running_goal_four_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_up_and_running_goal_four_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_up_and_running_goal_four_description"
        }

        return NSLocalizedString("screen_yfy_up_and_running_goal_four_description", bundle: bundle, comment: "")
      }

      /// Value: You have insufficient balance in your account to purchase this package
      static func screen_yap_house_hold_confirm_payment_display_text_amount_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_amount_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_amount_error"
        }

        return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_amount_error", bundle: bundle, comment: "")
      }

      /// Value: You have moved %@  to your main debit card
      static func screen_success_remove_funds_transaction_display_text_success_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_success_remove_funds_transaction_display_text_success_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_remove_funds_transaction_display_text_success_heading"
        }

        let format = NSLocalizedString("screen_success_remove_funds_transaction_display_text_success_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have now added %@ to your account
      static func screen_topup_success_display_text_success_transaction_message(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_topup_success_display_text_success_transaction_message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_success_display_text_success_transaction_message"
        }

        let format = NSLocalizedString("screen_topup_success_display_text_success_transaction_message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You have sent
      static func screen_cash_pickup_funds_transfer_display_text_amount_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_cash_pickup_funds_transfer_display_text_amount_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_cash_pickup_funds_transfer_display_text_amount_heading"
        }

        return NSLocalizedString("screen_cash_pickup_funds_transfer_display_text_amount_heading", bundle: bundle, comment: "")
      }

      /// Value: You have sent
      static func screen_domestic_funds_transfer_display_text_amount_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_domestic_funds_transfer_display_text_amount_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_domestic_funds_transfer_display_text_amount_heading"
        }

        return NSLocalizedString("screen_domestic_funds_transfer_display_text_amount_heading", bundle: bundle, comment: "")
      }

      /// Value: You have sent
      static func screen_international_funds_transfer_display_text_amount_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_amount_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_amount_heading"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_amount_heading", bundle: bundle, comment: "")
      }

      /// Value: You have sent
      static func screen_y2y_funds_transfer_success_display_text_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_funds_transfer_success_display_text_transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_success_display_text_transfer"
        }

        return NSLocalizedString("screen_y2y_funds_transfer_success_display_text_transfer", bundle: bundle, comment: "")
      }

      /// Value: You have successfully sent
      static func screen_iban_send_money_success_prefix_message_display_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_prefix_message_display_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_prefix_message_display_text"
        }

        return NSLocalizedString("screen_iban_send_money_success_prefix_message_display_text", bundle: bundle, comment: "")
      }

      /// Value: You have topped up with %@  from your main debit card
      static func screen_success_funds_transaction_display_text_success_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_success_funds_transaction_display_text_success_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_funds_transaction_display_text_success_heading"
        }

        let format = NSLocalizedString("screen_success_funds_transaction_display_text_success_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You referred %d friends! %@
      static func screen_waiting_list_rank_invitees_list_title_text(_ value1: Int, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_title_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_invitees_list_title_text"
        }

        let format = NSLocalizedString("screen_waiting_list_rank_invitees_list_title_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: You're all set
      static func screen_passcode_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_passcode_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_passcode_success_display_text_heading"
        }

        return NSLocalizedString("screen_passcode_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Your %@ is on its way
      static func screen_card_delivery_status_display_text_info(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_card_delivery_status_display_text_info", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_delivery_status_display_text_info"
        }

        let format = NSLocalizedString("screen_card_delivery_status_display_text_info", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your %@ is shipped
      static func screen_card_delivery_status_shipped_display_text_info(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_card_delivery_status_shipped_display_text_info", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_delivery_status_shipped_display_text_info"
        }

        let format = NSLocalizedString("screen_card_delivery_status_shipped_display_text_info", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your EID is expired. Please ensure you update your card to continue accessing YAP
      static func screen_personal_details_display_text_expired_emirates_id_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_expired_emirates_id_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_expired_emirates_id_details"
        }

        return NSLocalizedString("screen_personal_details_display_text_expired_emirates_id_details", bundle: bundle, comment: "")
      }

      /// Value: Your EID is required. Tap to update to ensure account continuity
      static func screen_personal_details_display_text_required_emirates_id_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_required_emirates_id_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_required_emirates_id_details"
        }

        return NSLocalizedString("screen_personal_details_display_text_required_emirates_id_details", bundle: bundle, comment: "")
      }

      /// Value: Your EID scan has been carried out. We are now processing your account. Please wait for activation to be completed shortly.
      static func view_payment_card_onboarding_stage_two_active_subheading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_two_active_subheading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_two_active_subheading"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_two_active_subheading", bundle: bundle, comment: "")
      }

      /// Value: Your EID scan was approved on %@
      static func view_payment_card_onboarding_stage_two_completed_subheading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("view_payment_card_onboarding_stage_two_completed_subheading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_two_completed_subheading"
        }

        let format = NSLocalizedString("view_payment_card_onboarding_stage_two_completed_subheading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your PIN was successfully set on %@
      static func view_payment_card_onboarding_stage_three_completed_subheading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("view_payment_card_onboarding_stage_three_completed_subheading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_three_completed_subheading"
        }

        let format = NSLocalizedString("view_payment_card_onboarding_stage_three_completed_subheading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your account will be deducted by
      static func screen_yap_house_hold_confirm_payment_display_text_account_deducted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_account_deducted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_account_deducted"
        }

        return NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_account_deducted", bundle: bundle, comment: "")
      }

      /// Value: Your achievements
      static func screen_complete_achievement_display_text_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_complete_achievement_display_text_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_complete_achievement_display_text_screen_title"
        }

        return NSLocalizedString("screen_complete_achievement_display_text_screen_title", bundle: bundle, comment: "")
      }

      /// Value: Your available balance is
      static func screen_add_spare_card_display_text_available_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_spare_card_display_text_available_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_spare_card_display_text_available_balance"
        }

        return NSLocalizedString("screen_add_spare_card_display_text_available_balance", bundle: bundle, comment: "")
      }

      /// Value: Your available balance is %@
      static func screen_add_funds_display_text_available_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_available_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_available_balance"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_available_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your available balance is %@
      static func screen_iban_send_money_available_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_iban_send_money_available_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_available_balance"
        }

        let format = NSLocalizedString("screen_iban_send_money_available_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your available balance is %@
      static func screen_remove_funds_display_text_available_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_remove_funds_display_text_available_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_remove_funds_display_text_available_balance"
        }

        let format = NSLocalizedString("screen_remove_funds_display_text_available_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your available balance is %@
      static func screen_topup_transfer_display_text_available_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_topup_transfer_display_text_available_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_transfer_display_text_available_balance"
        }

        let format = NSLocalizedString("screen_topup_transfer_display_text_available_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your available balance is %@
      static func screen_y2y_funds_transfer_display_text_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_funds_transfer_display_text_balance"
        }

        let format = NSLocalizedString("screen_y2y_funds_transfer_display_text_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your available balance is %@
      static func screen_yap_house_hold_confirm_payment_display_text_balance(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_balance", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_balance"
        }

        let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_balance", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your balace
      static func screen_household_card_screen_admin_account_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_card_screen_admin_account_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_card_screen_admin_account_title"
        }

        return NSLocalizedString("screen_household_card_screen_admin_account_title", bundle: bundle, comment: "")
      }

      /// Value: Your balance from this card will be transferred back to your main account
      static func screen_card_detail_display_text_remove_card_alert_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_detail_display_text_remove_card_alert_desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_detail_display_text_remove_card_alert_desc"
        }

        return NSLocalizedString("screen_card_detail_display_text_remove_card_alert_desc", bundle: bundle, comment: "")
      }

      /// Value: Your bank details
      static func screen_more_tour_guide_bank_detail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_more_tour_guide_bank_detail_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_more_tour_guide_bank_detail_title"
        }

        return NSLocalizedString("screen_more_tour_guide_bank_detail_title", bundle: bundle, comment: "")
      }

      /// Value: Your card has been added successfully
      static func screen_add_topup_card_display_text_succes_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_topup_card_display_text_succes_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_topup_card_display_text_succes_title"
        }

        return NSLocalizedString("screen_add_topup_card_display_text_succes_title", bundle: bundle, comment: "")
      }

      /// Value: Your card has been blocked
      static func screen_card_blocked_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_blocked_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_blocked_display_text_heading"
        }

        return NSLocalizedString("screen_card_blocked_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Your card has been reordered successfully
      static func screen_add_debit_card_completion_display_text_complete_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_debit_card_completion_display_text_complete_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_debit_card_completion_display_text_complete_transaction"
        }

        return NSLocalizedString("screen_add_debit_card_completion_display_text_complete_transaction", bundle: bundle, comment: "")
      }

      /// Value: Your card is delivered
      static func view_payment_card_onboarding_stage_two_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_two_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_two_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_two_title", bundle: bundle, comment: "")
      }

      /// Value: Your card is on it's way!
      static func screen_meeting_confirmation_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_confirmation_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_confirmation_display_text_title"
        }

        return NSLocalizedString("screen_meeting_confirmation_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Your card is on its way!
      static func screen_household_location_selection_success_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_location_selection_success_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_location_selection_success_display_text_title"
        }

        return NSLocalizedString("screen_household_location_selection_success_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Your card is on the way
      static func view_payment_card_onboarding_stage_card_on_the_way_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_card_on_the_way_title"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_card_on_the_way_title", bundle: bundle, comment: "")
      }

      /// Value: Your card is ready to be delivered!
      static func screen_meeting_location_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_meeting_location_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_meeting_location_display_text_title"
        }

        return NSLocalizedString("screen_meeting_location_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: Your card is verified and up to date
      static func screen_personal_details_display_text_emirates_id_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_emirates_id_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_emirates_id_details"
        }

        return NSLocalizedString("screen_personal_details_display_text_emirates_id_details", bundle: bundle, comment: "")
      }

      /// Value: Your card is verified and up to date
      static func screen_personal_details_display_text_emirates_id_details_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_personal_details_display_text_emirates_id_details_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_personal_details_display_text_emirates_id_details_update"
        }

        return NSLocalizedString("screen_personal_details_display_text_emirates_id_details_update", bundle: bundle, comment: "")
      }

      /// Value: Your card was delieverd on %@
      static func view_payment_card_onboarding_stage_completed_subheading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("view_payment_card_onboarding_stage_completed_subheading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_completed_subheading"
        }

        let format = NSLocalizedString("view_payment_card_onboarding_stage_completed_subheading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your card will be delivered to:
      static func screen_household_location_selection_success_address_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_location_selection_success_address_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_location_selection_success_address_display_text_heading"
        }

        return NSLocalizedString("screen_household_location_selection_success_address_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Your cards
      static func creen_cards_display_text_your_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("creen_cards_display_text_your_cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "creen_cards_display_text_your_cards"
        }

        return NSLocalizedString("creen_cards_display_text_your_cards", bundle: bundle, comment: "")
      }

      /// Value: Your current balance
      static func screen_home_display_tour_guide_text_title_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_home_display_tour_guide_text_title_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_home_display_tour_guide_text_title_amount"
        }

        return NSLocalizedString("screen_home_display_tour_guide_text_title_amount", bundle: bundle, comment: "")
      }

      /// Value: Your email address has been changed to %@
      static func screen_unverified_success_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_unverified_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_unverified_success_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_unverified_success_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your email address has been updated to  %@
      static func screen_email_address_success_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_email_address_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_address_success_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_email_address_success_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your entered amount should be between %@ and %@
      static func common_display_text_transaction_limit_error(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common_display_text_transaction_limit_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_display_text_transaction_limit_error"
        }

        let format = NSLocalizedString("common_display_text_transaction_limit_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Your mobile number has been updated to  %@
      static func screen_phone_number_success_display_text_sub_heading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_phone_number_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_phone_number_success_display_text_sub_heading"
        }

        let format = NSLocalizedString("screen_phone_number_success_display_text_sub_heading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your new YAP balance is
      static func screen_topup_success_display_text_account_balance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_topup_success_display_text_account_balance_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_topup_success_display_text_account_balance_title"
        }

        return NSLocalizedString("screen_topup_success_display_text_account_balance_title", bundle: bundle, comment: "")
      }

      /// Value: Your new passcode has been created successfully
      static func screen_passcode_success_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_passcode_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_passcode_success_display_text_sub_heading"
        }

        return NSLocalizedString("screen_passcode_success_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Your new spare card balance is
      static func screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance"
        }

        return NSLocalizedString("screen_success_funds_transaction_display_text_success_updated_prepaid_card_balance", bundle: bundle, comment: "")
      }

      /// Value: Your passcode has been updated successfully
      static func screen_change_passcode_success_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_passcode_success_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_passcode_success_display_text_sub_heading"
        }

        return NSLocalizedString("screen_change_passcode_success_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: Your place in the queue
      static func screen_waiting_list_rank_place_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_place_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_place_text_heading"
        }

        return NSLocalizedString("screen_waiting_list_rank_place_text_heading", bundle: bundle, comment: "")
      }

      /// Value: Your receipt has been added!
      static func screen_add_receipt_success_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_add_receipt_success_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_receipt_success_text"
        }

        return NSLocalizedString("screen_add_receipt_success_text", bundle: bundle, comment: "")
      }

      /// Value: Your saving %0.0f%%!
      static func screen_yap_house_hold_confirm_payment_display_text_saving(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_saving", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_confirm_payment_display_text_saving"
        }

        let format = NSLocalizedString("screen_yap_house_hold_confirm_payment_display_text_saving", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your transfer of %@ to %@ will be sent at the exchange rate of %@  That's %@ from your account
      static func scren_send_money_funds_transfer_confirmation_display_text_amount(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scren_send_money_funds_transfer_confirmation_display_text_amount"
        }

        let format = NSLocalizedString("scren_send_money_funds_transfer_confirmation_display_text_amount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      /// Value: Your transfer will be processed on the next business day.
      static func screen_international_funds_transfer_display_text_cutoff_time_uaefts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_cutoff_time_uaefts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_cutoff_time_uaefts"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_cutoff_time_uaefts", bundle: bundle, comment: "")
      }

      /// Value: Your transfer will be processed on the next business day. Please note there maybe an impact on the FX rate at the time of transfer.
      static func screen_international_funds_transfer_display_text_cutoff_time_swift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_international_funds_transfer_display_text_cutoff_time_swift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_international_funds_transfer_display_text_cutoff_time_swift"
        }

        return NSLocalizedString("screen_international_funds_transfer_display_text_cutoff_time_swift", bundle: bundle, comment: "")
      }

      /// Value: Your virtual card can only hold up to %@.
      static func screen_add_funds_display_text_error_card_balance_limit_reached(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_error_card_balance_limit_reached", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_error_card_balance_limit_reached"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_error_card_balance_limit_reached", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Your virtual card can only hold up to %@. Please enter an amount up to %@ to proceed.
      static func screen_add_funds_display_text_error_card_balance_limit(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("screen_add_funds_display_text_error_card_balance_limit", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_add_funds_display_text_error_card_balance_limit"
        }

        let format = NSLocalizedString("screen_add_funds_display_text_error_card_balance_limit", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: You’ll need this to begin using your card
      static func view_payment_card_onboarding_stage_three_initial_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_payment_card_onboarding_stage_three_initial_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_payment_card_onboarding_stage_three_initial_subtitle"
        }

        return NSLocalizedString("view_payment_card_onboarding_stage_three_initial_subtitle", bundle: bundle, comment: "")
      }

      /// Value: You’re a Pro!
      static func screen_yfy_home_screen_you_are_a_pro_started_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_home_screen_you_are_a_pro_started_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_home_screen_you_are_a_pro_started_title"
        }

        return NSLocalizedString("screen_yfy_home_screen_you_are_a_pro_started_title", bundle: bundle, comment: "")
      }

      /// Value: You’re all set
      static func screen_change_passcode_success_display_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_change_passcode_success_display_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_change_passcode_success_display_text_heading"
        }

        return NSLocalizedString("screen_change_passcode_success_display_text_heading", bundle: bundle, comment: "")
      }

      /// Value: You’re all set!   Time to top up
      static func screen_set_card_pin_success_display_text_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_set_card_pin_success_display_text_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_set_card_pin_success_display_text_title"
        }

        return NSLocalizedString("screen_set_card_pin_success_display_text_title", bundle: bundle, comment: "")
      }

      /// Value: You’re on our waiting list
      static func screen_waiting_list_dispaly_text_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_dispaly_text_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_dispaly_text_heading"
        }

        return NSLocalizedString("screen_waiting_list_dispaly_text_heading", bundle: bundle, comment: "")
      }

      /// Value: You’ve completed this task! Time for a little celebration 🥳
      static func screen_yfy_get_started_goal_completed_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yfy_get_started_goal_completed_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yfy_get_started_goal_completed_description"
        }

        return NSLocalizedString("screen_yfy_get_started_goal_completed_description", bundle: bundle, comment: "")
      }

      /// Value: You’ve now changed your PIN. Please remember this number and don’t share it with anyone.
      static func screen_household_pin_change_success_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_household_pin_change_success_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_household_pin_change_success_sub_heading"
        }

        return NSLocalizedString("screen_household_pin_change_success_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: as an expense advance
      static func screen_iban_send_money_success_postfix_message_display_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_iban_send_money_success_postfix_message_display_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_iban_send_money_success_postfix_message_display_text"
        }

        return NSLocalizedString("screen_iban_send_money_success_postfix_message_display_text", bundle: bundle, comment: "")
      }

      /// Value: per month
      static func screen_yap_house_hold_subscription_selection_display_text_per_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_per_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_per_month"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_per_month", bundle: bundle, comment: "")
      }

      /// Value: per year
      static func screen_yap_house_hold_subscription_selection_display_text_per_year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_per_year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_per_year"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_per_year", bundle: bundle, comment: "")
      }

      /// Value: please scan your Emirates ID
      static func screen_b2c_kyc_home_display_text_sub_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_b2c_kyc_home_display_text_sub_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_b2c_kyc_home_display_text_sub_heading"
        }

        return NSLocalizedString("screen_b2c_kyc_home_display_text_sub_heading", bundle: bundle, comment: "")
      }

      /// Value: save 25%
      static func screen_yap_house_hold_subscription_selection_display_text_saving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_saving", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_yap_house_hold_subscription_selection_display_text_saving"
        }

        return NSLocalizedString("screen_yap_house_hold_subscription_selection_display_text_saving", bundle: bundle, comment: "")
      }

      /// Value: transaction
      static func screen_card_analytics_display_text_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_analytics_display_text_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_transaction"
        }

        return NSLocalizedString("screen_card_analytics_display_text_transaction", bundle: bundle, comment: "")
      }

      /// Value: transactions
      static func screen_card_analytics_display_text_transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_card_analytics_display_text_transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_card_analytics_display_text_transactions"
        }

        return NSLocalizedString("screen_card_analytics_display_text_transactions", bundle: bundle, comment: "")
      }

      /// Value: waiting behind you
      static func screen_waiting_list_rank_behind_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_waiting_list_rank_behind_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_waiting_list_rank_behind_text"
        }

        return NSLocalizedString("screen_waiting_list_rank_behind_text", bundle: bundle, comment: "")
      }

      /// Value: you reached the top of the Queue!
      static func screen_complete_verification_fss_display_text_heading_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_complete_verification_fss_display_text_heading_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_complete_verification_fss_display_text_heading_text"
        }

        return NSLocalizedString("screen_complete_verification_fss_display_text_heading_text", bundle: bundle, comment: "")
      }

      /// Value: you should now receive an email on
      static func screen_email_verification_b2b_display_text_email_sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_b2b_display_text_email_sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_b2b_display_text_email_sent"
        }

        return NSLocalizedString("screen_email_verification_b2b_display_text_email_sent", bundle: bundle, comment: "")
      }

      /// Value: you should now receive an email on
      static func screen_email_verification_b2c_display_text_email_sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_email_verification_b2c_display_text_email_sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_email_verification_b2c_display_text_email_sent"
        }

        return NSLocalizedString("screen_email_verification_b2c_display_text_email_sent", bundle: bundle, comment: "")
      }

      /// Value: ​​Looks like none of your friends use YAP yet. Invite them now to make sending money easier than ever
      static func screen_y2y_display_text_no_yap_contacts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_y2y_display_text_no_yap_contacts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_y2y_display_text_no_yap_contacts"
        }

        return NSLocalizedString("screen_y2y_display_text_no_yap_contacts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
